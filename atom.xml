<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RyanChouBlog</title>
  
  
  <link href="https://ryanchou612.github.io/atom.xml" rel="self"/>
  
  <link href="https://ryanchou612.github.io/"/>
  <updated>2023-07-15T05:02:26.852Z</updated>
  <id>https://ryanchou612.github.io/</id>
  
  <author>
    <name>RyanChou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习笔记｜Docker</title>
    <link href="https://ryanchou612.github.io/posts/106f7f46.html"/>
    <id>https://ryanchou612.github.io/posts/106f7f46.html</id>
    <published>2023-06-22T04:39:32.000Z</published>
    <updated>2023-07-15T05:02:26.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么使用Docker"><a href="#为什么使用Docker" class="headerlink" title="为什么使用Docker"></a>为什么使用Docker</h1><h2 id="企业环境中存在的某个痛点"><a href="#企业环境中存在的某个痛点" class="headerlink" title="企业环境中存在的某个痛点"></a>企业环境中存在的某个痛点</h2><p>企业使用一项技术是为了解决当前企业环境中存在的某个痛点。目前整个软件行业存在着以下几个痛点。</p><ol><li>软件更新发布及部署低效，过程烦琐且需要人工介入。</li><li>环境一致性难以保证。</li><li>不同环境之间迁移成本太高。</li></ol><h2 id="Docker能解决的问题"><a href="#Docker能解决的问题" class="headerlink" title="Docker能解决的问题"></a>Docker能解决的问题</h2><p>首先，Docker<br>的使用十分简单，从开发的角度来看就是”三步走”：构建、运输、运行。其中，关键步骤是构建环节，即打包镜像文件。但是从测试和运维的角度来看，那就只有两步：复制、运行。有了这个镜像文件，想复制到哪里运行都可以，完全和平台无关。</p><p>Docker<br>这种容器技术隔离出了独立的运行空间，不会和其他应用争用系统资源，不需要考虑应用之间的相互影响。</p><p>其次，因为在构建镜像时就处理完了服务程序对于系统的所有依赖，所以在使用时，可以忽略原本程序的依赖以及开发语言。对测试和运维人员而言，可以更专注于自己的业务内容。</p><p>最后，Docker<br>为开发者提供了一种开发环境的管理办法，帮助测试人员保证环境的同步，为运维人员提供了可移植的标准化部署流程。</p><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><p>Docker 是一种运行于 Linux 和 Windows上的软件，用于创建、管理和编排<strong>容器</strong>。</p><h2 id="Docker公司"><a href="#Docker公司" class="headerlink" title="Docker公司"></a>Docker公司</h2><p>Docker 公司位于旧金山，由法裔美籍开发者和企业家 Solumon Hykes创立</p><p>有意思的是，Docker 公司起初是一家名为 dotCloud 的平台即服务（Platform-as-a-Service, PaaS）提供商。</p><p>底层技术上，dotCloud 平台利用了 <strong>Linux 容器技术</strong>。为了方便创建和管理这些容器，dotCloud 开发了一套内部工具，之后被命名为“Docker”。Docker就是这样诞生的！</p><p>2013年，dotCloud 的 PaaS 业务并不景气，公司需要寻求新的突破。于是他们聘请了 Ben Golub 作为新的 CEO，将公司重命名为“Docker”，放弃dotCloud PaaS 平台，怀揣着将 Docker 和容器技术推向全世界”的使命，开启了一段新的征程。</p><p>如今 Docker 公司被普遍认为是一家创新型科技公司，据说其市场价值约为 10 亿美元。Docker 公司已经通过多轮融资，吸纳了来自硅谷的几家风投公司的累计超过 2.4 亿美元的投资。</p><p>几乎所有的融资都发生在公司更名为“Docker”之后。</p><blockquote><p>提示：”Docker”一词来自英国口语，意为码头工人（Dock<br>Worker），即从船上装卸货物的人。</p></blockquote><h2 id="Docker引擎"><a href="#Docker引擎" class="headerlink" title="Docker引擎"></a>Docker引擎</h2><p>Docker 引擎可以从 Docker 网站下载，也可以基于 GitHub 上的源码进行构建。无论是开源版本还是商业版本，都有 Linux 和 Windows 版本。</p><p>Docker 引擎主要有两个版本：企业版（EE）和社区版（CE）。</p><p>每个季度，企业版和社区版都会发布一个稳定版本。社区版本会提供 4 个月的支持，而企业版本会提供 12 个月的支持。</p><h2 id="Docker官网"><a href="#Docker官网" class="headerlink" title="Docker官网"></a>Docker官网</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.docker.com/</span></span><br></pre></td></tr></table></figure><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><p>1.查看内核版本</p><p>linux操作系统Centos7，linux 3.10内核，docker官方说至少3.8以上（ubuntu下要linux内核3.8以上）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@msr-server ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux msr-server 3.10.0-514.26.2.el7.x86_64 <span class="comment">#1 SMP Tue Jul 4 15:04:05 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>2.更新yum包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@msr-server ~]<span class="comment"># yum update</span></span><br></pre></td></tr></table></figure><p>3.安装需要的软件包， yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖的（一般更新完都有了）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@msr-server ~]<span class="comment"># yum -y install gcc</span></span><br><span class="line">[root@msr-server ~]<span class="comment"># yum -y install gcc-c++</span></span><br><span class="line">[root@msr-server ~]<span class="comment"># yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure><p>4.设置docker yum源（可选）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@msr-server ~]<span class="comment"># sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><p>5.查看仓库中docker版本，可以指定安装，不指定安装最新版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@msr-server ~]<span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Installed Packages</span><br><span class="line">docker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.5-3.el7                    @docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.4-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.3-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.2-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.1-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.0-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.9-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.8-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.7-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.6-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.5-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.4-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.3-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">Determining fastest mirrors</span><br><span class="line">Available Packages</span><br></pre></td></tr></table></figure><p>6.安装docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@msr-server ~]<span class="comment"># yum makecache fast</span></span><br><span class="line">[root@msr-server ~]<span class="comment"># yum install docker-ce # 安装最新版</span></span><br></pre></td></tr></table></figure><p>7.启动Docker，加入开机启动，验证安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@msr-server ~]<span class="comment"># systemctl start docker</span></span><br><span class="line">[root@msr-server ~]<span class="comment"># systemctl enable  docker</span></span><br><span class="line">[root@msr-server ~]<span class="comment"># docker version</span></span><br></pre></td></tr></table></figure><p>8.测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world</span><br><span class="line">docker images</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>9.卸载docker</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep docker</span><br><span class="line">yum -y remove docker-ce.x86_64</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="Docker的中央仓库"><a href="#Docker的中央仓库" class="headerlink" title="Docker的中央仓库"></a>Docker的中央仓库</h1><p>Docker的中央仓库，就是存放镜像的网站。</p><h2 id="1-官网"><a href="#1-官网" class="headerlink" title="1.官网"></a>1.官网</h2><p>镜像最全，但国内的下载速度慢</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//hub.docker.com/</span></span><br></pre></td></tr></table></figure><h2 id="2-国内镜像"><a href="#2-国内镜像" class="headerlink" title="2.国内镜像"></a>2.国内镜像</h2><h4 id="1-网易蜂巢"><a href="#1-网易蜂巢" class="headerlink" title="1. 网易蜂巢"></a>1. 网易蜂巢</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//c.163.com/hub</span></span><br></pre></td></tr></table></figure><h4 id="2-daoCloud-推荐"><a href="#2-daoCloud-推荐" class="headerlink" title="2. daoCloud(推荐)"></a>2. daoCloud(推荐)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hub.daocloud.io/</span></span><br></pre></td></tr></table></figure><h2 id="3-搭建私服"><a href="#3-搭建私服" class="headerlink" title="3.搭建私服"></a>3.搭建私服</h2><h4 id="1-修改注册文件"><a href="#1-修改注册文件" class="headerlink" title="1.修改注册文件"></a>1.修改注册文件</h4><p>修改&#x2F;etc&#x2F;docker&#x2F;daemon.josn文件，若文件不存在，则手动创建。</p><p>添加如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;https://docker-cn.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;ip:port&quot;</span><span class="punctuation">]</span> <span class="comment">//替换相应的IP和端口即可</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-重启服务"><a href="#2-重启服务" class="headerlink" title="2.重启服务"></a>2.重启服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="Docker镜像操作"><a href="#Docker镜像操作" class="headerlink" title="Docker镜像操作"></a>Docker镜像操作</h1><h2 id="1-拉取镜像到本地"><a href="#1-拉取镜像到本地" class="headerlink" title="1. 拉取镜像到本地"></a>1. 拉取镜像到本地</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称[:tag]</span><br><span class="line">docker pull daocloud.io/library/tomcat:8.5.15-jre8</span><br></pre></td></tr></table></figure><h2 id="2-查看全部本地的镜像"><a href="#2-查看全部本地的镜像" class="headerlink" title="2. 查看全部本地的镜像"></a>2. 查看全部本地的镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="3-删除本地镜像"><a href="#3-删除本地镜像" class="headerlink" title="3. 删除本地镜像"></a>3. 删除本地镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像的标识</span><br></pre></td></tr></table></figure><h2 id="4-镜像的导入导出（不规范）"><a href="#4-镜像的导入导出（不规范）" class="headerlink" title="4. 镜像的导入导出（不规范）"></a>4. 镜像的导入导出（不规范）</h2><p><strong>将本地的镜像导出</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o导出的路径 镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p><strong>加载本地的镜像文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i 镜像文件</span><br></pre></td></tr></table></figure><h2 id="5-修改镜像名称"><a href="#5-修改镜像名称" class="headerlink" title="5. 修改镜像名称"></a>5. 修改镜像名称</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 镜像<span class="built_in">id</span> 新镜像名称∶版本</span><br></pre></td></tr></table></figure><h1 id="Docker容器操作"><a href="#Docker容器操作" class="headerlink" title="Docker容器操作"></a>Docker容器操作</h1><h2 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1.运行容器"></a>1.运行容器</h2><p><strong>简单操作</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像的标识镜像名称[:tag]</span><br></pre></td></tr></table></figure><p><strong>常用的参数</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p宿主机端口∶容器端口 --name 容器名称 镜像的标识镜像名称[:tag]</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>∶ 代表后台运行容器</li><li><code>-p</code> 宿主机端口∶容器端口∶ 为了映射当前Linux的端口和容器的端口</li><li><code>--name</code> 容器名称∶指定容器的名称</li></ul><h2 id="2-查看正在运行的容器"><a href="#2-查看正在运行的容器" class="headerlink" title="2.查看正在运行的容器"></a>2.查看正在运行的容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [-qa]</span><br></pre></td></tr></table></figure><ul><li><code>-a</code>∶ 查看全部的容器，包括没有运行</li><li><code>-q</code>∶ 只查看容器得到标识</li></ul><h2 id="3-查看容器的日志"><a href="#3-查看容器的日志" class="headerlink" title="3. 查看容器的日志"></a>3. 查看容器的日志</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><ul><li>-f∶可以滚动查看日志的最后几行</li></ul><h2 id="4-进入到容器内部"><a href="#4-进入到容器内部" class="headerlink" title="4. 进入到容器内部"></a>4. 进入到容器内部</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bash</span><br></pre></td></tr></table></figure><h2 id="5-删除容器（删除容器前，需要先停止容器）"><a href="#5-删除容器（删除容器前，需要先停止容器）" class="headerlink" title="5. 删除容器（删除容器前，需要先停止容器）"></a>5. 删除容器（删除容器前，需要先停止容器）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止指定的容器</span></span><br><span class="line">docker stop 容器ID</span><br><span class="line"><span class="comment">#停止全部容器</span></span><br><span class="line">docker stop $(docker ps -qa)</span><br><span class="line"><span class="comment">#删除指定容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器<span class="built_in">id</span></span><br><span class="line"><span class="comment">#删除全部容器</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -qa)</span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker start 容器ID</span><br></pre></td></tr></table></figure><h1 id="准备一个web项目"><a href="#准备一个web项目" class="headerlink" title="准备一个web项目"></a>准备一个web项目</h1><p>1.创建一个文件夹，例如：demo</p><p>2.创建一个文件夹WEB-INF</p><p>3.在WEB-INF中创建一个文件web.xml</p><p>4.在web.xml中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.创建一个index.html页面，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello docker!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建MySQL容器"><a href="#创建MySQL容器" class="headerlink" title="创建MySQL容器"></a>创建MySQL容器</h1><h2 id="创建MySQL镜像"><a href="#创建MySQL镜像" class="headerlink" title="创建MySQL镜像"></a>创建MySQL镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull daocloud.io/library/mysql:5.7.5-m15</span><br></pre></td></tr></table></figure><h2 id="查看MySQL镜像"><a href="#查看MySQL镜像" class="headerlink" title="查看MySQL镜像"></a>查看MySQL镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="创建MySQL容器-1"><a href="#创建MySQL容器-1" class="headerlink" title="创建MySQL容器"></a>创建MySQL容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root --name msyql 镜像tag</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试</p><h1 id="创建Tomcat容器"><a href="#创建Tomcat容器" class="headerlink" title="创建Tomcat容器"></a>创建Tomcat容器</h1><h2 id="创建Tomcat镜像"><a href="#创建Tomcat镜像" class="headerlink" title="创建Tomcat镜像"></a>创建Tomcat镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull daocloud.io/library/tomcat:8.0.45</span><br></pre></td></tr></table></figure><h2 id="查看Tomcat镜像"><a href="#查看Tomcat镜像" class="headerlink" title="查看Tomcat镜像"></a>查看Tomcat镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="创建Tomcat容器-1"><a href="#创建Tomcat容器-1" class="headerlink" title="创建Tomcat容器"></a>创建Tomcat容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name tomcat 镜像tag</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8080</span><br></pre></td></tr></table></figure><h1 id="将项目部署到Tomcat"><a href="#将项目部署到Tomcat" class="headerlink" title="将项目部署到Tomcat"></a>将项目部署到Tomcat</h1><h2 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h2><p>上传项目</p><h2 id="进入容器目录"><a href="#进入容器目录" class="headerlink" title="进入容器目录"></a>进入容器目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器tag bash</span><br></pre></td></tr></table></figure><h2 id="将项目拷贝到tomcat容器的webapps目录下面"><a href="#将项目拷贝到tomcat容器的webapps目录下面" class="headerlink" title="将项目拷贝到tomcat容器的webapps目录下面"></a>将项目拷贝到tomcat容器的webapps目录下面</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> demo a17:/usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure><h2 id="查看tomcat运行日志"><a href="#查看tomcat运行日志" class="headerlink" title="查看tomcat运行日志"></a>查看tomcat运行日志</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f 容器tag</span><br></pre></td></tr></table></figure><h1 id="Docker数据卷"><a href="#Docker数据卷" class="headerlink" title="Docker数据卷"></a>Docker数据卷</h1><p>为了部署我们的demo工程，需要使用到cp的命令将宿主机内的demo文件复制到容器内部</p><p>数据卷：将宿主机的一个目录，映射到容器的一个目录中，可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p><h2 id="1-创建数据卷"><a href="#1-创建数据卷" class="headerlink" title="1.创建数据卷"></a>1.创建数据卷</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume create 数据卷名称</span><br><span class="line"><span class="comment">#创建数据卷之后，默认会存放在一个目录下 /var/lib/docker/volumes/数据卷名称/_data</span></span><br></pre></td></tr></table></figure><h2 id="2-查看数据卷的详细信息"><a href="#2-查看数据卷的详细信息" class="headerlink" title="2.查看数据卷的详细信息"></a>2.查看数据卷的详细信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure><h2 id="3-查看全部数据卷"><a href="#3-查看全部数据卷" class="headerlink" title="3.查看全部数据卷"></a>3.查看全部数据卷</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="4-删除数据卷"><a href="#4-删除数据卷" class="headerlink" title="4.删除数据卷"></a>4.删除数据卷</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">rm</span> 数据卷名称</span><br></pre></td></tr></table></figure><h2 id="5-应用数据卷"><a href="#5-应用数据卷" class="headerlink" title="5.应用数据卷"></a>5.应用数据卷</h2><p>当你映射数据卷时，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -v 数据卷名称∶容器内部的路径 镜像<span class="built_in">id</span></span><br><span class="line"><span class="comment">#直接指定一个路径作为数据卷的存放位置。这个路径下是空的。 </span></span><br><span class="line">docker run -v 路径∶容器内部的路径 镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile?"></a>什么是Dockerfile?</h2><p>Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用的任何命令。<br>Docker通过读取<code>Dockerfile</code>中的指令自动生成映像。</p><p><code>docker build</code>命令用于从Dockerfile构建映像。可以在<code>docker build</code>命令中使用<code>-f</code>标志指向文件系统中任何位置的Dockerfile。</p><p>例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile</span><br></pre></td></tr></table></figure><h2 id="Dockerfile的基本结构"><a href="#Dockerfile的基本结构" class="headerlink" title="Dockerfile的基本结构"></a>Dockerfile的基本结构</h2><p>Dockerfile 一般分为四部分：</p><ol><li>基础镜像信息</li><li>维护者信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ol><h2 id="Dockerfile文件说明"><a href="#Dockerfile文件说明" class="headerlink" title="Dockerfile文件说明"></a>Dockerfile文件说明</h2><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是<code>FROM</code>。一个声明以<code>＃</code>字符开头则被视为注释。可以在Docker文件中使用<code>RUN</code>，<code>CMD</code>，<code>FROM</code>，<code>EXPOSE</code>，<code>ENV</code>等指令。</p><p><strong>在这里列出了一些常用的指令。</strong></p><p><strong>FROM：指定基础镜像，必须为第一个命令</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">　　FROM &lt;image&gt;</span><br><span class="line">　　FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">　　FROM &lt;image&gt;@&lt;digest&gt;</span><br><span class="line">示例：　　FROM mysql:5.6</span><br></pre></td></tr></table></figure><blockquote><p>注：tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</p></blockquote><p><strong>MAINTAINER: 维护者信息</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    MAINTAINER &lt;name&gt;</span><br><span class="line">示例：</span><br><span class="line">    MAINTAINER Jasper Xu</span><br><span class="line">    MAINTAINER sorex@163.com</span><br><span class="line">    MAINTAINER Jasper Xu &lt;sorex@163.com&gt;</span><br></pre></td></tr></table></figure><p><strong>RUN：构建镜像时执行的命令</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RUN 用于在镜像容器中执行命令，其有以下两种命令执行方式：</span><br><span class="line">shell执行</span><br><span class="line">格式：</span><br><span class="line">    RUN &lt;command&gt;</span><br><span class="line">exec执行</span><br><span class="line">格式：</span><br><span class="line">    RUN <span class="section">[&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span></span><br><span class="line">示例：</span><br><span class="line">    RUN <span class="section">[&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span></span><br><span class="line">    RUN apk update</span><br><span class="line">    RUN <span class="section">[&quot;/etc/execfile&quot;, &quot;arg1&quot;, &quot;arg1&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>注：RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定–no-cache参数，如：docker<br>build –no-cache</p></blockquote><p><strong>ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ADD &lt;src&gt;... &lt;dest&gt;</span><br><span class="line">    ADD <span class="section">[&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</span> 用于支持包含空格的路径</span><br><span class="line">示例：</span><br><span class="line">    ADD hom* /mydir/          <span class="comment"># 添加所有以&quot;hom&quot;开头的文件</span></span><br><span class="line">    ADD hom?.txt /mydir/      <span class="comment"># ? 替代一个单字符,例如：&quot;home.txt&quot;</span></span><br><span class="line">    ADD test relativeDir/     <span class="comment"># 添加 &quot;test&quot; 到 `WORKDIR`/relativeDir/</span></span><br><span class="line">    ADD test /absoluteDir/    <span class="comment"># 添加 &quot;test&quot; 到 /absoluteDir/</span></span><br></pre></td></tr></table></figure><p><strong>COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</strong></p><p><strong>CMD：构建容器后调用，也就是在容器启动时才进行调用。</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    CMD <span class="section">[&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span> (执行可执行文件，优先)</span><br><span class="line">    CMD <span class="section">[&quot;param1&quot;,&quot;param2&quot;]</span> (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span><br><span class="line">    CMD command param1 param2 (执行shell内部命令)</span><br><span class="line">示例：</span><br><span class="line">    CMD echo &quot;This is a test.&quot; | wc -</span><br><span class="line">    CMD <span class="section">[&quot;/usr/bin/wc&quot;,&quot;--help&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>注：<br>CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</p></blockquote><p><strong>ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ENTRYPOINT <span class="section">[&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span> (可执行文件, 优先)</span><br><span class="line">    ENTRYPOINT command param1 param2 (shell内部命令)</span><br><span class="line">示例：</span><br><span class="line">    FROM ubuntu</span><br><span class="line">    ENTRYPOINT <span class="section">[&quot;top&quot;, &quot;-b&quot;]</span></span><br><span class="line">    CMD <span class="section">[&quot;-c&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>注：ENTRYPOINT与CMD非常类似，不同的是通过docker<br>run执行的命令不会覆盖ENTRYPOINT，而docker<br>run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</p></blockquote><p><strong>LABEL：用于为镜像添加元数据</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br><span class="line">示例：</span><br><span class="line">　　LABEL <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> description=<span class="string">&quot;这是一个Web服务器&quot;</span> by=<span class="string">&quot;ghz&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</p></blockquote><p><strong>ENV：设置环境变量</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ENV &lt;key&gt; &lt;value&gt;  <span class="comment">#&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置一个变量</span></span><br><span class="line">    ENV &lt;key&gt;=&lt;value&gt; ...  <span class="comment">#可以设置多个变量，每个变量为一个&quot;&lt;key&gt;=&lt;value&gt;&quot;的键值对，如果&lt;key&gt;中包含空格，可以使用\来进行转义，也可以通过&quot;&quot;来进行标示；另外，反斜线也可以用于续行</span></span><br><span class="line">示例：</span><br><span class="line">    ENV myName John Doe</span><br><span class="line">    ENV myDog Rex The Dog</span><br><span class="line">    ENV <span class="attr">myCat</span>=fluffy</span><br></pre></td></tr></table></figure><p><strong>EXPOSE：指定于外界交互的端口</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    EXPOSE &lt;port&gt; <span class="section">[&lt;port&gt;...]</span></span><br><span class="line">示例：</span><br><span class="line">    EXPOSE 80 443</span><br><span class="line">    EXPOSE 8080    EXPOSE 11211/tcp 11211/udp</span><br></pre></td></tr></table></figure><blockquote><p>注：EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker<br>run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</p></blockquote><p><strong>VOLUME：用于指定持久化目录</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    VOLUME <span class="section">[&quot;/path/to/dir&quot;]</span></span><br><span class="line">示例：</span><br><span class="line">    VOLUME <span class="section">[&quot;/data&quot;]</span></span><br><span class="line">    VOLUME <span class="section">[&quot;/var/www&quot;, &quot;/var/log/apache2&quot;, &quot;/etc/apache2&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：<br>1 卷可以容器间共享和重用 2 容器并不一定要和其它容器共享卷 3<br>修改卷后会立即生效 4 对卷的修改不会对镜像产生影响 5<br>卷会一直存在，直到没有任何容器在使用它</p></blockquote><p><strong>WORKDIR：工作目录，类似于cd命令</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    WORKDIR /path/to/workdir</span><br><span class="line">示例：</span><br><span class="line">    WORKDIR /a  (这时工作目录为/a)</span><br><span class="line">    WORKDIR b  (这时工作目录为/a/b)</span><br><span class="line">    WORKDIR c  (这时工作目录为/a/b/c)</span><br></pre></td></tr></table></figure><blockquote><p>注：通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker<br>run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</p></blockquote><p>**USER: **指定运行容器时的用户名或 UID，后续的 RUN<br>也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line">    USER user</span><br><span class="line">    USER user:group</span><br><span class="line">    USER uid</span><br><span class="line">    USER uid:gid</span><br><span class="line">    USER user:gid</span><br><span class="line">    USER uid:group</span><br><span class="line">示例：</span><br><span class="line">USER www</span><br></pre></td></tr></table></figure><blockquote><p>注：使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过<code>docker run</code>运行容器时，可以通过-u参数来覆盖所指定的用户。</p></blockquote><p><strong>ARG：用于指定传递给构建运行时的变量</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ARG &lt;name&gt;<span class="section">[=&lt;default value&gt;]</span></span><br><span class="line">示例：</span><br><span class="line">    ARG site</span><br><span class="line">    ARG <span class="attr">build_user</span>=www</span><br></pre></td></tr></table></figure><p><strong>ONBUILD：用于设置镜像触发器</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：　　ONBUILD <span class="section">[INSTRUCTION]</span></span><br><span class="line">示例：</span><br><span class="line">　　ONBUILD ADD . /app/src</span><br><span class="line">　　ONBUILD RUN /usr/local/bin/python-build --dir /app/src</span><br></pre></td></tr></table></figure><blockquote><p>注：当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</p></blockquote><h1 id="Docker自定义镜像"><a href="#Docker自定义镜像" class="headerlink" title="Docker自定义镜像"></a>Docker自定义镜像</h1><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This my first nginx Dockerfile</span></span><br><span class="line"><span class="comment"># Version 1.0</span></span><br><span class="line">Base images 基础镜像</span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment">#MAINTAINER 维护者信息</span></span><br><span class="line">MAINTAINER ghz</span><br><span class="line"><span class="comment">#ENV 设置环境变量</span></span><br><span class="line">ENV PATH /usr/local/nginx/sbin:$PATH</span><br><span class="line"><span class="comment">#ADD  文件放在当前目录下，拷过去会自动解压</span></span><br><span class="line">ADD nginx-1.8.0.tar.gz /usr/local/  <span class="comment"># ngix</span></span><br><span class="line">ADD epel-release-latest-7.noarch.rpm /usr/local/  <span class="comment"># 企业linux扩展包</span></span><br><span class="line"><span class="comment">#RUN 执行以下命令</span></span><br><span class="line">RUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpm</span><br><span class="line">RUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre &amp;&amp; yum clean all</span><br><span class="line">RUN useradd -s /sbin/nologin -M www</span><br><span class="line"><span class="comment">#WORKDIR 相当于cd</span></span><br><span class="line">WORKDIR /usr/local/nginx-1.8.0</span><br><span class="line">RUN ./configure <span class="attr">--prefix</span>=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class="line">RUN echo &quot;daemon off<span class="comment">;&quot; &gt;&gt; /etc/nginx.conf</span></span><br><span class="line"><span class="comment">#EXPOSE 映射端口</span></span><br><span class="line">EXPOSE 80</span><br><span class="line"><span class="comment">#CMD 运行以下命令</span></span><br><span class="line">CMD <span class="section">[&quot;nginx&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="实例2-tomcat镜像"><a href="#实例2-tomcat镜像" class="headerlink" title="实例2 tomcat镜像"></a>实例2 tomcat镜像</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jar -cvfM0 demo.war demo/*</span><br><span class="line">FROM daocloud.io/library/tomcat:8.5.15-jre8 </span><br><span class="line">ADD demo.war /usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><pre><code>docker build -t 镜像名称[:tag]</code></pre><h1 id="下载安装Docker-Compose"><a href="#下载安装Docker-Compose" class="headerlink" title="下载安装Docker-Compose"></a>下载安装Docker-Compose</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>之前运行一个镜像，需要添加大量的参数。</li><li>可以通过Docker-Compose编写这些参数。</li><li>Docker-Compose可以帮助我们批量的管理容器。</li><li>只需要通过一个docker-compose.yml文件去维护即可。</li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol><li><p>去github官网搜索docker compose，下载1.24.1版本的Docker-Compose</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/docker/compose/releases/tag/v2.19.1</span><br></pre></td></tr></table></figure></li><li><p>将下载好的文件，拖拽到Linux操作系统中</p></li><li><p>需要将DockerCompose文件的名称修改一下，基于DockerCompose文件一个可执行的权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> docker-compose-Linux-x86_64 docker-compose </span><br><span class="line"><span class="built_in">chmod</span> 777 docker-compose</span><br></pre></td></tr></table></figure></li><li><p>方便后期操作，配置一个环境变量</p></li><li><p>将docker-compose文件移动到了&#x2F;usr&#x2F;local&#x2F;bin，修改了&#x2F;etc&#x2F;profile文件，给&#x2F;usr&#x2F;local&#x2F;bin配置到了PATH中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> docker-compose /usr/local/bin </span><br><span class="line">vi /etc/profile</span><br><span class="line">    <span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>:/usr/local/bin:<span class="variable">$PATH</span> </span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>测试一下</p><p>在任意目录下输入<code>docker-compose</code></p></li></ol><h1 id="Docker-Compose管理MySQL和Tomcat容器"><a href="#Docker-Compose管理MySQL和Tomcat容器" class="headerlink" title="Docker-Compose管理MySQL和Tomcat容器"></a>Docker-Compose管理MySQL和Tomcat容器</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span> </span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">mysql:</span>                     <span class="comment"># 服务的名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>          <span class="comment"># 代表只要Docker启动，那么这个容器就跟着一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/mysql:5.7.5-m15</span>      <span class="comment"># 指定镜像路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span>    <span class="comment"># 指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span>        <span class="comment"># 指定端口号的映射</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">mima1234</span>         <span class="comment"># 指定MySQL的ROOT用户登录密码</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>                 <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker_mysql/:/var/lib/mysql</span>        <span class="comment"># 映射数据卷</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>          <span class="comment"># 代表只要Docker启动，那么这个容器就跟着一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/tomcat:8.5.15-jre8</span>     <span class="comment"># 指定镜像路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat</span>    <span class="comment"># 指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span>       </span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>                 </span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker_tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span>       </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker_tomcat/tomcat_logs:/usr/local/tomcat/logs</span> </span><br></pre></td></tr></table></figure><h1 id="使用docker-compose命令管理容器"><a href="#使用docker-compose命令管理容器" class="headerlink" title="使用docker-compose命令管理容器"></a>使用docker-compose命令管理容器</h1><p>1.基于docker-compose.yml启动管理的容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>2.关闭并删除容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p>3.开启关闭重启已经存在的由docker-compose维护的容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose start|stop|restart</span><br></pre></td></tr></table></figure><p>4.查看由docker-compose管理的容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><p>5.查看日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><h1 id="docker-compose结合Dockerfile使用"><a href="#docker-compose结合Dockerfile使用" class="headerlink" title="docker-compose结合Dockerfile使用"></a>docker-compose结合Dockerfile使用</h1><blockquote><p>使用docker-compose.yml文件，以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yml文件</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web-demo:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">build:</span>                           <span class="comment"># 构建自定义镜像</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">../</span>                   <span class="comment"># 指定Dockerfile文件所在路径</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span>         <span class="comment"># 指定Dockerfile文件名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">demo:1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">demo</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="number">8081</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><p>Dockerfile文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">from</span> <span class="string">daocloud.io/library/tomcat:8.5.15-jre8</span></span><br><span class="line"><span class="string">copy</span> <span class="string">demo.war</span> <span class="string">/usr/local/tomcat/webapps</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么使用Docker&quot;&gt;&lt;a href=&quot;#为什么使用Docker&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Docker&quot;&gt;&lt;/a&gt;为什么使用Docker&lt;/h1&gt;&lt;h2 id=&quot;企业环境中存在的某个痛点&quot;&gt;&lt;a href=&quot;#企业环境中</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://ryanchou612.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记｜Gin框架</title>
    <link href="https://ryanchou612.github.io/posts/b7d9b0d0.html"/>
    <id>https://ryanchou612.github.io/posts/b7d9b0d0.html</id>
    <published>2023-06-17T14:41:48.000Z</published>
    <updated>2023-07-15T05:02:26.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h1><h2 id="HTTP协议简介-1"><a href="#HTTP协议简介-1" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h2><p>超文本传输协议（英文：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。</p><p>HTTP的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（CERN）所发起。HTTP的标准制定由万维网协会（World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering Task Force，IETF）进行协调，最终发布了一系列的RFC，其中最著名的是1999年6月公布的 RFC 2616，定义了HTTP协议中现今广泛使用的一个版本——HTTP 1.1。</p><p>2014年12月，互联网工程任务组（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组将HTTP&#x2F;2标准提议递交至IESG进行讨论，于2015年2月17日被批准。 HTTP&#x2F;2标准于2015年5月以RFC 7540正式发表，取代HTTP 1.1成为HTTP的实现标准。</p><h2 id="HTTP协议概述"><a href="#HTTP协议概述" class="headerlink" title="HTTP协议概述"></a>HTTP协议概述</h2><p>HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道（tunnel）。</p><p>尽管TCP&#x2F;IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP&#x2F;IP协议族使用TCP作为其传输层。</p><p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP&#x2F;1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p><h2 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h2><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求&#x2F;响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p><p>以下是 HTTP 请求&#x2F;响应的步骤：</p><ol><li>客户端连接到Web服务器 一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<code>http://www.baidu.com</code>。</li><li>发送HTTP请求 通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</li><li>服务器接受请求并返回HTTP响应 Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</li><li>释放连接TCP连接 若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</li><li>客户端浏览器解析HTML内容 客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</li></ol><p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p><ol><li>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</li><li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</li><li>浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</li><li>服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</li><li>释放 TCP连接;</li><li>浏览器将该 html 文本并显示内容;</li></ol><p> 　</p><p>![image-20230715114035252](&#x2F;Users&#x2F;pacozhou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230715114035252.png)</p><p><strong>基于 请求-响应 的模式</strong></p><p>HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并 返回。换句话说,肯定是先从客户端开始建立通信的,服务器端在没有 接收到请求之前不会发送响应</p><p>![image-20230715114046593](&#x2F;Users&#x2F;pacozhou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230715114046593.png)</p><p><strong>无状态保存</strong></p><p>HTTP是一种不保存状态,即无状态(stateless)协议。HTTP协议 自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个 级别,协议对于发送过的请求或响应都不做持久化处理。</p><p>![image-20230715114056555](&#x2F;Users&#x2F;pacozhou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230715114056555.png)</p><p>使用HTTP协议,每当有新的请求发送时,就会有对应的新响应产 生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务,确保协议的可伸缩性,而特意把HTTP协议设计成 如此简单的。可是,随着Web的不断发展,因无状态而导致业务处理变得棘手 的情况增多了。比如,用户登录到一家购物网站,即使他跳转到该站的 其他页面后,也需要能继续保持登录状态。针对这个实例,网站为了能 够掌握是谁送出的请求,需要保存用户的状态。HTTP&#x2F;1.1虽然是无状态协议,但为了实现期望的保持状态功能, 于是引入了Cookie技术。有了Cookie再用HTTP协议通信,就可以管 理状态了。有关Cookie的详细内容稍后讲解。</p><p><strong>无连接</strong></p><p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间，并且可以提高并发性能，不能和每个用户建立长久的连接，请求一次相应一次，服务端和客户端就中断了。但是无连接有两种方式，早期的http协议是一个请求一个响应之后，直接就断开了，但是现在的http协议1.1版本不是直接就断开了，而是等几秒钟，这几秒钟是等什么呢，等着用户有后续的操作，如果用户在这几秒钟之内有新的请求，那么还是通过之前的连接通道来收发消息，如果过了这几秒钟用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数，因为建立连接也是耗时的，默认的好像是3秒中现在，但是这个时间是可以通过咱们后端的代码来调整的，自己网站根据自己网站用户的行为来分析统计出一个最优的等待时间。</p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>HTTP&#x2F;1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。</p><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>向指定资源位置上传其最新内容。</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>请求服务器删除Request-URI所标识的资源。</p><h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><p>回显服务器收到的请求，主要用于测试或诊断。</p><h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><p>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</p><h3 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h3><p>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。</p><p><strong>注意事项：</strong></p><ol><li>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。</li><li>HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如PATCH（由 RFC 5789 指定的方法）用于将局部修改应用到资源<em>。</em></li></ol><h4 id="请求方式-get与post请求"><a href="#请求方式-get与post请求" class="headerlink" title="请求方式: get与post请求"></a>请求方式: get与post请求</h4><ul><li>GET提交的数据会放在URL之后，也就是请求行里面，以?分割URL和传输数据，参数之间以&amp;相连，如EditBook?name&#x3D;test1&amp;id&#x3D;123456.（请求头里面那个content-type做的这种参数形式，后面讲） POST方法是把提交的数据放在HTTP包的请求体中.</li><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</li><li>GET与POST请求在服务端获取请求数据方式不同，就是我们自己在服务端取请求数据的时候的方式不同了，这句废话昂。</li></ul><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。</p><p>状态代码的第一个数字代表当前响应的类型：</p><ul><li>1xx消息——请求已被服务器接收，继续处理</li><li>2xx成功——请求已成功被服务器接收、理解、并接受</li><li>3xx重定向——需要后续操作才能完成这一请求</li><li>4xx请求错误——请求含有词法错误或者无法被执行</li><li>5xx服务器错误——服务器在处理某个正确请求时发生错误</li></ul><p>虽然 RFC 2616 中已经推荐了描述状态的短语，例如”200 OK”，”404 Not Found”，但是WEB开发者仍然能够自行决定采用何种短语，用以显示本地化的状态描述或者自定义信息。</p><p>![image-20230715114109190](&#x2F;Users&#x2F;pacozhou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230715114109190.png)</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>超文本传输协议（HTTP）的统一资源定位符将从因特网获取信息的五个基本元素包括在一个简单的地址中：</p><ul><li>传送协议。</li><li>层级URL标记符号(为[&#x2F;&#x2F;],固定不变)</li><li>访问资源需要的凭证信息（可省略）</li><li>服务器。（通常为域名，有时为IP地址）</li><li>端口号。（以数字方式表示，若为HTTP的默认值“:80”可省略）</li><li>路径。（以“&#x2F;”字符区别路径中的每一个目录名称）</li><li>查询。（GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“&#x3D;”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题）</li><li>片段。以“#”字符为起点</li></ul><p>以<code>http://www.ryan.com:80/news/index.html?id=250&amp;page=1</code> 为例, 其中：</p><ol><li><code>http</code>，是协议；</li><li><code>www.ryan.com</code>，是服务器；</li><li><code>80</code>，是服务器上的默认网络端口号，默认不显示；</li><li><code>/news/index.html</code>，是路径（URI：直接定位到对应的资源）；</li><li><code>?id=250&amp;page=1</code>，是查询。</li></ol><blockquote><p>大多数网页浏览器不要求用户输入网页中“http:&#x2F;&#x2F;”的部分，因为绝大多数网页内容是超文本传输协议文件。同样，“80”是超文本传输协议文件的常用端口号，因此一般也不必写明。一般来说用户只要键入统一资源定位符的一部分（<code>www.ryan.com/news/index.html?id=250&amp;page=1</code>）就可以了。</p></blockquote><p>由于超文本传输协议允许服务器将浏览器重定向到另一个网页地址，因此许多服务器允许用户省略网页地址中的部分，比如 www。从技术上来说这样省略后的网页地址实际上是一个不同的网页地址，浏览器本身无法决定这个新地址是否通，服务器必须完成重定向的任务。</p><h2 id="HTTP请求格式-请求协议"><a href="#HTTP请求格式-请求协议" class="headerlink" title="HTTP请求格式(请求协议)"></a>HTTP请求格式(请求协议)</h2><p>![image-20230715114130855](&#x2F;Users&#x2F;pacozhou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230715114130855.png)</p><p>URL包含：<code>/index/index2?a=1&amp;b=2</code>路径和参数都在这里。</p><p>![image-20230715114140548](&#x2F;Users&#x2F;pacozhou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230715114140548.png)</p><h1 id="Restful风格编程"><a href="#Restful风格编程" class="headerlink" title="Restful风格编程"></a>Restful风格编程</h1><p>REST（英文：<strong>Representational State Transfer</strong>，简称REST）描述了一个架构样式的网络系统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，Roy Fielding是 HTTP 规范的主要编写者之一。在目前主流的三种Web服务交互方案中，REST相比于SOAP（Simple Object Access protocol，简单对象访问协议）以及XML-RPC更加简单明了，无论是对URL的处理还是对Payload的编码，REST都倾向于用更加简单轻量的方法设计和实现。值得注意的是REST并没有一个明确的标准，而更像是一种设计的风格。</p><p>Restful就是一个资源定位、资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>资源：</strong> 互联网所有的事物都可以被抽象为资源</p><p><strong>资源操作：</strong> 分为<code>POST</code>、<code>DELETE</code>、<code>PUT</code>、<code>GET</code>四种方法，使用不同方法对资源进行操作（增、删、改、查）</p><h2 id="传统风格与RestFul风格对比"><a href="#传统风格与RestFul风格对比" class="headerlink" title="传统风格与RestFul风格对比"></a>传统风格与RestFul风格对比</h2><h3 id="传统方式操作资源"><a href="#传统方式操作资源" class="headerlink" title="传统方式操作资源"></a>传统方式操作资源</h3><p>通过不同的参数来实现不同的效果！方法单一！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/item/queryItem.action?id=1 （查询,GET）</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/item/saveItem.action （新增,POST）</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/item/updateItem.action （更新,POST）</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/item/deleteItem.action?id=1 （删除,GET或POST）</span></span><br></pre></td></tr></table></figure><h3 id="RestFul方式操作资源"><a href="#RestFul方式操作资源" class="headerlink" title="RestFul方式操作资源"></a>RestFul方式操作资源</h3><p>可以通过不同的请求方式来实现不同的效果！请求地址一样，但是功能可以不同！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/item/1 （查询,GET）</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/item （新增,POST）</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/item （更新,PUT）</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/item/1 （删除,DELETE）</span></span><br></pre></td></tr></table></figure><h1 id="golang-http标准库"><a href="#golang-http标准库" class="headerlink" title="golang http标准库"></a>golang http标准库</h1><p>http标准库了http客户端和服务器的实现，注意了，客户端实现可以发出http请求，并解析响应。服务器可以实现http server功能。市面上的所有golang web框架都是基于http标准库实现的。</p><h2 id="http标准库客户端功能"><a href="#http标准库客户端功能" class="headerlink" title="http标准库客户端功能"></a>http标准库客户端功能</h2><h3 id="发出GET请求"><a href="#发出GET请求" class="headerlink" title="发出GET请求"></a>发出GET请求</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;net/url&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testGet</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// https://www.juhe.cn/box/index/id/73</span></span><br><span class="line">    url := <span class="string">&quot;http://apis.juhe.cn/simpleWeather/query?key=087d7d10f700d20e27bb753cd806e40b&amp;city=北京&quot;</span></span><br><span class="line">    r, err := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">    b, _ := ioutil.ReadAll(r.Body)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span><span class="string">&quot;查询成功!&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;北京&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;realtime&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;humidity&quot;</span><span class="punctuation">:</span><span class="string">&quot;94&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;阴&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;wid&quot;</span><span class="punctuation">:</span><span class="string">&quot;02&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;direct&quot;</span><span class="punctuation">:</span><span class="string">&quot;东北风&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;power&quot;</span><span class="punctuation">:</span><span class="string">&quot;2级&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;aqi&quot;</span><span class="punctuation">:</span><span class="string">&quot;117&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;future&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-12-09&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span><span class="string">&quot;-1\/7℃&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span><span class="string">&quot;多云转晴&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;wid&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;day&quot;</span><span class="punctuation">:</span><span class="string">&quot;01&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;night&quot;</span><span class="punctuation">:</span><span class="string">&quot;00&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;direct&quot;</span><span class="punctuation">:</span><span class="string">&quot;北风&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-12-10&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span><span class="string">&quot;-1\/8℃&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span><span class="string">&quot;多云&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;wid&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;day&quot;</span><span class="punctuation">:</span><span class="string">&quot;01&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;night&quot;</span><span class="punctuation">:</span><span class="string">&quot;01&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;direct&quot;</span><span class="punctuation">:</span><span class="string">&quot;北风转西南风&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-12-11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span><span class="string">&quot;-2\/10℃&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span><span class="string">&quot;多云转晴&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;wid&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;day&quot;</span><span class="punctuation">:</span><span class="string">&quot;01&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;night&quot;</span><span class="punctuation">:</span><span class="string">&quot;00&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;direct&quot;</span><span class="punctuation">:</span><span class="string">&quot;北风&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-12-12&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span><span class="string">&quot;-5\/4℃&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span><span class="string">&quot;晴&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;wid&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;day&quot;</span><span class="punctuation">:</span><span class="string">&quot;00&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;night&quot;</span><span class="punctuation">:</span><span class="string">&quot;00&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;direct&quot;</span><span class="punctuation">:</span><span class="string">&quot;西北风转西南风&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-12-13&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span><span class="string">&quot;-6\/5℃&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span><span class="string">&quot;晴&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;wid&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;day&quot;</span><span class="punctuation">:</span><span class="string">&quot;00&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;night&quot;</span><span class="punctuation">:</span><span class="string">&quot;00&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;direct&quot;</span><span class="punctuation">:</span><span class="string">&quot;西南风&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error_code&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>本实例我们使用到了：<a href="https://www.juhe.cn/box/index/id/73">https://www.juhe.cn/box/index/id/73</a> 天气查询api</p></blockquote><h3 id="GET请求，把一些参数做成变量而不是直接放到url"><a href="#GET请求，把一些参数做成变量而不是直接放到url" class="headerlink" title="GET请求，把一些参数做成变量而不是直接放到url"></a>GET请求，把一些参数做成变量而不是直接放到url</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testGet2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    params := url.Values&#123;&#125;</span><br><span class="line">    Url, err := url.Parse(<span class="string">&quot;http://apis.juhe.cn/simpleWeather/query&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    params.Set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;087d7d10f700d20e27bb753cd806e40b&quot;</span>)</span><br><span class="line">    params.Set(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;北京&quot;</span>)</span><br><span class="line">    <span class="comment">//如果参数中有中文参数,这个方法会进行URLEncode</span></span><br><span class="line">    Url.RawQuery = params.Encode()</span><br><span class="line">  <span class="comment">//Encode方法将参数编码为URL查询字符串</span></span><br><span class="line">    urlPath := Url.String()</span><br><span class="line">  <span class="comment">//Url.String()方法将URL对象转换为字符串表示形式。包括协议、主机、路径、查询参数等</span></span><br><span class="line">    fmt.Println(urlPath)</span><br><span class="line">    resp, err := http.Get(urlPath)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    <span class="comment">//用于打印错误信息并终止程序的执行。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">  <span class="comment">//是Go语言中的一种延迟执行机制，用于在mian函数返回之前关闭HTTP响应体。</span></span><br><span class="line">    body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">  <span class="comment">//从resp.Body中读取所有数据并返回一个字节切片。</span></span><br><span class="line">    fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析JSON类型的返回结果"><a href="#解析JSON类型的返回结果" class="headerlink" title="解析JSON类型的返回结果"></a>解析JSON类型的返回结果</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;net/url&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testParseJson</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">        Args    <span class="type">string</span>            <span class="string">`json:&quot;args&quot;`</span></span><br><span class="line">        Headers <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> <span class="string">`json:&quot;headers&quot;`</span></span><br><span class="line">        Origin  <span class="type">string</span>            <span class="string">`json:&quot;origin&quot;`</span></span><br><span class="line">        Url     <span class="type">string</span>            <span class="string">`json:&quot;url&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;http://httpbin.org/get&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">    body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">    <span class="keyword">var</span> res result</span><br><span class="line">    _ = json.Unmarshal(body, &amp;res)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%#v&quot;</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Go-http-client/1.1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-61b16029-731c99ba4591c9bd3db53edd&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;115.171.25.28&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main.result&#123;Args:<span class="string">&quot;&quot;</span>, Headers:<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;Accept-Encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span>, <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;httpbin.org&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Go-http-client/1.1&quot;</span>, <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>:<span class="string">&quot;Root=1-61b16029-731c99ba4591c9bd3db53edd&quot;</span>&#125;, Origin:<span class="string">&quot;115.171.25.28&quot;</span>, Url:<span class="string">&quot;http://httpbin.org/get&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="GET请求添加请求头"><a href="#GET请求添加请求头" class="headerlink" title="GET请求添加请求头"></a>GET请求添加请求头</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;net/url&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testAddHeader</span><span class="params">()</span></span> &#123;</span><br><span class="line">    client := &amp;http.Client&#123;&#125;</span><br><span class="line">    req, _ := http.NewRequest(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://httpbin.org/get&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    req.Header.Add(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ryan&quot;</span>)</span><br><span class="line">    req.Header.Add(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;80&quot;</span>)</span><br><span class="line">    resp, _ := client.Do(req)</span><br><span class="line">    body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">    fmt.Printf(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;Age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;httpbin.org&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhaofan&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Go-http-client/1.1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;X-Amzn-Trace-Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Root=1-61b16107-5814e133649862c20ab1c26f&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;origin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;115.171.25.28&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="发出POST请求"><a href="#发出POST请求" class="headerlink" title="发出POST请求"></a>发出POST请求</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPost</span><span class="params">()</span></span> &#123;</span><br><span class="line">    path := <span class="string">&quot;http://apis.juhe.cn/simpleWeather/query&quot;</span></span><br><span class="line">    urlValues := url.Values&#123;&#125;</span><br><span class="line">    urlValues.Add(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;087d7d10f700d20e27bb753cd806e40b&quot;</span>)</span><br><span class="line">    urlValues.Add(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;北京&quot;</span>)</span><br><span class="line">    r, err := http.PostForm(path, urlValues)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">    b, _ := ioutil.ReadAll(r.Body)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>另外一种方式</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPost2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    urlValues := url.Values&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: &#123;<span class="string">&quot;ryan&quot;</span>&#125;,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>:  &#123;<span class="string">&quot;80&quot;</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    reqBody := urlValues.Encode()</span><br><span class="line">    resp, _ := http.Post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, <span class="string">&quot;text/html&quot;</span>, strings.NewReader(reqBody))</span><br><span class="line">    body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送JSON数据的post请求"><a href="#发送JSON数据的post请求" class="headerlink" title="发送JSON数据的post请求"></a>发送JSON数据的post请求</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPostJson</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">    data[<span class="string">&quot;site&quot;</span>] = <span class="string">&quot;www.ryan.com&quot;</span></span><br><span class="line">    data[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;blog&quot;</span></span><br><span class="line">    bytesData, _ := json.Marshal(data)</span><br><span class="line">    resp, _ := http.Post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, <span class="string">&quot;application/json&quot;</span>, bytes.NewReader(bytesData))</span><br><span class="line">  <span class="comment">/*这个示例中，我们使用net/http包提供的Post函数发送一个HTTP POST请求。该函数接受三个参数：</span></span><br><span class="line"><span class="comment">第一个参数是目标URL，指定我们要发送请求的目标地址，这里是http://httpbin.org/post。</span></span><br><span class="line"><span class="comment">第二个参数是请求的Content-Type头，用于指定发送的数据类型。在这里，我们使用&quot;application/json&quot;来表示我们要发送的是JSON数据。</span></span><br><span class="line"><span class="comment">第三个参数是请求体，用于发送具体的数据。我们使用bytes.NewReader(bytesData)来创建一个io.Reader接口的实例，其中bytesData是一个字节切片，包含要发送的JSON数据。*/</span></span><br><span class="line">    body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Client自定义请求"><a href="#使用Client自定义请求" class="headerlink" title="使用Client自定义请求"></a>使用Client自定义请求</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testClient</span><span class="params">()</span></span> &#123;</span><br><span class="line">    client := http.Client&#123;</span><br><span class="line">        Timeout: time.Second * <span class="number">5</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    url := <span class="string">&quot;http://apis.juhe.cn/simpleWeather/query?key=087d7d10f700d20e27bb753cd806e40b&amp;city=北京&quot;</span></span><br><span class="line">    req, err := http.NewRequest(http.MethodGet, url, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    req.Header.Add(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;http://apis.juhe.cn/&quot;</span>)</span><br><span class="line">    res, err2 := client.Do(req)</span><br><span class="line">    <span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">    b, _ := ioutil.ReadAll(res.Body)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h2><p>使用golang实现一个http server非常简单，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testHttpServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 请求处理函数</span></span><br><span class="line">    f := <span class="function"><span class="keyword">func</span><span class="params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">        io.WriteString(resp, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 响应路径,注意前面要有斜杠 /</span></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, f)</span><br><span class="line">    <span class="comment">// 设置监听端口，并监听，注意前面要有冒号:</span></span><br><span class="line">    err := http.ListenAndServe(<span class="string">&quot;:9999&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器输入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:9999/hello</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="使用Handler实现并发处理"><a href="#使用Handler实现并发处理" class="headerlink" title="使用Handler实现并发处理"></a>使用Handler实现并发处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> countHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu sync.Mutex <span class="comment">// guards n</span></span><br><span class="line">    n  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *countHandler)</span></span> ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    h.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> h.mu.Unlock()</span><br><span class="line">    h.n++</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;count is %d\n&quot;</span>, h.n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testHttpServer2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.Handle(<span class="string">&quot;/count&quot;</span>, <span class="built_in">new</span>(countHandler))</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器输入：<code>http://localhost:8080/count</code>，刷新查看结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count is <span class="number">8</span></span><br></pre></td></tr></table></figure><h1 id="Golang标准库template"><a href="#Golang标准库template" class="headerlink" title="Golang标准库template"></a>Golang标准库template</h1><p>templates包定义了数据驱动的文本输出。生成html文件的模板在<code>html/template</code>包下面。模板使用插值语法<code>&#123;&#123;.var&#125;&#125;</code>格式，也可以使用一些流程控制，例如判断<code>if else</code>、循环<code>range</code>还可以使用一些函数，包括内建函数和自定义函数。</p><h2 id="第一个模板实例"><a href="#第一个模板实例" class="headerlink" title="第一个模板实例"></a>第一个模板实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    name := <span class="string">&quot;ryan&quot;</span></span><br><span class="line">    <span class="comment">//定义模板</span></span><br><span class="line">    muban := <span class="string">&quot;hello, &#123;&#123;.&#125;&#125;&quot;</span></span><br><span class="line">    <span class="comment">//解析模板</span></span><br><span class="line">    tmpl, err := template.New(<span class="string">&quot;test&quot;</span>).Parse(muban)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行模板，输出到终端</span></span><br><span class="line">    err = tmpl.Execute(os.Stdout, name)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello, ryan</span><br></pre></td></tr></table></figure><h2 id="也可以是结构体"><a href="#也可以是结构体" class="headerlink" title="也可以是结构体"></a>也可以是结构体</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ryan := Person&#123;<span class="string">&quot;ryan&quot;</span>, <span class="number">80</span>&#125;</span><br><span class="line">    muban := <span class="string">&quot;hello, &#123;&#123;.Name&#125;&#125;, Your age &#123;&#123;.Age&#125;&#125;&quot;</span></span><br><span class="line">    tmpl, err := template.New(<span class="string">&quot;test&quot;</span>).Parse(muban)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    err = tmpl.Execute(os.Stdout, ryan)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello, ryan, Your age <span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="html模板"><a href="#html模板" class="headerlink" title="html模板"></a>html模板</h2><p><strong>定义一个HTML文件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test golang template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   &#123;&#123;.&#125;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>定义一个HttpServer</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;html/template&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tmpl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    t1, err := template.ParseFiles(<span class="string">&quot;test.html&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    t1.Execute(w, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    server := http.Server&#123;</span><br><span class="line">        Addr: <span class="string">&quot;127.0.0.1:8080&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, tmpl)</span><br><span class="line">    server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端访问</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/hello</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello，ryan</span><br></pre></td></tr></table></figure><h2 id="文本和空格"><a href="#文本和空格" class="headerlink" title="文本和空格"></a>文本和空格</h2><p>模板引擎在进行替换的时候，是完全按照文本格式进行替换的。除了需要评估和替换的地方，所有的行分隔符、空格等等空白都原样保留。所以，<strong>对于要解析的内容，不要随意缩进、随意换行</strong>。</p><p><strong>例如：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">23</span>&#125;&#125; &lt; &#123;&#123;<span class="number">45</span>&#125;&#125;        -&gt; <span class="number">23</span> &lt; <span class="number">45</span></span><br><span class="line">&#123;&#123;<span class="number">23</span>&#125;&#125; &lt; &#123;&#123;- <span class="number">45</span>&#125;&#125;      -&gt;  <span class="number">23</span> &lt;<span class="number">45</span></span><br><span class="line">&#123;&#123;<span class="number">23</span> -&#125;&#125; &lt; &#123;&#123;<span class="number">45</span>&#125;&#125;      -&gt;  <span class="number">23</span>&lt; <span class="number">45</span></span><br><span class="line">&#123;&#123;<span class="number">23</span> -&#125;&#125; &lt; &#123;&#123;- <span class="number">45</span>&#125;&#125;    -&gt;  <span class="number">23</span>&lt;<span class="number">45</span></span><br></pre></td></tr></table></figure><blockquote><p>去掉后空格 <code>xxxx -&#125;&#125;</code>，去掉前空格<code>&#123;&#123;- xxxx`## 模板注释注释方式：`&#123;&#123;/* a comment */&#125;&#125;</code>。</p></blockquote><p>注释后的内容不会被引擎进行替换。但需要注意，注释行在替换的时候也会占用行，所以应该去除前缀和后缀空白，否则会多一空行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;- <span class="comment">/* a comment without prefix/suffix space */</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="comment">/* a comment without prefix/suffix space */</span> -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="comment">/* a comment without prefix/suffix space */</span> -&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="管道pipeline"><a href="#管道pipeline" class="headerlink" title="管道pipeline"></a>管道pipeline</h2><p>管道就是一系列命令的链式调用。当然，也可以是一个命令，例如：计算表达式的值<code>&#123;&#123;.&#125;&#125;</code>、<code>&#123;&#123;.Name&#125;&#125;</code>,或者是一个函数调用或者方法调用。</p><p>可以使用管道符号<code>|</code>链接多个命令，用法和unix下的管道类似：<code>|</code>前面的命令将运算结果(或返回值)传递给后一个命令的最后一个位置。</p><blockquote><p>需要注意的是，并非只有使用了<code>|</code>才是pipeline。Go<br>template中，pipeline的概念是传递数据，只要能产生数据的，都是pipeline。</p></blockquote><p>下面是Pipeline的几种示例，它们都输出<code>&quot;output&quot;</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">`&quot;output&quot;`</span>&#125;&#125;</span><br><span class="line">&#123;&#123;printf <span class="string">&quot;%q&quot;</span> <span class="string">&quot;output&quot;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;output&quot;</span> | printf <span class="string">&quot;%q&quot;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;printf <span class="string">&quot;%q&quot;</span> (<span class="built_in">print</span> <span class="string">&quot;out&quot;</span> <span class="string">&quot;put&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;put&quot;</span> | printf <span class="string">&quot;%s%s&quot;</span> <span class="string">&quot;out&quot;</span> | printf <span class="string">&quot;%q&quot;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;output&quot;</span> | printf <span class="string">&quot;%s&quot;</span> | printf <span class="string">&quot;%q&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>可以在HTML中测试</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test golang template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;`&quot;output&quot;`&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;printf &quot;%q&quot; &quot;output&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;&quot;output&quot; | printf &quot;%q&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;printf &quot;%q&quot; (print &quot;out&quot; &quot;put&quot;)&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;&quot;put&quot; | printf &quot;%s%s&quot; &quot;out&quot; | printf &quot;%q&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;&quot;output&quot; | printf &quot;%s&quot; | printf &quot;%q&quot;&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br><span class="line"><span class="string">&quot;output&quot;</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>变量的语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未定义过的变量</span></span><br><span class="line">$<span class="keyword">var</span> := pipeline</span><br><span class="line"><span class="comment">// 已定义过的变量</span></span><br><span class="line">$<span class="keyword">var</span> = pipeline</span><br></pre></td></tr></table></figure><p><strong>例如</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Test golang template&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;$Name := <span class="string">&quot;tom&quot;</span>&#125;&#125;</span><br><span class="line">    &#123;&#123;$Name = <span class="string">&quot;kite&quot;</span>&#125;&#125;</span><br><span class="line">    &#123;&#123;$Name&#125;&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;$<span class="built_in">len</span> := (<span class="built_in">len</span> <span class="string">&quot;hello,ryan&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;$<span class="built_in">len</span>&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kite</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><strong>语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;<span class="keyword">else</span>&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;<span class="keyword">else</span> <span class="keyword">if</span> pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;<span class="keyword">else</span>&#125;&#125;&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>pipeline为false的情况是各种数据对象的0值：数值0，指针或接口是nil，数组、slice、map或string则是len为0。</p></blockquote><p>可以使用如下运算符表达式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">eq</span><br><span class="line">    Returns the boolean truth of arg1 == arg2</span><br><span class="line">ne</span><br><span class="line">    Returns the boolean truth of arg1 != arg2</span><br><span class="line">lt</span><br><span class="line">    Returns the boolean truth of arg1 &lt; arg2</span><br><span class="line">le</span><br><span class="line">    Returns the boolean truth of arg1 &lt;= arg2</span><br><span class="line">gt</span><br><span class="line">    Returns the boolean truth of arg1 &gt; arg2</span><br><span class="line">ge</span><br><span class="line">    Returns the boolean truth of arg1 &gt;= arg2</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test golang template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123;$Age := 18&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;if (ge $Age 18)&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你已经成年！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    &#123;&#123;else&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你还未成年！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    &#123;&#123;end&#125;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你已经成年！</span><br></pre></td></tr></table></figure><h2 id="循环迭代"><a href="#循环迭代" class="headerlink" title="循环迭代"></a>循环迭代</h2><p><strong>语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">range</span> pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="keyword">range</span> pipeline&#125;&#125; T1 &#123;&#123;<span class="keyword">else</span>&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>range可以迭代slice、数组、map或channel。迭代的时候，会设置”.”为当前正在迭代的元素。对于第一个表达式，当迭代对象的值为0值时，则range直接跳过，就像if一样。对于第二个表达式，则在迭代到0值时执行else语句。</p></blockquote><p><strong>实例演示</strong></p><p>go代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tmpl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    t1, err := template.ParseFiles(<span class="string">&quot;test.html&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    s := []<span class="type">string</span>&#123;<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;golang 教程&quot;</span>, <span class="string">&quot;ryan&quot;</span>&#125;</span><br><span class="line">    t1.Execute(w, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test golang template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123;range $x := . -&#125;&#125;</span><br><span class="line">        &#123;&#123;println $x&#125;&#125;</span><br><span class="line">    &#123;&#123;- end&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog golang 教程 ryan</span><br></pre></td></tr></table></figure><h2 id="with…end"><a href="#with…end" class="headerlink" title="with…end"></a>with…end</h2><p>with用来设置<code>&quot;.&quot;</code>的值，语法如下：</p><pre><code>&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</code></pre><blockquote><p>对于第一种格式，当pipeline不为0值的时候，点”.”设置为pipeline运算的值，否则跳过。对于第二种格式，当pipeline为0值时，执行else语句块，否则”.”设置为pipeline运算的值，并执行T1。</p></blockquote><p><strong>实例演示</strong></p><pre><code>&#123;&#123;with "blog-golang-ryan"&#125;&#125;&#123;&#123;println .&#125;&#125;&#123;&#123;end&#125;&#125;</code></pre><p><strong>运行结果</strong></p><pre><code>blog-golang-ryan</code></pre><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">and</span><br><span class="line">    返回第</span><br><span class="line">    一个空参数或最后一个参数返回其参数的布尔值 AND ，即</span><br><span class="line">    “and x y”表现为“<span class="keyword">if</span> x then y <span class="keyword">else</span> x”。</span><br><span class="line">    评估所有参数。</span><br><span class="line">call</span><br><span class="line">    返回调用第一个参数的结果，该参数</span><br><span class="line">    必须是一个函数，其余参数作为参数。</span><br><span class="line">    因此，“call .XY <span class="number">1</span> <span class="number">2</span>”在 Go 表示法中是 dot.XY(<span class="number">1</span>, <span class="number">2</span>)，其中</span><br><span class="line">    Y 是函数值字段、映射条目等。</span><br><span class="line">    第一个参数必须是</span><br><span class="line">    产生函数类型值的评估结果（不同于</span><br><span class="line">    预定义的函数，如打印）。该函数必须</span><br><span class="line">    返回一个或两个结果值，其中第二个</span><br><span class="line">    是类型错误。如果参数与函数不匹配</span><br><span class="line">    或返回的错误值为非零，则执行停止。</span><br><span class="line">html</span><br><span class="line">    返回等效</span><br><span class="line">    于其参数文本表示的转义 HTML 。此功能</span><br><span class="line">    在 html/template 中不可用，但有一些例外。</span><br><span class="line">index</span><br><span class="line">    返回通过</span><br><span class="line">    以下参数对其第一个参数进行索引的结果。因此，在 Go 语法中，“索引 x <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>”是</span><br><span class="line">    x[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>]。每个索引项必须是映射、切片或数组。</span><br><span class="line">slice </span><br><span class="line">    slice 返回其第一个参数被</span><br><span class="line">    其余参数切片的结果。因此，<span class="string">&quot;slice x 1 2&quot;</span> 在 Go 语法中是 x[<span class="number">1</span>:<span class="number">2</span>]，</span><br><span class="line">    而 <span class="string">&quot;slice x&quot;</span> 是 x[:]，<span class="string">&quot;slice x 1&quot;</span> 是 x[<span class="number">1</span>:]，</span><br><span class="line">    是 x[<span class="number">1</span>:<span class="number">2</span>:<span class="number">3</span>]。第一个参数必须是字符串、切片或数组。</span><br><span class="line">js</span><br><span class="line">    返回转义的 JavaScript 等效</span><br><span class="line">    于其参数的文本表示。</span><br><span class="line"><span class="built_in">len</span></span><br><span class="line">    返回其参数的整数长度。</span><br><span class="line">not</span><br><span class="line">    返回其单个参数的布尔否定。</span><br><span class="line">or</span><br><span class="line">    通过返回第</span><br><span class="line">    一个非空参数或最后一个参数来返回其参数的布尔 OR ，即</span><br><span class="line">    “or x y”表现为“<span class="keyword">if</span> x then x <span class="keyword">else</span> y”。</span><br><span class="line">    评估所有参数。</span><br><span class="line"><span class="built_in">print</span> </span><br><span class="line">    fmt.Sprint</span><br><span class="line">    的别名</span><br><span class="line">printf fmt.Sprintf</span><br><span class="line">    的别名</span><br><span class="line"><span class="built_in">println</span> fmt.Sprint的别名</span><br><span class="line">urlquery</span><br><span class="line">    以适合嵌入 URL 查询的形式</span><br><span class="line">    返回其参数的文本表示的转义值。</span><br><span class="line">    此功能在 html/template 中不可用，但有一些</span><br><span class="line">    例外。</span><br></pre></td></tr></table></figure><h2 id="嵌套template：define和template"><a href="#嵌套template：define和template" class="headerlink" title="嵌套template：define和template"></a>嵌套template：define和template</h2><p>define可以直接在待解析内容中定义一个模板，这个模板会加入到common结构组中，并关联到关联名称上。</p><pre><code>&#123;&#123;template "name"&#125;&#125;&#123;&#123;template "name" pipeline&#125;&#125;&#123;&#123;define "name"&#125;&#125;</code></pre><p><strong>实例演示</strong></p><p>假设我们有一个header.html、footer.html和index.html，index.html包含header.html和footer.html</p><p>header.html</p><pre><code>&#123;&#123;define "header"&#125;&#125;     &lt;head&gt;         &lt;title&gt;&#123;&#123;.Title&#125;&#125;&lt;/title&gt;     &lt;/head&gt;&#123;&#123;end&#125;&#125;</code></pre><p>footer.html</p><pre><code>&#123;&#123;define "footer"&#125;&#125;这是footer&#123;&#123;end&#125;&#125;</code></pre><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;template &quot;header&quot; .&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123;template &quot;footer&quot;&#125;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>go code</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;html/template&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tmpl</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    t1, err := template.ParseFiles(<span class="string">&quot;templates/index.html&quot;</span>, <span class="string">&quot;templates/header.html&quot;</span>, <span class="string">&quot;templates/footer.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    t1.Execute(w, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    server := http.Server&#123;</span><br><span class="line">        Addr: <span class="string">&quot;127.0.0.1:8080&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/tmpl&quot;</span>, tmpl)</span><br><span class="line">    server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是header</span><br><span class="line">首页...</span><br><span class="line">这是footer</span><br><span class="line"></span><br><span class="line">count is <span class="number">8</span></span><br></pre></td></tr></table></figure><h1 id="HttpRouter"><a href="#HttpRouter" class="headerlink" title="HttpRouter"></a>HttpRouter</h1><p>HttpRouter是一种轻量级高性能的，golang HTTP请求路由器。</p><p>与Golang默认路由相比，此路由器支持路由模式中的<strong>变量</strong>并匹配请求方法。它还可以更好地扩展。</p><p>该路由器针对高性能和小内存占用进行了优化。即使有很长的路径和大量的路线，它也能很好地扩展。压缩动态特里（基数树）结构用于有效匹配。</p><p>gin框架就是以httprouter为基础开发的，下面我们来学习一下httprouter。</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/julienschmidt/httprouter</span><br></pre></td></tr></table></figure><h2 id="第一个路由实例"><a href="#第一个路由实例" class="headerlink" title="第一个路由实例"></a>第一个路由实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/julienschmidt/httprouter&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class="line">    fmt.Fprint(w, <span class="string">&quot;Welcome!\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;hello, %s!\n&quot;</span>, ps.ByName(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := httprouter.New()</span><br><span class="line">    router.GET(<span class="string">&quot;/&quot;</span>, Index)</span><br><span class="line">    router.GET(<span class="string">&quot;/hello/:name&quot;</span>, Hello)</span><br><span class="line"></span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, router))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器输入：<code>http://localhost:8080/</code>，输出：<code>Welcome!</code></p><p>在浏览器输入：<code>http://localhost:8080/hello/ryan</code>，输出：<code>hello, ryan!</code></p><h2 id="http-router-请求方法"><a href="#http-router-请求方法" class="headerlink" title="http router 请求方法"></a>http router 请求方法</h2><p>httprouter 为所有的HTTP Method<br>提供了快捷的使用方式，只需要调用对应的方法即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> GET(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;GET&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> HEAD(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;HEAD&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> OPTIONS(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;OPTIONS&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> POST(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;POST&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> PUT(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;PUT&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> PATCH(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;PATCH&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> DELETE(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;DELETE&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="restful-风格路由"><a href="#restful-风格路由" class="headerlink" title="restful 风格路由"></a>restful 风格路由</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/julienschmidt/httprouter&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class="line">    fmt.Fprint(w, <span class="string">&quot;Welcome!\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;hello, %s!\n&quot;</span>, ps.ByName(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getuser</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    uid := ps.ByName(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;you are get user %s&quot;</span>, uid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyuser</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    uid := ps.ByName(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;you are modify user %s&quot;</span>, uid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteuser</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    uid := ps.ByName(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;you are delete user %s&quot;</span>, uid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adduser</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    <span class="comment">// uid := r.FormValue(&quot;uid&quot;)</span></span><br><span class="line">    uid := ps.ByName(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;you are add user %s&quot;</span>, uid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := httprouter.New()</span><br><span class="line">    router.GET(<span class="string">&quot;/&quot;</span>, Index)</span><br><span class="line">    router.GET(<span class="string">&quot;/hello/:name&quot;</span>, Hello)</span><br><span class="line"></span><br><span class="line">    router.GET(<span class="string">&quot;/user/:uid&quot;</span>, getuser)</span><br><span class="line">    router.POST(<span class="string">&quot;/adduser/:uid&quot;</span>, adduser)</span><br><span class="line">    router.DELETE(<span class="string">&quot;/deluser/:uid&quot;</span>, deleteuser)</span><br><span class="line">    router.PUT(<span class="string">&quot;/moduser/:uid&quot;</span>, modifyuser)</span><br><span class="line"></span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, router))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用postman测试</p><h1 id="Gin-简介"><a href="#Gin-简介" class="headerlink" title="Gin 简介"></a>Gin 简介</h1><h2 id="Gin官网"><a href="#Gin官网" class="headerlink" title="Gin官网"></a>Gin官网</h2><pre><code>https://gin-gonic.com/</code></pre><h2 id="gin简介"><a href="#gin简介" class="headerlink" title="gin简介"></a>gin简介</h2><p>Gin是一个golang的微框架，基于httprouter，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点。</p><h2 id="gin特征"><a href="#gin特征" class="headerlink" title="gin特征"></a>gin特征</h2><p><strong>速度快</strong></p><p>基于基数树的路由，内存占用小。没有反射。可预测的 API 性能。</p><p><strong>中间件支持</strong></p><p>传入的 HTTP<br>请求可以由中间件链和最终操作处理。例如：Logger、Authorization、GZIP<br>最后在 DB 中发布一条消息。</p><p><strong>Crash-free</strong></p><p>Gin 可以捕获 HTTP<br>请求期间发生的panic并恢复它。这样，你的服务器将始终可用。</p><p><strong>JSON 验证</strong></p><p>Gin 可以解析和验证请求的 JSON - 例如，检查所需值的存在。</p><p><strong>路由分组</strong></p><p>更好地组织您的路线。需要授权与不需要授权，不同的 API<br>版本……此外，组可以无限嵌套，而不会降低性能。</p><p><strong>错误管理</strong></p><p>Gin 提供了一种方便的方法来收集 HTTP<br>请求期间发生的所有错误。最终，中间件可以将它们写入日志文件、数据库并通过网络发送它们。</p><p><strong>内置渲染</strong></p><p>Gin 为 JSON、XML 和 HTML 渲染提供了一个易于使用的 API。</p><p><strong>可扩展</strong></p><p>创建一个新的中间件非常简单，只需查看示例代码即可。</p><h2 id="第一个gin"><a href="#第一个gin" class="headerlink" title="第一个gin"></a>第一个gin</h2><p><strong>安装gin</strong></p><pre><code> go get -u github.com/gin-gonic/gin</code></pre><p><strong>导入项目</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br></pre></td></tr></table></figure><p><strong>实现代码</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><p>浏览器输入：<code>http://localhost:8080/ping</code></p><pre><code>&#123;&quot;message&quot;:&quot;pong&quot;&#125;</code></pre><h1 id="Gin实现用户登录"><a href="#Gin实现用户登录" class="headerlink" title="Gin实现用户登录"></a>Gin实现用户登录</h1><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="创建一个文件tempates"><a href="#创建一个文件tempates" class="headerlink" title="创建一个文件tempates"></a>创建一个文件tempates</h3><p>在项目跟目录下面创建给文件夹tempates，用来保存静态文件</p><h3 id="创建一个登录html文件"><a href="#创建一个登录html文件" class="headerlink" title="创建一个登录html文件"></a>创建一个登录html文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个欢迎html页面"><a href="#创建一个欢迎html页面" class="headerlink" title="创建一个欢迎html页面"></a>创建一个欢迎html页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    Welcome, &#123;&#123;.username&#125;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用Gin处理逻辑"><a href="#使用Gin处理逻辑" class="headerlink" title="使用Gin处理逻辑"></a>使用Gin处理逻辑</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;hello&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoLogin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">    c.HTML(<span class="number">200</span>, <span class="string">&quot;welcome.html&quot;</span>, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line">    e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line"></span><br><span class="line">    e.GET(<span class="string">&quot;/login&quot;</span>, Login)</span><br><span class="line">    e.POST(<span class="string">&quot;/login&quot;</span>, DoLogin)</span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gin请求参数"><a href="#Gin请求参数" class="headerlink" title="Gin请求参数"></a>Gin请求参数</h1><h2 id="Get请求参数"><a href="#Get请求参数" class="headerlink" title="Get请求参数"></a>Get请求参数</h2><blockquote><p>使用<code>c.Query(&quot;key&quot;)</code>、或者 <code>c.DefaultQuery(&quot;key&quot;)</code>方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestQueryString</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    username := c.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    site := c.DefaultQuery(<span class="string">&quot;site&quot;</span>, <span class="string">&quot;www.ryan.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;username:%s, site:%s&quot;</span>, username, site)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    e := gin.Default()</span><br><span class="line">    <span class="comment">// url : http://localhost:8080/testQueryString?username=郭宏志&amp;site=blog</span></span><br><span class="line">    e.GET(<span class="string">&quot;/testQueryString&quot;</span>, TestQueryString)</span><br><span class="line"></span><br><span class="line">    e.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><pre><code>username:郭宏志, site:blog</code></pre><h2 id="Post参数"><a href="#Post参数" class="headerlink" title="Post参数"></a>Post参数</h2><p>使用<code>c.PostForm(&quot;key&quot;)</code>、或者 <code>c.DefaultPostForm(&quot;key&quot;)</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoLogin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    password := c.DefaultPostForm(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123&quot;</span>)</span><br><span class="line"></span><br><span class="line">    c.HTML(<span class="number">200</span>, <span class="string">&quot;welcome.html&quot;</span>, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用Postman或者Post表单测试</p></blockquote><h2 id="路劲参数（restful风格）"><a href="#路劲参数（restful风格）" class="headerlink" title="路劲参数（restful风格）"></a>路劲参数（restful风格）</h2><p>使用<code>c.Param(&quot;key&quot;)</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPathParam</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    s := c.Param(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;Username:%s&quot;</span>, s)</span><br><span class="line">    <span class="comment">// 输出：Username:ryan</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line">    <span class="comment">// http://localhost:8080/hello/ryan</span></span><br><span class="line">    e.GET(<span class="string">&quot;/hello/:username&quot;</span>, TestPathParam)</span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="既有Get也有Post"><a href="#既有Get也有Post" class="headerlink" title="既有Get也有Post"></a>既有Get也有Post</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetAndPost</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    page := c.DefaultQuery(<span class="string">&quot;page&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    key := c.PostForm(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;Page:%s, Key:%s&quot;</span>, page, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line">    <span class="comment">// http://localhost:8080/query?page=1</span></span><br><span class="line">    e.POST(<span class="string">&quot;/query&quot;</span>, TestGetAndPost)</span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用Postman或者Post表单测试</p></blockquote><h1 id="Gin表单处理"><a href="#Gin表单处理" class="headerlink" title="Gin表单处理"></a>Gin表单处理</h1><h2 id="创建一个HTML表单"><a href="#创建一个HTML表单" class="headerlink" title="创建一个HTML表单"></a>创建一个HTML表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>blog，听ryan讲golang<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好: </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;swiming&quot;</span>&gt;</span>游泳  </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span>&gt;</span>篮球</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;m&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;f&quot;</span>&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        城市: <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Go-code"><a href="#Go-code" class="headerlink" title="Go code"></a>Go code</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Regsiter</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">    hobby := c.PostFormArray(<span class="string">&quot;hobby&quot;</span>)</span><br><span class="line">    gender := c.PostForm(<span class="string">&quot;gender&quot;</span>)</span><br><span class="line">    city := c.PostForm(<span class="string">&quot;city&quot;</span>)</span><br><span class="line"></span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;Username:%s, Password:%s, hobby:%s, gender:%s, city:%s&quot;</span>, username, password, hobby, gender, city)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoRegister</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.HTML(<span class="number">200</span>, <span class="string">&quot;register.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line">    e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">    e.POST(<span class="string">&quot;/register&quot;</span>, Regsiter)</span><br><span class="line">    e.GET(<span class="string">&quot;/register&quot;</span>, GoRegister)</span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><pre><code>Username:ryan, Password:123, hobby:[swiming basketball], gender:m, city:beijing</code></pre><h1 id="Gin数据绑定"><a href="#Gin数据绑定" class="headerlink" title="Gin数据绑定"></a>Gin数据绑定</h1><h2 id="绑定Form表单"><a href="#绑定Form表单" class="headerlink" title="绑定Form表单"></a>绑定Form表单</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Username <span class="type">string</span>   <span class="string">`form:&quot;username&quot;`</span></span><br><span class="line">    Password <span class="type">string</span>   <span class="string">`form:&quot;password&quot;`</span></span><br><span class="line">    Hobby    []<span class="type">string</span> <span class="string">`form:&quot;hobby&quot;`</span></span><br><span class="line">    Gender   <span class="type">string</span>   <span class="string">`form:&quot;gender&quot;`</span></span><br><span class="line">    City     <span class="type">string</span>   <span class="string">`form:&quot;city&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Regsiter</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> user User</span><br><span class="line">    c.ShouldBind(&amp;user)</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;User:%s&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoRegister</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.HTML(<span class="number">200</span>, <span class="string">&quot;register.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line">    e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">    e.POST(<span class="string">&quot;/register&quot;</span>, Regsiter)</span><br><span class="line">    e.GET(<span class="string">&quot;/register&quot;</span>, GoRegister)</span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绑定查询参数"><a href="#绑定查询参数" class="headerlink" title="绑定查询参数"></a>绑定查询参数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Username <span class="type">string</span> <span class="string">`form:&quot;username&quot;`</span></span><br><span class="line">    Password <span class="type">string</span> <span class="string">`form:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetBind</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> user User</span><br><span class="line">    err := c.ShouldBind(&amp;user)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;User:%s&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line">    <span class="comment">// http://localhost:8080/testGetBind?username=ryan&amp;password=123</span></span><br><span class="line">    e.GET(<span class="string">&quot;/testGetBind&quot;</span>, TestGetBind)</span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路径请求参数绑定"><a href="#路径请求参数绑定" class="headerlink" title="路径请求参数绑定"></a>路径请求参数绑定</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Username <span class="type">string</span> <span class="string">`uri:&quot;username&quot;`</span></span><br><span class="line">    Password <span class="type">string</span> <span class="string">`uri:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetBind</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> user User</span><br><span class="line">    err := c.ShouldBindUri(&amp;user)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;User:%s&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line">    <span class="comment">// http://localhost:8080/testGetBind/ryan/123</span></span><br><span class="line">    e.GET(<span class="string">&quot;/testGetBind/:username/:password&quot;</span>, TestGetBind)</span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：结构体和绑定方法的变化</p></blockquote><h1 id="Gin访问静态文件集成BootStrap框架"><a href="#Gin访问静态文件集成BootStrap框架" class="headerlink" title="Gin访问静态文件集成BootStrap框架"></a>Gin访问静态文件集成BootStrap框架</h1><h2 id="下载BootStrap"><a href="#下载BootStrap" class="headerlink" title="下载BootStrap"></a>下载BootStrap</h2><p>下载地址：<code>https://getbootstrap.com/</code></p><h2 id="添加bootstrap-css和js文件"><a href="#添加bootstrap-css和js文件" class="headerlink" title="添加bootstrap css和js文件"></a>添加bootstrap css和js文件</h2><p>创建一个assets文件夹，将css和js文件添加到该文件夹</p><h2 id="创建html文件"><a href="#创建html文件" class="headerlink" title="创建html文件"></a>创建html文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;emailHelp&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;emailHelp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-text&quot;</span>&gt;</span>We&#x27;ll never share your email with anyone else.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3 form-check&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleCheck1&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;exampleCheck1&quot;</span>&gt;</span>Check me out<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Go-Code"><a href="#Go-Code" class="headerlink" title="Go Code"></a>Go Code</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line">    e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line"></span><br><span class="line">    e.Static(<span class="string">&quot;/assets&quot;</span>, <span class="string">&quot;./assets&quot;</span>)</span><br><span class="line">    e.StaticFS(<span class="string">&quot;/croot&quot;</span>, http.Dir(<span class="string">&quot;c:/&quot;</span>))</span><br><span class="line">    e.StaticFile(<span class="string">&quot;/favicon.ico&quot;</span>, <span class="string">&quot;./assets/favicon.ico&quot;</span>)</span><br><span class="line"></span><br><span class="line">    e.GET(<span class="string">&quot;/login&quot;</span>, Login)</span><br><span class="line">    e.POST(<span class="string">&quot;/login&quot;</span>, DoLogin)</span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gin使用中间件"><a href="#Gin使用中间件" class="headerlink" title="Gin使用中间件"></a>Gin使用中间件</h1><p>中间件听起来非常高大上的名字，实际非常简单，就是在请求中间起到拦截作用的处理函数。</p><h2 id="Gin默认中间件"><a href="#Gin默认中间件" class="headerlink" title="Gin默认中间件"></a>Gin默认中间件</h2><p>如果你使用<code>Gin.Default()</code>实例化gin引擎，默认有两个中间件，<code>Logger</code>和<code>Recovery</code>，分别用来处理日志和处理错误。如果使用<code>gin.New()</code>需要重新添加。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个没有任何默认中间件的路由</span></span><br><span class="line">r := gin.New()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局中间件</span></span><br><span class="line"><span class="comment">// Logger 中间件将日志写入 gin.DefaultWriter，即使你将 GIN_MODE 设置为 release。</span></span><br><span class="line"><span class="comment">// By default gin.DefaultWriter = os.Stdout</span></span><br><span class="line">r.Use(gin.Logger())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recovery 中间件会 recover 任何 panic。如果有 panic 的话，会写入 500。</span></span><br><span class="line">r.Use(gin.Recovery())</span><br></pre></td></tr></table></figure><h2 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h2><ol><li>自定义中间件非常简单，定义一个符合下面格式的处理函数</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br></pre></td></tr></table></figure><ol><li>使用<code>Use</code>方法调用</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMW</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;hello,%s&quot;</span>, <span class="string">&quot;ryan&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyMiddleware1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;我的第一个中间件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyMiddleware2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;我的第二个中间件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  func Default() *Engine &#123;</span></span><br><span class="line"><span class="comment">        debugPrintWARNINGDefault()</span></span><br><span class="line"><span class="comment">        engine := New()</span></span><br><span class="line"><span class="comment">        engine.Use(Logger(), Recovery())</span></span><br><span class="line"><span class="comment">        return engine</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    <span class="comment">// e := gin.Default()</span></span><br><span class="line">    <span class="comment">// e := gin.New()</span></span><br><span class="line"></span><br><span class="line">    e := gin.Default()</span><br><span class="line"></span><br><span class="line">    e.Use(MyMiddleware1, MyMiddleware2)</span><br><span class="line"></span><br><span class="line">    e.GET(<span class="string">&quot;testmw&quot;</span>, TestMW)</span><br><span class="line"></span><br><span class="line">    e.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用Gin-BasicAuth中间件"><a href="#使用Gin-BasicAuth中间件" class="headerlink" title="使用Gin BasicAuth中间件"></a>使用Gin BasicAuth中间件</h1><p>Gin提供了BasicAuth中间件，用来对网站资源的访问保护。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟一些私人数据</span></span><br><span class="line"><span class="keyword">var</span> secrets = gin.H&#123;</span><br><span class="line">    <span class="string">&quot;foo&quot;</span>:    gin.H&#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;foo@bar.com&quot;</span>, <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;123433&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;austin&quot;</span>: gin.H&#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;austin@example.com&quot;</span>, <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;666&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;lena&quot;</span>:   gin.H&#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;lena@guapa.com&quot;</span>, <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;523443&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路由组使用 gin.BasicAuth() 中间件</span></span><br><span class="line">    <span class="comment">// gin.Accounts 是 map[string]string 的一种快捷方式</span></span><br><span class="line">    authorized := r.Group(<span class="string">&quot;/admin&quot;</span>, gin.BasicAuth(gin.Accounts&#123;</span><br><span class="line">        <span class="string">&quot;foo&quot;</span>:    <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        <span class="string">&quot;austin&quot;</span>: <span class="string">&quot;1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lena&quot;</span>:   <span class="string">&quot;hello2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;manu&quot;</span>:   <span class="string">&quot;4321&quot;</span>,</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /admin/secrets 端点</span></span><br><span class="line">    <span class="comment">// 触发 &quot;localhost:8080/admin/secrets</span></span><br><span class="line">    authorized.GET(<span class="string">&quot;/secrets&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户，它是由 BasicAuth 中间件设置的</span></span><br><span class="line">        user := c.MustGet(gin.AuthUserKey).(<span class="type">string</span>)</span><br><span class="line">        fmt.Println(user)</span><br><span class="line">        <span class="keyword">if</span> secret, ok := secrets[user]; ok &#123;</span><br><span class="line">            c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;secret&quot;</span>: secret&#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;NO SECRET :(&quot;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听并在 0.0.0.0:8080 上启动服务</span></span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在浏览器输入<code>localhost:8080/admin/secrets</code>时，会弹出一个对话框，要求输入正确的用户名和密码，才能访问资源。</p><h1 id="Gin-cookie的使用"><a href="#Gin-cookie的使用" class="headerlink" title="Gin cookie的使用"></a>Gin cookie的使用</h1><p><code>cookie</code>是服务器向客户端写的一些数据，可以实现像自动登录等功能。</p><h2 id="Gin-cookie的使用-1"><a href="#Gin-cookie的使用-1" class="headerlink" title="Gin cookie的使用"></a>Gin cookie的使用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获得cookie</span></span><br><span class="line">    s, err := c.Cookie(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        s = <span class="string">&quot;ryan&quot;</span></span><br><span class="line">        <span class="comment">// 设置cookie</span></span><br><span class="line">        c.SetCookie(<span class="string">&quot;username&quot;</span>, s, <span class="number">60</span>*<span class="number">60</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;测试cookie&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line">    e.GET(<span class="string">&quot;/test&quot;</span>, Handler)</span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基于安全的考虑，需要给cookie加上<code>Secure</code>和<code>HttpOnly</code>属性，<code>HttpOnly</code>比较好理解，设置<code>HttpOnly=true</code>的cookie不能被js获取到，无法用<code>document.cookie</code>打出cookie的内容。</p><p><code>Secure</code>属性是说如果一个cookie被设置了<code>Secure=true</code>，那么这个cookie只能用<code>https</code>协议发送给服务器，用<code>http</code>协议是不发送的。</p></blockquote><h1 id="Gin-使用Session"><a href="#Gin-使用Session" class="headerlink" title="Gin 使用Session"></a>Gin 使用Session</h1><p>因为http是无状态、短连接，如何保存客户端和服务器直接的会话状态呢？可以使用session。</p><h2 id="使用gin-session中间件"><a href="#使用gin-session中间件" class="headerlink" title="使用gin session中间件"></a>使用gin session中间件</h2><p>gin 本身没有对session的支持，可以使用第三方中间件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/gin-contrib/sessions</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br></pre></td></tr></table></figure><p>该中间件提供了很多后端支持：</p><ul><li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-cookie-based">cookie-based</a></li><li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-redis">Redis</a></li><li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-memcached">memcached</a></li><li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-mongodb">MongoDB</a></li><li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-memstore">memstore</a></li><li><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#readme-postgresql">PostgreSQL</a></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  r := gin.Default()</span><br><span class="line">  store := cookie.NewStore([]<span class="type">byte</span>(<span class="string">&quot;secret&quot;</span>))</span><br><span class="line">  r.Use(sessions.Sessions(<span class="string">&quot;mysession&quot;</span>, store))</span><br><span class="line"></span><br><span class="line">  r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    session := sessions.Default(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> session.Get(<span class="string">&quot;hello&quot;</span>) != <span class="string">&quot;world&quot;</span> &#123;</span><br><span class="line">      session.Set(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">      session.Save()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;hello&quot;</span>: session.Get(<span class="string">&quot;hello&quot;</span>)&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多内容请参考：<code>https://pkg.go.dev/github.com/gin-contrib/sessions#section-readme</code></p><h1 id="Gin-实现restful风格的CRUD"><a href="#Gin-实现restful风格的CRUD" class="headerlink" title="Gin 实现restful风格的CRUD"></a>Gin 实现restful风格的CRUD</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    UId  <span class="type">int</span>    <span class="string">`json:&quot;uid&quot;`</span></span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">make</span>([]User, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    u1 := User&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">    u2 := User&#123;<span class="number">2</span>, <span class="string">&quot;kite&quot;</span>, <span class="number">30</span>&#125;</span><br><span class="line">    u3 := User&#123;<span class="number">3</span>, <span class="string">&quot;rose&quot;</span>, <span class="number">40</span>&#125;</span><br><span class="line">    users = <span class="built_in">append</span>(users, u1)</span><br><span class="line">    users = <span class="built_in">append</span>(users, u2)</span><br><span class="line">    users = <span class="built_in">append</span>(users, u3)</span><br><span class="line">    fmt.Println(users)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(uid <span class="type">int</span>)</span></span> (*User, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> i, u := <span class="keyword">range</span> users &#123;</span><br><span class="line">        <span class="keyword">if</span> u.UId == uid &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;u, i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    u4 := User&#123;<span class="number">4</span>, <span class="string">&quot;Joe&quot;</span>, <span class="number">50</span>&#125;</span><br><span class="line">    users = <span class="built_in">append</span>(users, u4)</span><br><span class="line">    c.JSON(<span class="number">200</span>, users)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DelUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    uid := c.Param(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    id, _ := strconv.Atoi(uid)</span><br><span class="line">    _, i := find(id)</span><br><span class="line">    users = <span class="built_in">append</span>(users[:i], users[i+<span class="number">1</span>:]...)</span><br><span class="line">    c.JSON(<span class="number">200</span>, users)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    uid := c.Param(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    id, _ := strconv.Atoi(uid)</span><br><span class="line">    u, _ := find(id)</span><br><span class="line">    u.Name = <span class="string">&quot;修改的Name&quot;</span></span><br><span class="line">    c.JSON(<span class="number">200</span>, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    uid := c.Param(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">    id, _ := strconv.Atoi(uid)</span><br><span class="line">    u, _ := find(id)</span><br><span class="line">    c.JSON(<span class="number">200</span>, u)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    e := gin.Default()</span><br><span class="line">    e.GET(<span class="string">&quot;/user/:uid&quot;</span>, FindUser)</span><br><span class="line">    e.PUT(<span class="string">&quot;/user/:uid&quot;</span>, UpdateUser)</span><br><span class="line">    e.DELETE(<span class="string">&quot;/user/:uid&quot;</span>, DelUser)</span><br><span class="line">    e.POST(<span class="string">&quot;/user/&quot;</span>, AddUser)</span><br><span class="line">    e.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gin-实现路由分组"><a href="#Gin-实现路由分组" class="headerlink" title="Gin 实现路由分组"></a>Gin 实现路由分组</h1><p>假如你的网站有多个模块：博客、教程、视频、问答，每个模块又有多个路由，这样就可以进行路由分组，使用的方法是router.Group(“分组名称”)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">  c.String(<span class="number">200</span>, <span class="string">&quot;blog list&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">  c.String(<span class="number">200</span>, <span class="string">&quot;blog post&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F3</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">  c.String(<span class="number">200</span>, <span class="string">&quot;blog add&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F4</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">  c.String(<span class="number">200</span>, <span class="string">&quot;video list&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F5</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;video post&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F6</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;video add&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := gin.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 博客</span></span><br><span class="line">    <span class="comment">// 访问：http://localhost:8080/blog/list</span></span><br><span class="line">    v1 := router.Group(<span class="string">&quot;/blog&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.GET(<span class="string">&quot;/list&quot;</span>, F1)</span><br><span class="line">        v1.POST(<span class="string">&quot;/post&quot;</span>, F2)</span><br><span class="line">        v1.POST(<span class="string">&quot;/add&quot;</span>, F3)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 视频</span></span><br><span class="line">    <span class="comment">// 访问：http://localhost:8080/video/list</span></span><br><span class="line">    v2 := router.Group(<span class="string">&quot;/video&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v2.GET(<span class="string">&quot;/list&quot;</span>, F4)</span><br><span class="line">        v2.POST(<span class="string">&quot;/post&quot;</span>, F5)</span><br><span class="line">        v2.POST(<span class="string">&quot;/add&quot;</span>, F6)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gin-输出渲染"><a href="#Gin-输出渲染" class="headerlink" title="Gin 输出渲染"></a>Gin 输出渲染</h1><p>Gin支持很多种输出渲染，可以是简单的字符串、JSON、XML、HTML、ProtoBuf。使用的方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c.JSON(<span class="number">200</span>, <span class="literal">nil</span>)</span><br><span class="line">c.XML(<span class="number">200</span>, <span class="literal">nil</span>)</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">c.ProtoBuf(<span class="number">200</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>这里像字符串、JSON、HTML我们都用过，这里我们再总结一下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJson</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">        <span class="string">&quot;site&quot;</span>: <span class="string">&quot;www.ryan.com&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXML</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.XML(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">        <span class="string">&quot;site&quot;</span>: <span class="string">&quot;www.ryan.com&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHtml</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.HTML(<span class="number">200</span>, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestString</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.String(<span class="number">200</span>, <span class="string">&quot;blog，ryan讲golang&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := gin.Default()</span><br><span class="line"></span><br><span class="line">    e.GET(<span class="string">&quot;/test_json&quot;</span>, TestJson)</span><br><span class="line">    e.GET(<span class="string">&quot;/test_xml&quot;</span>, TestXML)</span><br><span class="line">    e.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">    e.GET(<span class="string">&quot;/test_html&quot;</span>, TestHtml)</span><br><span class="line">    e.GET(<span class="string">&quot;/test_string&quot;</span>, TestString)</span><br><span class="line"></span><br><span class="line">    e.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gin实现文件上传"><a href="#Gin实现文件上传" class="headerlink" title="Gin实现文件上传"></a>Gin实现文件上传</h1><h2 id="创建html文件-1"><a href="#创建html文件-1" class="headerlink" title="创建html文件"></a>创建html文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    请选择上传文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Go-Code-1"><a href="#Go-Code-1" class="headerlink" title="Go Code"></a>Go Code</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Upload</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 单文件</span></span><br><span class="line">    file, _ := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">    log.Println(file.Filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件到项目根目录，使用原文件名</span></span><br><span class="line">    c.SaveUploadedFile(file, file.Filename)</span><br><span class="line"></span><br><span class="line">    c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;&#x27;%s&#x27; uploaded!&quot;</span>, file.Filename))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoUpload</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.HTML(<span class="number">200</span>, <span class="string">&quot;upload.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := gin.Default()</span><br><span class="line">    <span class="comment">// 为 multipart forms 设置较低的内存限制 (默认是 32 MiB)</span></span><br><span class="line">    router.MaxMultipartMemory = <span class="number">8</span> &lt;&lt; <span class="number">20</span> <span class="comment">// 8 MiB</span></span><br><span class="line">    router.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">    router.GET(<span class="string">&quot;/upload&quot;</span>, GoUpload)</span><br><span class="line">    router.POST(<span class="string">&quot;/upload&quot;</span>, Upload)</span><br><span class="line">    router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTP协议简介&quot;&gt;&lt;a href=&quot;#HTTP协议简介&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议简介&quot;&gt;&lt;/a&gt;HTTP协议简介&lt;/h1&gt;&lt;h2 id=&quot;HTTP协议简介-1&quot;&gt;&lt;a href=&quot;#HTTP协议简介-1&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="Gin" scheme="https://ryanchou612.github.io/tags/Gin/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记｜MySQL</title>
    <link href="https://ryanchou612.github.io/posts/817da579.html"/>
    <id>https://ryanchou612.github.io/posts/817da579.html</id>
    <published>2023-06-12T02:23:19.000Z</published>
    <updated>2023-07-14T15:12:44.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库简介"><a href="#数据库简介" class="headerlink" title="数据库简介"></a>数据库简介</h1><h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2><p>数据库管理系统（DBMS）是一种用于管理数据库的软件系统，它提供了创建、读取、更新和删除（CRUD）数据库中数据的方法。DBMS的主要任务是对数据进行有效和安全的管理。</p><p>DBMS允许用户定义和创建数据库，定义表和它们的关系，定义表中数据的约束和规则，以及查询和更新数据等。它还提供了一种访问控制机制，以确保只有授权用户才能访问数据库。DBMS还提供了各种性能优化机制，如索引、缓存、查询优化等，以提高数据库的性能。</p><p>常见的DBMS包括Oracle、MySQL、Microsoft SQL<br>Server、PostgreSQL、MongoDB等。每个DBMS都有自己的特点和优缺点，用户可以根据实际需求选择适合自己的DBMS。</p><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><p>SQL是Structured Query<br>Language（结构化查询语言）的缩写，是一种用于操作关系型数据库的标准化语言。SQL是一种声明式语言，它的主要任务是定义和操作数据库中的数据。</p><p>SQL被广泛应用于访问和操作关系型数据库中的数据。通过SQL，用户可以进行各种操作，例如查询数据、插入、更新和删除数据，定义和修改数据库表结构和约束，以及授权和管理用户等。</p><p>SQL标准分为几个不同的部分，包括数据定义语言（DDL）、数据操作语言（DML）、数据控制语言（DCL）和数据查询语言（DQL）等。其中，DDL用于创建、修改和删除数据库对象，例如表、视图、索引等；DML用于插入、更新和删除数据；DCL用于授权和管理用户访问数据库的权限；DQL用于查询数据。</p><p>不同的关系型数据库管理系统（RDBMS）实现SQL标准的程度不同，有些数据库可能会支持特定的扩展和功能。但是，大多数RDBMS都支持SQL标准，使得用户可以使用相同的语言来操作不同的数据库。</p><h2 id="数据库模型"><a href="#数据库模型" class="headerlink" title="数据库模型"></a>数据库模型</h2><p>数据库模型是描述数据之间关系的概念性框架。主要有以下几种：</p><ol><li>层次模型：数据按照树形结构进行组织，即每个数据记录只有一个父节点，但可以有多个子节点。层次模型的优点是检索速度快，缺点是不灵活。</li><li>网状模型：数据以网络结构组织，每个数据记录可以有多个父节点和子节点，它的优点是能够表达复杂的数据关系，但缺点是不易维护。</li><li>关系模型：数据按照表格形式组织，每个数据记录是一行，每个数据属性是一列。表格之间通过键值关联。关系模型是目前应用最广泛的数据库模型，因为它的简单性、灵活性和易用性。</li><li>面向对象模型：数据被组织为对象，每个对象有其属性和方法。面向对象模型的优点是能够表达现实世界中的对象，缺点是查询语言相对复杂。</li><li>XML模型：数据被组织为XML（可扩展标记语言）文档，它的优点是具有很好的可读性和可扩展性，缺点是性能较低。</li><li>NoSQL模型：NoSQL是一类非关系型数据库模型，它们采用不同于传统关系型数据库的数据存储和查询方式。NoSQL模型通常用于大数据和分布式系统中，它们的优点是处理海量数据和高并发访问的能力强，缺点是数据一致性较差。</li></ol><p>MySQL属于关系型数据库管理系统（RDBMS），采用的是关系模型。关系模型是目前应用最广泛的数据库模型，数据按照表格形式组织，每个数据记录是一行，每个数据属性是一列。表格之间通过键值关联。MySQL是一种开源的RDBMS，它是由瑞典MySQL<br>AB公司开发，现在由Oracle公司维护和支持。MySQL支持SQL标准，因此能够与大多数SQL兼容的应用程序集成，是一个非常流行的数据库系统。</p><h2 id="如何设计一个数据库"><a href="#如何设计一个数据库" class="headerlink" title="如何设计一个数据库"></a>如何设计一个数据库</h2><p>设计一个数据库需要考虑多个方面，包括以下几个步骤：</p><ol><li>确定数据库需求：首先要明确数据库要解决的问题，确定需要存储的数据类型和数据量，以及数据库应用程序的功能和性能需求。</li><li>设计数据库结构：设计数据库的结构包括确定需要存储的数据实体、数据属性、关系以及数据约束等。这一步需要使用数据库建模工具进行数据建模，例如使用E-R图或UML建模工具，将实体、属性、关系和约束等以图形化的方式表示出来。</li><li>选择合适的数据库管理系统：根据应用程序的需求，选择合适的数据库管理系统，例如关系型数据库（如MySQL、Oracle、SQL<br>Server等）、面向对象数据库（如MongoDB、CouchDB等）或键值数据库（如Redis、Memcached等）等。</li><li>创建数据库表和字段：根据设计好的数据库结构，创建数据库表和字段。这一步需要确定表名、字段名、数据类型、长度、默认值、约束和索引等。</li><li>设计数据库安全和备份策略：设计数据库安全和备份策略包括设计用户和角色、定义权限、实施数据备份和恢复策略等。这一步需要考虑数据保护、数据完整性、数据安全等方面。</li><li>编写应用程序：设计好数据库结构之后，需要编写应用程序来与数据库进行交互。在应用程序中，需要实现对数据库的查询、插入、更新、删除等操作，并处理异常情况。</li><li>测试和维护：设计好数据库之后，需要对数据库进行测试，包括测试数据的完整性、性能和安全性等。同时还需要进行定期的数据库维护工作，包括备份、优化、数据清理等。</li></ol><h2 id="数据库性能优化"><a href="#数据库性能优化" class="headerlink" title="数据库性能优化"></a>数据库性能优化</h2><p>数据库性能优化是指通过调整数据库的结构和参数配置，提高数据库的响应速度、吞吐量和并发能力，以满足应用程序的需求。以下是一些常用的数据库性能优化方法：</p><ol><li>索引优化：索引是提高数据库查询性能的关键，通过对频繁查询的字段创建索引，可以大大缩短查询时间。需要注意的是，过多或者不必要的索引会降低插入、更新、删除等操作的性能，需要权衡优化。</li><li>优化查询语句：对于复杂的查询语句，可以考虑分解为多个简单的查询，减少查询时间。同时需要避免在WHERE子句中使用函数或者运算符等操作，会导致索引失效。</li><li>数据库参数调优：针对不同的数据库系统，有不同的参数可以调整以优化性能，例如MySQL的缓存、并发和连接池等参数。</li><li>表结构优化：优化表的结构，避免使用过多的大字段，不必要的冗余字段，以及过多的关联查询等操作。</li><li>分区和分库：对于数据量较大的数据库，可以考虑将数据按照一定规则分成多个分区或者分库，减轻单个节点的负载压力。</li><li>缓存优化：使用缓存可以大大减少数据库的访问，提高响应速度和吞吐量。常用的缓存方案包括内存缓存、分布式缓存和CDN等。</li><li>定期维护：定期对数据库进行维护，包括备份、优化、数据清理等操作，可以减少数据库的负担，提高性能和可靠性。</li></ol><p>总之，数据库性能优化需要结合具体的应用场景和数据特点，综合考虑多种优化方案，以达到最优的性能和稳定性。</p><h2 id="数据库的备份和恢复"><a href="#数据库的备份和恢复" class="headerlink" title="数据库的备份和恢复"></a>数据库的备份和恢复</h2><p>数据库备份与恢复是数据库管理中非常重要的一环，可以保障数据的安全和完整性。以下是一些常用的数据库备份与恢复方法：</p><ol><li>完全备份：完全备份是指将整个数据库备份下来，包括数据和日志等信息。完全备份是最基本的备份方式，可以保证数据的完整性，但备份文件通常比较大，且恢复时间比较长。</li><li>增量备份：增量备份是指只备份自上次备份以来的更改部分。增量备份可以减少备份文件的大小和备份时间，但恢复过程比较复杂，需要先进行完全备份，然后逐个应用增量备份。</li><li>差异备份：差异备份是指备份自上次完全备份以来的所有更改部分，与增量备份相比，差异备份的备份文件比较小，但恢复时间仍然较长。</li><li>定期备份：定期备份是指根据业务需求，定期进行数据库备份。备份频率根据数据的变化情况和恢复时间的要求等因素来确定，例如每天、每周或者每月备份等。</li><li>恢复操作：恢复操作是指在出现数据库故障时，将备份的数据恢复到数据库中。恢复过程中需要先选择合适的备份文件，然后根据备份类型和恢复策略等因素来选择恢复方式，例如通过备份文件直接恢复，或者通过增量备份和差异备份逐个应用。</li></ol><p>总之，数据库备份与恢复是数据库管理中非常重要的一环，可以保障数据的安全和完整性。备份需要根据具体业务需求来制定备份策略，同时需要定期进行备份测试，确保备份数据的可靠性和完整性。在出现故障时，需要及时选择合适的恢复方式，以保障业务的连续性和可靠性。</p><h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库是一种用于存储、组织和管理数据的电子系统，可以让用户方便地存储和检索数据。数据库通常由一个或多个数据表组成，每个表都有一些列，每列代表了一个特定的数据类型。在表中，每一行都代表了一条记录，其中每个列都包含了相应的数据值。</p><p>数据库可用于各种类型的应用程序，包括商业、科学、医疗、社交媒体等等。它们提供了一种安全、可靠的数据存储方式，可以让多个用户同时访问和处理同一个数据集。用户可以在数据库中进行各种操作，例如添加、修改、删除和查询数据。</p><p>现代数据库通常采用关系型数据库管理系统（RDBMS），这种系统使用SQL（Structured<br>Query<br>Language）作为管理和查询数据的标准语言。此外，还有一些非关系型数据库，例如NoSQL数据库，它们不使用SQL语言，但通常具有更好的扩展性和性能。</p><h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><p>在关系型数据库中，数据通常被组织成表的形式，表由行和列组成，类似于电子表格。每个表都有一个唯一的名称，每个列都有一个名称和一个数据类型，每行包含一组相关的数据。</p><p>表是数据库中最基本的组成部分之一，它可以存储一定类型的数据，并提供对这些数据的快速访问和操作。每个表都具有一个结构，包括表的名称、列的名称、数据类型以及约束条件等。</p><p>在表中，每行都代表一个记录或实例，每个记录由一个或多个列组成，它们包含了相关的数据。例如，在一个名为”用户”的表中，每一行可能代表一个用户，每个列可能包含一个用户的姓名、电子邮件地址、电话号码和地址等信息。</p><p>表中的列通常具有一定的数据类型，例如整数、浮点数、日期、文本等等。列还可以包含约束条件，例如唯一性约束、主键约束、外键约束等，这些约束条件用于确保数据的完整性和一致性。</p><p>表的设计和管理是数据库设计和管理的重要组成部分，包括创建、删除、修改和查询表中的数据等。</p><h2 id="数据库记录（行）"><a href="#数据库记录（行）" class="headerlink" title="数据库记录（行）"></a>数据库记录（行）</h2><p>在关系型数据库中，表是由行和列组成的数据结构，每一行表示一条记录或实例，其中每一列包含一个数据元素。每个记录都包含了一组相关的数据，表示某个实体或概念的特定属性。</p><p>例如，在一个名为”学生”的表中，每一行可能代表一个学生，每个列可能包含学生的姓名、学号、出生日期、性别、专业等信息。每个记录中的数据是根据列的数据类型来组织的，以确保数据的一致性和可比性。</p><p>在表中，每个记录都必须包含一个唯一的标识符，通常称为主键。主键可以是一列或多列的组合，用于标识记录并确保记录的唯一性。</p><p>记录的创建、修改和删除是数据库管理的基本操作之一。用户可以通过SQL语句或图形用户界面来实现这些操作。在记录的创建和修改过程中，用户需要确保输入的数据符合列的数据类型、长度和约束条件，以确保数据的完整性和一致性。</p><p>在数据库查询中，记录也起着重要的作用，用户可以使用SQL查询语句来检索特定条件下的记录，并对记录进行排序、分组、过滤等操作。查询的结果通常是一个记录集，其中每个记录代表了满足查询条件的一条记录。</p><h2 id="数据库列"><a href="#数据库列" class="headerlink" title="数据库列"></a>数据库列</h2><p>在关系型数据库中，表是由行和列组成的数据结构，每个列都代表了表中某一类数据的属性。每个列都有一个名称和一个数据类型，以及一些其他的属性，如默认值、约束条件等。</p><p>列是表中最基本的组成部分之一，它们描述了表中的数据结构和属性。在表中，每一列代表一种数据类型，例如整数、浮点数、日期、字符串等等。在列中，每个数据元素都具有相同的数据类型，这有助于确保数据的一致性和可比性。</p><p>列还可以包含一些约束条件，例如唯一性约束、主键约束、外键约束等，这些约束条件用于限制数据的输入，以确保数据的完整性和一致性。例如，在一个”用户”表中，用户ID可能是一个整数类型的主键列，用于唯一标识每个用户记录。</p><p>在数据库设计和管理中，列的设计是非常重要的，需要考虑到数据类型的选择、数据长度、约束条件以及索引等因素，以确保表的性能和数据质量。</p><h2 id="数据库主键"><a href="#数据库主键" class="headerlink" title="数据库主键"></a>数据库主键</h2><p>在关系型数据库中，主键是用于唯一标识表中每个记录的一列或一组列。每个表只能有一个主键，并且主键列的值必须是唯一的、不为空的，并且不能被修改或删除。主键的作用是保证数据的一致性、完整性和可靠性，同时也是表之间建立关系的重要基础。</p><p>在实际应用中，主键通常是一个自增长的整数列，用于自动生成唯一的标识符。例如，在一个”学生”表中，可以将学生的ID设置为主键，并使用自增长功能来自动生成每个学生的唯一ID。主键还可以是一个复合键，由多个列的组合构成，用于标识复合唯一性。例如，在一个”订单”表中，可以使用订单编号和订单日期作为复合主键，以确保每个订单的唯一性。</p><p>主键的选择和设计对于数据库的性能和数据质量非常重要。主键的类型、长度和约束条件需要根据具体的数据结构和需求进行选择，以确保主键的稳定性和可靠性。在创建和修改表的结构时，必须明确指定主键列，并确保主键的唯一性和完整性。</p><h2 id="数据库外键"><a href="#数据库外键" class="headerlink" title="数据库外键"></a>数据库外键</h2><p>在关系型数据库中，外键是用于建立表之间关系的一种机制，它定义了一个表中的列与另一个表中的主键或唯一键之间的关联。通过外键，可以实现表之间的数据完整性和一致性，确保关联的数据在不同表之间的正确性和有效性。</p><p>外键通常由两个部分组成：一个是定义在当前表中的列，称为”外键列”或”关联列”，另一个是定义在引用表中的列，称为”主键列”或”引用列”。在建立外键关系时，需要确保外键列的数据类型、长度和约束条件与主键列的定义相匹配，以确保数据的正确性和一致性。</p><p>外键关系可以在表的创建时或之后建立，可以使用SQL语句或图形用户界面来实现。在建立外键关系时，需要指定引用表的名称和主键列的名称，以确保外键列与主键列之间的正确关联。如果外键列中的数据与引用表中的主键列中的数据不匹配，或者引用表中的主键列中的数据发生更改或删除，那么相应的外键列中的数据也将被更新或删除。</p><p>外键的作用是确保数据的一致性和完整性，可以有效避免数据冗余和重复，并提高数据的查询效率和可维护性。在数据库设计和开发中，外键的选择和建立应该根据具体需求和数据模型进行，并考虑到数据库的性能和安全性。</p><h2 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h2><p>在关系型数据库中，索引是一种数据结构，用于加速数据的检索和查询操作。它是一个数据库对象，存储在磁盘上，包含了数据表中一个或多个列的排序信息。通过对索引列进行排序，可以快速定位表中符合条件的记录，从而提高查询效率和性能。</p><p>索引通常由一个或多个列组成，可以是唯一索引、非唯一索引、聚集索引或非聚集索引等类型。唯一索引要求索引列的值必须是唯一的，非唯一索引则允许索引列中包含重复的值。聚集索引和非聚集索引的区别在于索引存储的位置和方式不同，前者将数据和索引存储在一起，后者则将数据和索引分开存储。</p><p>索引的作用是提高查询效率和性能，减少数据的扫描和过滤操作，从而加快查询的速度。通过合理选择和设计索引，可以有效优化数据库的性能和响应时间。但是，过多的索引也会增加数据库的存储空间和维护成本，因此需要根据具体的业务需求和数据模型进行选择和设计。</p><p>在数据库中，可以使用SQL语句或图形界面来创建、修改和删除索引。为了保证索引的效果和稳定性，需要考虑索引列的选择、排序、长度和约束条件等因素，避免索引冗余和重复。同时，需要定期维护和优化索引，以确保索引的有效性和性能。</p><h2 id="数据库视图"><a href="#数据库视图" class="headerlink" title="数据库视图"></a>数据库视图</h2><p>在关系型数据库中，视图（View）是一种虚拟的表，它是基于一个或多个基本表的查询结果，以一定的方式呈现出来的结果集。与实际的基本表不同，视图并不实际存储数据，而是从一个或多个表中检索数据的逻辑结果集。</p><p>视图的作用是提供一种简化和抽象的数据视图，使用户能够更轻松地查询和操作数据。通过使用视图，可以隐藏实际数据表的结构和细节，简化查询操作，减少数据冗余和重复。同时，视图还可以增强数据的安全性和保密性，通过授权和权限设置，限制用户对数据的访问和操作。</p><p>在数据库中，可以使用SQL语句或图形界面来创建、修改和删除视图。为了确保视图的有效性和正确性，需要根据具体的业务需求和数据模型进行选择和设计。视图的设计应该考虑到数据的一致性、完整性和性能等因素，避免视图的冗余和复杂性。同时，需要定期维护和更新视图，以确保视图的有效性和性能。</p><h1 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL是一种开源的关系型数据库管理系统（RDBMS），由瑞典MySQL<br>AB公司开发，目前由Oracle公司进行开发和维护。MySQL使用标准的SQL数据语言进行数据的管理和操作，支持多种操作系统平台，包括Linux、Windows和Mac<br>OS等。</p><p>MySQL的特点包括：</p><ol><li>开源、免费：MySQL是一个完全开源的软件，可以免费下载和使用。</li><li>稳定、可靠：MySQL是一种经过广泛测试和验证的数据库管理系统，具有良好的稳定性和可靠性。</li><li>高性能：MySQL使用多种技术和优化策略，可以提供高效的数据存储和检索功能。</li><li>可扩展性：MySQL支持分布式和集群部署，可以根据业务需求进行水平或垂直扩展。</li><li>兼容性：MySQL支持多种操作系统和编程语言，可以与其他应用程序无缝集成。</li><li>安全性：MySQL支持多种安全功能和加密算法，可以保护数据的安全性和完整性。</li></ol><p>MySQL广泛应用于Web应用程序、企业应用、嵌入式系统和云计算等领域。目前，MySQL已成为全球使用最广泛的关系型数据库之一，拥有庞大的社区和生态系统，提供丰富的插件和扩展功能，能够满足各种不同的数据管理和处理需求。</p><h2 id="MySQL的历史"><a href="#MySQL的历史" class="headerlink" title="MySQL的历史"></a>MySQL的历史</h2><p>MySQL的历史可以追溯到1994年，当时瑞典的Michael Widenius和David<br>Axmark开发了一个名为MySQL的轻量级关系型数据库管理系统，它基于C语言开发，采用了BSD许可证，可以免费使用和修改。</p><p>1995年，Michael Widenius和David Axmark与Allan Larsson共同成立了MySQL<br>AB公司，开始商业化推广MySQL，并提供了商业版本的服务和支持。</p><p>在接下来的几年中，MySQL逐渐成为最流行的开源数据库之一，受到了广泛的关注和应用。2000年，MySQL<br>AB发布了第一个完整的MySQL版本，增加了许多新的特性和功能，包括事务处理、多版本并发控制、存储过程、触发器等。</p><p>2008年，MySQL AB被Sun<br>Microsystems收购，成为Sun的子公司。在Sun的支持下，MySQL继续发展和壮大，增加了更多的特性和功能，并逐渐成为企业级应用程序的标准数据库。</p><p>2010年，Sun Microsystems被Oracle<br>Corporation收购，MySQL成为Oracle的一部分。在Oracle的领导下，MySQL继续推出了新的版本，增加了更多的功能和改进，包括InnoDB存储引擎的改进、分区表、复制、性能优化等。</p><p>目前，MySQL已成为全球使用最广泛的关系型数据库之一，拥有庞大的用户群体和生态系统，包括各种工具、插件和扩展功能，能够满足各种不同的数据管理和处理需求。</p><h2 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h2><p>MariaDB是一个由MySQL的创始人Michael<br>Widenius领导的团队开发的开源关系型数据库管理系统。MariaDB最初于2009年发布，旨在创建一个完全兼容MySQL的数据库系统，同时提供更好的性能、更多的功能和更好的稳定性。</p><p>MariaDB基于MySQL的代码库，并且完全兼容MySQL，因此可以轻松地将MySQL应用程序迁移到MariaDB。不过，MariaDB也提供了许多MySQL不具备的功能，例如更好的性能优化、更好的事务支持、更好的安全性、更好的扩展性、更好的存储引擎支持等。</p><p>MariaDB是开源软件，可以免费下载和使用。它也有商业版本，提供额外的功能和支持。MariaDB在开源社区和企业中都很受欢迎，许多知名的公司和组织使用MariaDB作为其关键业务系统的数据库。</p><h2 id="什么是数据库引擎-mysql引擎有哪些"><a href="#什么是数据库引擎-mysql引擎有哪些" class="headerlink" title="什么是数据库引擎 mysql引擎有哪些"></a>什么是数据库引擎 mysql引擎有哪些</h2><p>数据库引擎是数据库管理系统中的一个核心组件，用于处理数据的存储、检索和修改。不同的数据库引擎具有不同的存储和查询机制，可以影响数据库的性能、可靠性和功能。</p><p>MySQL提供了多种存储引擎，不同的存储引擎具有不同的特点和适用场景，如下所示：</p><ol><li>MyISAM：这是MySQL最古老的存储引擎之一，提供了高速的读取和写入速度，适合用于读多写少的应用程序。不过，它不支持事务处理和行级锁定，也不支持外键约束。</li><li>InnoDB：这是MySQL目前最流行的存储引擎之一，提供了高性能和高可靠性，支持事务处理和行级锁定，还支持外键约束和其他高级特性。它适合用于处理大型的、高并发的应用程序。</li><li>Memory：这个存储引擎将数据存储在内存中，提供了极快的读取和写入速度，但是数据只能存储在内存中，一旦服务器关闭或者重启，数据将会丢失。</li><li>CSV：这个存储引擎将数据存储为CSV（逗号分隔值）格式，适合用于存储大量的数据文件，但是它不支持事务处理和行级锁定，也不支持索引。</li><li>Archive：这个存储引擎适合用于存储归档数据，它使用压缩算法来减小数据文件的大小，但是它不支持更新和删除操作，只支持插入操作。</li><li>Blackhole：这个存储引擎将所有的写入操作都忽略掉，但是它仍然可以执行读取操作，适合用于数据的复制和同步。</li></ol><p>除了上述存储引擎，MySQL还提供了其他一些存储引擎，如NDB<br>Cluster、Federated、Merge等。每个存储引擎都有自己的特点和适用场景，开发人员可以根据自己的需求选择最适合的存储引擎。</p><h2 id="MySQL的架构"><a href="#MySQL的架构" class="headerlink" title="MySQL的架构"></a>MySQL的架构</h2><p>MySQL的架构可以分为以下三层：</p><ol><li>连接层（Connection<br>Layer）：MySQL的连接层负责接收客户端的连接请求，并验证客户端的身份。如果客户端验证通过，则连接层将会将请求转发给下一层的处理器。连接层还负责处理连接请求的一些参数，如字符集、认证方式、加密方式等。</li><li>处理器层（Processing<br>Layer）：MySQL的处理器层负责处理所有的SQL语句和事务请求。当处理器层接收到SQL语句时，它会对语句进行解析、优化和执行。处理器层还负责管理所有的数据库对象，如表、索引、视图等。</li><li>存储引擎层（Storage Engine<br>Layer）：MySQL的存储引擎层负责管理数据的存储和检索。存储引擎层将数据存储在磁盘或内存中，并且负责数据的读取、写入和索引。MySQL提供了多种存储引擎，每种存储引擎都有自己的特点和适用场景。</li></ol><p>MySQL的三层架构使得它具有很高的可扩展性和灵活性，可以根据不同的应用场景选择不同的存储引擎，从而达到最佳的性能和可靠性。</p><h2 id="mysql客户端和服务器"><a href="#mysql客户端和服务器" class="headerlink" title="mysql客户端和服务器"></a>mysql客户端和服务器</h2><p>MySQL客户端和服务器是MySQL架构中的两个重要组件，它们之间通过网络连接进行通信，完成数据库操作。</p><p>MySQL服务器是一个运行在后台的进程，用于接收客户端的连接请求，处理SQL语句和事务请求，管理数据的存储和检索。MySQL服务器的主要功能是提供安全可靠的数据库服务，为多个客户端提供并发访问的支持。</p><p>MySQL客户端是连接到MySQL服务器的一个应用程序，用于向MySQL服务器发送SQL语句、事务请求等操作，并接收返回的结果。MySQL客户端可以通过命令行工具、GUI工具、API等方式进行访问。</p><p>MySQL客户端和服务器之间的通信基于TCP&#x2F;IP协议，MySQL服务器默认监听端口为3306。客户端通过TCP&#x2F;IP协议连接到MySQL服务器后，需要进行身份验证和授权，然后才能对数据库进行操作。MySQL支持多种身份验证和授权方式，如基于用户名&#x2F;密码的身份验证、基于IP地址的访问控制等。</p><p>MySQL客户端和服务器的分离架构使得MySQL具有很高的可扩展性和灵活性，可以根据不同的应用场景灵活配置和调整服务器的参数和选项，从而达到最佳的性能和可靠性。</p><h1 id="windows下安装MySQL"><a href="#windows下安装MySQL" class="headerlink" title="windows下安装MySQL"></a>windows下安装MySQL</h1><h2 id="MySQL的两个版本"><a href="#MySQL的两个版本" class="headerlink" title="MySQL的两个版本"></a>MySQL的两个版本</h2><p>MySQL是一个开源的关系型数据库管理系统，有许多版本发布，其中比较常见的两个版本是MySQL<br>Community Edition和MySQL Enterprise Edition。</p><p>MySQL Community<br>Edition是免费的开源版本，提供了一些基本的数据库管理功能，包括数据存储、查询、备份和恢复等。该版本拥有较强的社区支持，有大量的开源开发者和爱好者为其开发各种插件和扩展，可以根据需要灵活地定制功能。</p><p>MySQL Enterprise<br>Edition则是一款商业版本，拥有更多的高级功能和服务，包括高级安全性、性能优化、数据分析、监控和自动化等。同时，它还提供了更加稳定和可靠的支持，包括24小时技术支持、紧急修复、升级和专业咨询等服务。</p><p>总体而言，MySQL Community Edition适合于一般的中小型应用开发，而MySQL<br>Enterprise Edition则更适合于需要高可用性和大规模部署的企业级应用。</p><h2 id="windows下面安装MySQL"><a href="#windows下面安装MySQL" class="headerlink" title="windows下面安装MySQL"></a>windows下面安装MySQL</h2><p>以下是在Windows操作系统上安装MySQL Community Edition的基本步骤：</p><ol><li><p>下载MySQL Community Edition安装程序<br>前往MySQL官方网站（<a href="https://dev.mysql.com/downloads/mysql/%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E7%9A%84MySQL%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E3%80%82%E9%80%89%E6%8B%A9Windows">https://dev.mysql.com/downloads/mysql/）下载对应操作系统版本的MySQL安装程序。选择Windows</a><br>(x86, 32-bit), Windows (x86, 64-bit), Windows (x86, 32-bit), MSI<br>Installer或者Windows (x86, 64-bit), MSI Installer<br>适用于您的操作系统版本。同时也需要选择适用于您操作系统版本的MySQL<br>Community Edition。</p></li><li><p>运行安装程序 打开下载好的MySQL安装程序，并按照提示进行安装。</p></li><li><p>安装过程中的配置<br>在安装过程中，您需要选择要安装的MySQL版本和组件。如果您需要安装MySQL<br>Workbench等附加组件，则需要勾选相应的选项。接着您需要选择MySQL安装的位置和配置文件，建议采用默认选项。</p></li><li><p>设置root密码<br>在安装过程中，您需要设置root用户的密码。请务必设置强密码并妥善保存。</p></li><li><p>完成安装 在安装过程完成后，您可以打开MySQL Command Line<br>Client，测试MySQL是否安装成功。在命令行中输入以下命令，如果能成功登录，则表示MySQL已经安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后输入root用户的密码，就可以开始使用MySQL了。</p></li></ol><blockquote><p>注意：在安装MySQL之前，需要确保您的计算机上没有安装其他的MySQL版本，否则可能会导致安装失败。另外，如果您的计算机上已经安装了防火墙，请确保MySQL可以通过防火墙进行访问。</p></blockquote><h2 id="安装目录分析"><a href="#安装目录分析" class="headerlink" title="安装目录分析"></a>安装目录分析</h2><p>在Windows下安装MySQL时，通常会选择一个目录进行安装。该目录中包含MySQL数据库管理系统的所有文件和子目录。下面是MySQL<br>Windows安装目录的一些常见文件和子目录：</p><ol><li><code>bin</code><br>目录：该目录包含MySQL的二进制可执行文件。这些文件是MySQL服务器和客户端程序的核心部分，例如<br><code>mysql.exe</code>，<code>mysqld.exe</code> 等。</li><li><code>data</code><br>目录：该目录是MySQL服务器存储所有数据的默认位置。在这个目录中，可以找到所有的数据库和表数据文件，以及日志文件。</li><li><code>docs</code><br>目录：该目录包含MySQL的文档文件，包括用户手册，安装指南和开发文档等。</li><li><code>include</code> 目录：该目录包含用于编译MySQL客户端和服务器的头文件。</li><li><code>lib</code> 目录：该目录包含MySQL的库文件，例如动态链接库和静态链接库。</li><li><code>share</code> 目录：该目录包含共享文件，例如错误消息、字符集和语言文件等。</li><li><code>support-files</code> 目录：该目录包含MySQL的配置文件示例，例如<br><code>my-default.ini</code>， <code>my-huge.ini</code> 等。</li><li><code>my.ini</code><br>文件：这是MySQL的配置文件，包含了MySQL服务器的配置信息，例如端口号、字符集和数据存储路径等。</li></ol><blockquote><p>需要注意的是，这些文件和子目录的名称和结构可能会因不同版本的MySQL而有所不同。</p></blockquote><h1 id="Linux下安装MySQL"><a href="#Linux下安装MySQL" class="headerlink" title="Linux下安装MySQL"></a>Linux下安装MySQL</h1><p>以下是在CentOS操作系统上安装MySQL Community Edition的基本步骤：</p><ol><li><p>更新软件包列表 在终端中输入以下命令，更新软件包列表：</p><pre><code>yum update</code></pre></li><li><p>安装MySQL 在终端中输入以下命令，安装MySQL：</p><pre><code>yum install mysql-server</code></pre><p>安装过程中，您需要设置root用户的密码。请务必设置强密码并妥善保存。</p></li><li><p>配置MySQL<br>在安装过程中，MySQL服务器会自动启动。您可以在终端中输入以下命令来检查MySQL是否正在运行：</p><pre><code>systemctl status mysqld</code></pre><p>如果MySQL没有启动，您可以使用以下命令手动启动MySQL：</p><pre><code>systemctl start mysqld</code></pre></li><li><p>安全配置MySQL<br>您可以使用以下命令启动MySQL安全配置向导，该向导将帮助您设置MySQL的安全性：</p><pre><code>mysql_secure_installation</code></pre><p>在向导中，您可以选择禁用匿名用户、禁用root用户的远程登录、删除测试数据库和刷新权限表等选项。</p></li><li><p>完成安装 在安装过程完成后，您可以在终端中输入以下命令，使用MySQL：</p><pre><code>mysql -u root -p</code></pre><p>然后输入root用户的密码，就可以开始使用MySQL了。</p></li></ol><blockquote><p>注意：如果您的CentOS版本不同，安装MySQL的步骤可能会有所不同。另外，如果您的计算机上已经安装了防火墙，请确保MySQL可以通过防火墙进行访问。</p></blockquote><h1 id="在MacOS下面安装MySQL"><a href="#在MacOS下面安装MySQL" class="headerlink" title="在MacOS下面安装MySQL"></a>在MacOS下面安装MySQL</h1><p>以下是在MacOS操作系统上安装MySQL Community Edition的基本步骤：</p><ol><li><p>下载MySQL<br>访问MySQL官网（<a href="https://dev.mysql.com/downloads/mysql/%EF%BC%89%E4%B8%8B%E8%BD%BD%E9%80%82%E7%94%A8%E4%BA%8EMacOS%E7%9A%84MySQL">https://dev.mysql.com/downloads/mysql/）下载适用于MacOS的MySQL</a><br>Community Edition。</p></li><li><p>安装MySQL<br>下载完毕后，打开下载的DMG文件，并将MySQL安装到MacOS中。将MySQL的应用程序文件夹拖动到MacOS的应用程序文件夹中。</p></li><li><p>启动MySQL 打开终端并输入以下命令来启动MySQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/mysql/support-files/mysql.server start</span><br></pre></td></tr></table></figure><p>如果您希望MySQL在MacOS启动时自动启动，可以使用以下命令将MySQL添加到MacOS的系统启动项中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/mysql/support-files/mysql.server start</span><br><span class="line">sudo mkdir -p /Library/LaunchDaemons</span><br><span class="line">sudo cp /usr/local/mysql/support-files/mysql.server /Library/LaunchDaemons/</span><br><span class="line">sudo chown root:wheel /Library/LaunchDaemons/mysql.server</span><br><span class="line">sudo launchctl load -w /Library/LaunchDaemons/mysql.server</span><br></pre></td></tr></table></figure></li><li><p>安全配置MySQL<br>您可以使用以下命令启动MySQL安全配置向导，该向导将帮助您设置MySQL的安全性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/mysql/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><p>在向导中，您可以选择禁用匿名用户、禁用root用户的远程登录、删除测试数据库和刷新权限表等选项。</p></li><li><p>完成安装 在安装过程完成后，您可以在终端中输入以下命令，使用MySQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后输入root用户的密码，就可以开始使用MySQL了。</p></li></ol><blockquote><p>注意：如果您的MacOS版本不同，安装MySQL的步骤可能会有所不同。另外，如果您的计算机上已经安装了防火墙，请确保MySQL可以通过防火墙进行访问。</p></blockquote><h1 id="MySQL配置文件分析"><a href="#MySQL配置文件分析" class="headerlink" title="MySQL配置文件分析"></a>MySQL配置文件分析</h1><h2 id="MySQL配置文件"><a href="#MySQL配置文件" class="headerlink" title="MySQL配置文件"></a>MySQL配置文件</h2><h3 id="Centos文件路径"><a href="#Centos文件路径" class="headerlink" title="Centos文件路径"></a>Centos文件路径</h3><p>在 CentOS 系统中，MySQL 的默认配置文件是 <code>/etc/my.cnf</code> 或者<br><code>/etc/mysql/my.cnf</code>，具体的文件路径取决于 MySQL<br>的安装方式和操作系统的版本。</p><p>如果存在多个 MySQL 实例或者使用了第三方 MySQL<br>安装包，则可能会存在多个配置文件。可以通过以下命令查找 MySQL<br>配置文件的位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name &quot;my.cnf&quot;</span><br></pre></td></tr></table></figure><p>该命令将在系统中查找所有名称为 <code>my.cnf</code> 的文件，并显示它们的路径。如果<br>MySQL 的默认配置文件存在，那么可以在输出中找到它的路径。</p><p>需要注意的是，如果没有找到 MySQL 的默认配置文件，则可以通过创建一个新的<br><code>my.cnf</code> 文件来手动配置 MySQL 的参数和选项。在 CentOS<br>中，该文件通常放置在 <code>/etc/</code> 目录下。在创建和修改 <code>my.cnf</code><br>文件时，需要注意文件权限和所有权，以确保 MySQL 可以读取和修改该文件。</p><h3 id="windows文件路径"><a href="#windows文件路径" class="headerlink" title="windows文件路径"></a>windows文件路径</h3><p>在 Windows 操作系统中，MySQL 的默认配置文件名为 <code>my.ini</code> 或者<br><code>my.cnf</code>，其存放位置取决于 MySQL 的安装方式和版本。在通常情况下，MySQL<br>安装程序会将默认配置文件存储在安装目录下的 <code>bin</code> 目录中。</p><p>具体来说，如果您使用的是 MySQL 官方的 MSI<br>安装程序，则默认的配置文件路径通常为：</p><pre><code>C:\Program Files\MySQL\MySQL Server X.Y\my.ini</code></pre><p>其中，<code>X.Y</code> 表示 MySQL 版本号。如果您使用的是 ZIP<br>或者二进制包进行安装，则默认的配置文件存放在解压缩目录的 <code>support-files</code><br>子目录下。</p><p>注意，如果在安装 MySQL<br>时选择了不同的安装目录，那么默认配置文件的位置也会相应地发生变化。</p><p>另外，在 Windows 中，MySQL 还可以通过 <code>--defaults-file</code><br>命令行选项来指定使用的配置文件。例如：</p><pre><code>C:\Program Files\MySQL\MySQL Server X.Y\bin\mysqld --defaults-file=C:\mycustom\my.ini</code></pre><p>以上命令将启动 MySQL，并使用 <code>C:\mycustom\my.ini</code> 文件作为配置文件。</p><h2 id="重要选项分析"><a href="#重要选项分析" class="headerlink" title="重要选项分析"></a>重要选项分析</h2><p>MySQL 的配置文件包含了 MySQL 服务器的所有配置信息，MySQL<br>在启动的时候会读取该配置文件来初始化服务器的各种参数和选项。下面是 MySQL<br>的配置文件的一些常见选项和参数：</p><ol><li><code>[mysqld]</code>：这个部分包含了 MySQL<br>服务器的配置信息，其中包括常见的配置项，例如 <code>port</code>，<code>datadir</code> 等。</li><li><code>port</code>：该选项指定了 MySQL 服务器监听的端口号，默认值是 3306。</li><li><code>datadir</code>：该选项指定了 MySQL 服务器的数据文件的存储路径，默认值是<br><code>/var/lib/mysql</code>。</li><li><code>bind-address</code>：该选项指定了 MySQL 服务器监听的 IP 地址，默认值是<br><code>0.0.0.0</code>，表示监听所有的 IP 地址。</li><li><code>socket</code>：该选项指定了 MySQL 服务器使用的 Unix<br>套接字文件的路径，默认值是 <code>/var/run/mysqld/mysqld.sock</code>。</li><li><code>log-error</code>：该选项指定了 MySQL<br>服务器的错误日志文件的路径和文件名，默认值是<br><code>/var/log/mysql/error.log</code>。</li><li><code>pid-file</code>：该选项指定了 MySQL 服务器的 PID<br>文件的路径和文件名，默认值是 <code>/var/run/mysqld/mysqld.pid</code>。</li><li><code>[client]</code>：这个部分包含了 MySQL<br>客户端的配置信息，其中包括常见的配置项，例如 <code>user</code>，<code>password</code> 等。</li><li><code>user</code>：该选项指定了 MySQL<br>客户端连接数据库时使用的用户名，默认值是当前登录用户的用户名。</li><li><code>password</code>：该选项指定了 MySQL<br>客户端连接数据库时使用的密码，默认值是空。</li></ol><p>需要注意的是，MySQL<br>的配置文件可以在安装时指定，也可以在运行时通过命令行选项来指定。并且，MySQL<br>的配置文件的路径和名称可能因不同的操作系统和 MySQL 版本而有所不同。</p><h1 id="MySQL数据库的基本操作"><a href="#MySQL数据库的基本操作" class="headerlink" title="MySQL数据库的基本操作"></a>MySQL数据库的基本操作</h1><p>以下是常用的 SQL 语句来创建、删除、修改和打开数据库：</p><ol><li>创建数据库</li></ol><p>创建一个名为 <code>mydatabase</code> 的数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydatabase;</span><br></pre></td></tr></table></figure><ol><li>删除数据库</li></ol><p>删除名为 <code>mydatabase</code> 的数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE mydatabase;</span><br></pre></td></tr></table></figure><ol><li>修改数据库</li></ol><p>修改名为 <code>mydatabase</code> 的数据库的字符集为 <code>utf8mb4</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE mydatabase <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br></pre></td></tr></table></figure><ol><li>打开数据库</li></ol><p>在 MySQL 中，使用 <code>USE</code> 语句来打开数据库。例如，要使用名为 <code>mydatabase</code><br>的数据库，可以使用以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE mydatabase;</span><br></pre></td></tr></table></figure><p>在执行该命令后，所有后续的 SQL 语句都将在 <code>mydatabase</code> 数据库中执行。</p><blockquote><p>需要注意的是，如果要创建、删除、修改或打开数据库，需要有足够的权限才能执行这些操作。在<br>MySQL 中，通常使用授权命令（例如<br><code>GRANT</code>）来授予或撤销用户对数据库的权限。另外，还需要使用适当的 SQL<br>客户端（例如 <code>mysql</code> 命令行工具或者 MySQL Workbench）来执行这些 SQL<br>语句。</p></blockquote><h1 id="MySQL创建表"><a href="#MySQL创建表" class="headerlink" title="MySQL创建表"></a>MySQL创建表</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>以下是一个基本的 MySQL 创建表的 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">    column1 datatype constraints,</span><br><span class="line">    column2 datatype constraints,</span><br><span class="line">    column3 datatype constraints,</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (<span class="keyword">one</span> <span class="keyword">or</span> more columns)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在上面的 SQL 语句中，<code>table_name</code> 是要创建的表的名称，<code>column1</code>,<br><code>column2</code>, <code>column3</code> 等是表中的列名，<code>datatype</code><br>是该列的数据类型，<code>constraints</code> 是该列的约束条件（例如 NOT<br>NULL、UNIQUE、DEFAULT 等）。</p><p><code>PRIMARY KEY</code><br>是必需的，并且至少应指定一个列作为主键。主键用于唯一地标识表中的每个记录，因此它必须是唯一的并且不能为<br>NULL。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以下是一个更具体的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们创建了一个名为 <code>users</code> 的表，该表包含五个列：</p><ul><li><code>id</code>：整数类型的主键列，具有自动递增属性。</li><li><code>name</code>：长度为50个字符的字符串类型的列，不能为 NULL。</li><li><code>email</code>：长度为255个字符的字符串类型的列，不能为<br>NULL，且必须是唯一的。</li><li><code>password</code>：长度为255个字符的字符串类型的列，不能为 NULL。</li><li><code>created_at</code>：时间戳类型的列，使用 <code>CURRENT_TIMESTAMP</code> 作为默认值。</li></ul><blockquote><p>需要注意的是，数据类型和约束条件取决于具体的需求，可以根据需要进行修改。</p></blockquote><h1 id="MySQL插入数据"><a href="#MySQL插入数据" class="headerlink" title="MySQL插入数据"></a>MySQL插入数据</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>向 MySQL 数据库中插入数据可以使用 <code>INSERT INTO</code> 语句。下面是一个示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2, column3, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure><p>其中，<code>table_name</code> 是要插入数据的表名，<code>column1</code>, <code>column2</code>, <code>column3</code><br>等是表中的列名，<code>value1</code>, <code>value2</code>, <code>value3</code><br>等是要插入的值。需要注意的是，列名和对应的值必须匹配。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><h3 id="插入单条"><a href="#插入单条" class="headerlink" title="插入单条"></a>插入单条</h3><p>以下是一个示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email, password)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;tom@qq.com&#x27;</span>, <span class="string">&#x27;password123&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们向 <code>users</code> 表中插入了一条记录，包含 <code>name</code>, <code>email</code><br>和 <code>password</code><br>三个字段的值。需要注意的是，如果某个字段允许为空，则可以将其值设置为<br><code>NULL</code>。如果某个字段是自动递增的，则不需要在插入数据时指定该字段的值，MySQL<br>会自动分配。</p><h3 id="插入多条记录"><a href="#插入多条记录" class="headerlink" title="插入多条记录"></a>插入多条记录</h3><p>如果要同时插入多条记录，可以在 <code>VALUES</code><br>后面添加多个值组，用逗号分隔。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email, password)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;tom@qq.com&#x27;</span>, <span class="string">&#x27;password123&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;kite&#x27;</span>, <span class="string">&#x27;kite@qq.com&#x27;</span>, <span class="string">&#x27;password456&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;rose&#x27;</span>, <span class="string">&#x27;rose@qq.com&#x27;</span>, <span class="string">&#x27;password789&#x27;</span>);</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将向 <code>users</code> 表中插入三条记录。</p><blockquote><p>需要注意的是，向 MySQL<br>数据库中插入数据需要有足够的权限才能执行该操作。同时，也需要注意数据的合法性和完整性，以避免数据不一致或丢失的问题。</p></blockquote><h1 id="MySQL删除数据"><a href="#MySQL删除数据" class="headerlink" title="MySQL删除数据"></a>MySQL删除数据</h1><p>MySQL 中使用 <code>DELETE</code> 语句来删除数据。<code>DELETE</code><br>语句用于从表中删除数据，可以指定删除的行和条件。</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>下面是一个基本的 <code>DELETE</code> 语句的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>其中，<code>table_name</code> 是要删除数据的表名，<code>condition</code><br>是删除数据的条件。需要注意的是，如果没有指定条件，将会删除表中所有的数据。</p><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p>以下是一个示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们从 <code>users</code> 表中删除了 <code>id</code> 列的值为 <code>1</code> 的行。</p><blockquote><p>需要注意的是，删除操作是不可恢复的，所以在执行 <code>DELETE</code><br>语句之前一定要三思而后行。同时，也需要注意数据库中的关联关系和完整性约束，以避免数据不一致或丢失的问题。如果需要删除整个表，可以使用<br><code>DROP TABLE</code> 语句，但同样需要谨慎操作。</p></blockquote><h1 id="MySQL修改数据"><a href="#MySQL修改数据" class="headerlink" title="MySQL修改数据"></a>MySQL修改数据</h1><p>MySQL 中使用 <code>UPDATE</code> 语句来修改数据。<code>UPDATE</code><br>语句用于更新表中的数据，可以指定要更新的列和更新的条件。</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><p>下面是一个基本的 <code>UPDATE</code> 语句的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>其中，<code>table_name</code> 是要更新数据的表名，<code>column1</code>, <code>column2</code>, …<br>是要更新的列名，<code>value1</code>, <code>value2</code>, … 是要更新的值，<code>condition</code><br>是更新数据的条件。</p><h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><p>以下是一个示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users</span><br><span class="line"><span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;new-email@example.com&#x27;</span>, status <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们将 <code>users</code> 表中 <code>id</code> 列的值为 <code>1</code> 的行的 <code>email</code><br>列更新为 <code>new-email@example.com</code>，<code>status</code> 列更新为 <code>active</code>。</p><blockquote><p>需要注意的是，修改操作可能会影响到其他的数据和约束，需要谨慎操作。同时，也需要注意数据类型的匹配和长度限制，以避免数据被截断或溢出。</p></blockquote><h1 id="MySQL基本查询"><a href="#MySQL基本查询" class="headerlink" title="MySQL基本查询"></a>MySQL基本查询</h1><p>MySQL 中使用 <code>SELECT</code> 语句来查询数据。<code>SELECT</code><br>语句用于从表中检索数据，可以指定要检索的列、过滤条件、排序方式等。</p><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><p>下面是一个基本的 <code>SELECT</code> 语句的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], column2 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...;</span><br></pre></td></tr></table></figure><p>其中，<code>column1</code>, <code>column2</code>, … 是要检索的列名，可以使用通配符 <code>*</code><br>检索所有列。<code>table_name</code> 是要从中检索数据的表名。<code>condition</code><br>是查询条件，用于过滤数据，可以使用 <code>AND</code>、<code>OR</code>、<code>IN</code>、<code>BETWEEN</code><br>等操作符进行组合。<code>ORDER BY</code><br>子句用于指定检索结果的排序方式，可以按一个或多个列进行升序或降序排序。</p><h2 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h2><p>以下是一个示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, email</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%example.com&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> name <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们从 <code>users</code> 表中检索了 <code>name</code> 和 <code>email</code><br>两个列的数据，并按照 <code>name</code><br>列的升序方式排序。同时，我们指定了一个过滤条件，用于筛选出 <code>email</code> 列以<br><code>example.com</code> 结尾的记录。</p><blockquote><p>需要注意的是，查询结果可能会包含多条记录，需要使用适当的方式来处理这些数据，例如循环遍历或使用聚合函数。同时，也需要注意<br>SQL 注入等安全问题，确保输入的查询条件是安全的。</p></blockquote><h1 id="MySQL可视化客户端"><a href="#MySQL可视化客户端" class="headerlink" title="MySQL可视化客户端"></a>MySQL可视化客户端</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>MySQL 可视化客户端是一个图形化界面的工具，可以帮助用户更方便地管理和操作<br>MySQL 数据库。以下是一些常见的 MySQL 可视化客户端：</p><ol><li>MySQL Workbench：这是官方提供的 MySQL<br>数据库管理工具，支持数据建模、SQL<br>编辑和调试、数据备份和恢复等功能。MySQL Workbench 是跨平台的，可以在<br>Windows、Linux 和 macOS 等操作系统上使用。</li><li>Navicat for MySQL：这是一款商业的 MySQL<br>客户端，支持多种操作系统，并提供了丰富的功能，包括数据导入和导出、可视化查询构建器、数据同步、备份和恢复等。</li><li>HeidiSQL：这是一款免费的开源 MySQL 客户端，支持 Windows<br>平台。它提供了多种功能，包括数据导入和导出、SQL<br>编辑和执行、数据库对象管理等。</li><li>DBeaver：这是一款免费的开源数据库工具，支持多种数据库，包括<br>MySQL、PostgreSQL、SQLite 等。DBeaver<br>提供了丰富的功能，包括数据导入和导出、SQL 编辑和执行、数据可视化等。</li><li>phpMyAdmin：这是一款基于 Web 的 MySQL<br>客户端，可以通过浏览器访问。它提供了丰富的功能，包括数据导入和导出、SQL<br>编辑和执行、数据库对象管理等。phpMyAdmin 是免费的，可以在大多数 Web<br>服务器上使用。</li><li>SQLyog：是一款商业的 MySQL<br>可视化客户端，它提供了丰富的功能，包括数据管理、SQL<br>编辑和执行、数据同步、备份和恢复等。</li><li>DataGrid：（数据网格）是一种用于显示表格数据的控件，可以在网页中显示数据，并提供了许多有用的功能，如排序、筛选、分页等</li></ol><p>这些 MySQL<br>可视化客户端都有其优缺点，用户可以根据自己的需求和使用习惯选择适合自己的工具。</p><h2 id="DBeaver客户端的使用"><a href="#DBeaver客户端的使用" class="headerlink" title="DBeaver客户端的使用"></a>DBeaver客户端的使用</h2><p>DBeaver <code>/diː&#39;beɪvə(r)/</code><br>是一款免费的开源数据库管理工具，支持多种数据库（MySQL、PostgreSQL、Oracle、SQL<br>Server 等）的连接和管理，可以在 Windows、macOS、Linux<br>等平台上使用。以下是 DBeaver 的基本使用方法：</p><ol><li>下载并安装 DBeaver 客户端：可以从 DBeaver<br>的官方网站（<a href="https://dbeaver.io/download/%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%8C%E5%B9%B6%E6%8C%89%E7%85%A7%E6%8F%90%E7%A4%BA%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82">https://dbeaver.io/download/）下载对应平台的安装包，并按照提示进行安装。</a></li><li>新建数据库连接：启动 DBeaver<br>后，点击”新建连接”按钮，选择要连接的数据库类型（如<br>MySQL），输入连接信息（如主机名、端口、用户名、密码等），并测试连接是否成功。</li><li>执行 SQL 查询：在连接成功后，可以在 DBeaver 中打开 SQL 编辑器，输入<br>SQL 查询语句（如 SELECT、INSERT、UPDATE、DELETE<br>等），并执行查询，查看结果。</li><li>管理数据库对象：在 DBeaver<br>中，可以管理数据库中的各种对象，如表、视图、存储过程等。可以查看对象的结构、编辑对象的属性、复制对象等。</li><li>导入导出数据：在 DBeaver 中，可以将数据导出为 CSV、Excel、SQL<br>等格式，也可以将数据从文件或数据库中导入。</li><li>高级功能：DBeaver<br>还提供了一些高级功能，如数据比较、数据同步、查询优化器、安全管理等，可以根据需要使用。</li></ol><p>DBeaver<br>是一款功能强大的数据库管理工具，可以帮助开发者和管理员轻松地连接和管理多种数据库，提高工作效率和生产力。</p><h2 id="SQLyog客户端的使用"><a href="#SQLyog客户端的使用" class="headerlink" title="SQLyog客户端的使用"></a>SQLyog客户端的使用</h2><p>SQLyog是一个流行的MySQL管理工具，它支持Windows操作系统，以下是SQLyog在Windows下的下载和安装步骤：</p><ol><li>访问SQLyog官网（<a href="https://www.webyog.com/product/sqlyog%EF%BC%89%E3%80%82">https://www.webyog.com/product/sqlyog）。</a></li><li>单击”下载”按钮以下载安装程序。</li><li>运行下载的安装程序。</li><li>点击”下一步”按钮，阅读许可协议，然后勾选同意协议。</li><li>选择要安装的组件，可以选择”SQLyog Community Edition”或”SQLyog<br>Ultimate”。</li><li>指定安装位置并点击”下一步”按钮。</li><li>选择开始菜单文件夹并单击”下一步”。</li><li>选择桌面图标选项并单击”下一步”。</li><li>点击”安装”按钮，等待安装完成。</li><li>点击”完成”按钮，启动SQLyog。</li></ol><p>安装完成后，您可以通过双击SQLyog桌面图标来启动它。</p><h1 id="SQL语句的分类"><a href="#SQL语句的分类" class="headerlink" title="SQL语句的分类"></a>SQL语句的分类</h1><h2 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h2><p>SQL（Structured Query<br>Language，结构化查询语言）是一种用于关系数据库管理系统的标准化查询语言，主要用于数据库中数据的增删改查、表的创建与删除、表之间的关联和约束等方面。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>根据 SQL 语句的作用和用途，可以将 SQL 分为以下几类：</p><ol><li>数据定义语言（Data Definition<br>Language，DDL）：用于创建、修改和删除数据库、表、视图、索引、触发器等数据库对象。常用的<br>DDL 语句包括：CREATE、ALTER 和 DROP 等。</li><li>数据操作语言（Data Manipulation<br>Language，DML）：用于向数据库中的表中添加、修改或删除数据。常用的<br>DML 语句包括：SELECT、INSERT、UPDATE 和 DELETE 等。</li><li>数据查询语言（Data Query<br>Language，DQL）：用于查询数据库中的数据，一般用于从一个或多个表中获取特定的数据集。DQL<br>语句中最常用的就是 SELECT 语句，它可以通过 WHERE 子句和 JOIN<br>操作等方式查询出符合条件的数据。</li><li>数据控制语言（Data Control<br>Language，DCL）：用于管理数据库用户和权限，可以对数据库用户进行授权或限制其访问权限。常用的<br>DCL 语句包括：GRANT 和 REVOKE 等。</li><li>事务控制语言（Transaction Control<br>Language，TCL）：用于管理数据库中的事务，包括事务的开始、提交和回滚等操作。常用的<br>TCL 语句包括：COMMIT、ROLLBACK 和 SAVEPOINT 等。</li><li>数据库管理语言（Database Administration<br>Language，DAL）：用于管理数据库的结构和组件，包括备份和恢复数据库、数据压缩和加密、数据库复制等。常用的<br>DAL 语句包括：BACKUP、RESTORE 和 DBCC 等。</li></ol><h1 id="MySQL的DDL"><a href="#MySQL的DDL" class="headerlink" title="MySQL的DDL"></a>MySQL的DDL</h1><p>MySQL 的 DDL（Data Definition<br>Language）是用于定义数据库、表、列、索引等数据库对象的语言。DDL<br>语句可以实现数据库的创建、修改和删除等操作，具体包括以下语句：</p><ol><li>创建数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE database_name;</span><br></pre></td></tr></table></figure><ol><li>删除数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE database_name;</span><br></pre></td></tr></table></figure><ol><li>创建表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">   column1 datatype,</span><br><span class="line">   column2 datatype,</span><br><span class="line">   column3 datatype,</span><br><span class="line">   .....</span><br><span class="line">   columnN datatype,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (<span class="keyword">one</span> <span class="keyword">or</span> more columns)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li>修改表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> column_name datatype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name MODIFY column_name datatype;</span><br></pre></td></tr></table></figure><ol><li>删除表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure><ol><li>创建索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_name <span class="keyword">ON</span> table_name (column_name);</span><br></pre></td></tr></table></figure><ol><li>删除索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name;</span><br></pre></td></tr></table></figure><blockquote><p>这些 DDL 语句可以通过 MySQL 命令行客户端或图形化客户端（如 MySQL<br>Workbench）等工具执行。在执行 DDL<br>语句时，需要注意语法的正确性，避免错误操作导致数据库结构的损坏。同时，DDL<br>操作具有较高的权限，应该谨慎使用。</p></blockquote><h1 id="MySQL的数据类型"><a href="#MySQL的数据类型" class="headerlink" title="MySQL的数据类型"></a>MySQL的数据类型</h1><p>MySQL<br>支持多种数据类型，包括数值型、字符串型、日期时间型、二进制型等。以下是<br>MySQL 常见的数据类型：</p><ol><li>数值型</li></ol><ul><li>TINYINT</li><li>SMALLINT</li><li>MEDIUMINT</li><li>INT</li><li>BIGINT</li><li>FLOAT</li><li>DOUBLE</li><li>DECIMAL</li></ul><ol><li>字符串型</li></ol><ul><li>CHAR</li><li>VARCHAR</li><li>TINYTEXT</li><li>TEXT</li><li>MEDIUMTEXT</li><li>LONGTEXT</li><li>ENUM</li><li>SET</li></ul><ol><li>日期时间型</li></ol><ul><li>DATE</li><li>TIME</li><li>YEAR</li><li>DATETIME</li><li>TIMESTAMP</li></ul><ol><li>二进制型</li></ol><ul><li>BINARY</li><li>VARBINARY</li><li>TINYBLOB</li><li>BLOB</li><li>MEDIUMBLOB</li><li>LONGBLOB</li></ul><p>数据类型的选择应该根据存储的数据类型和范围来确定。例如，对于存储性别的字段，可以使用<br>ENUM<br>类型，因为该字段的取值范围较小，只有男、女两个取值。对于存储长文本的字段，应该使用<br>LONGTEXT 类型，而不是 TEXT 类型，以支持更大的文本内容。</p><h2 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h2><p>以下是一个创建 MySQL 表的示例，包含了常见的数据类型：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employees` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `salary` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `hire_date` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `photo` <span class="type">blob</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>在这个表中，我们定义了以下字段：</p><ul><li><code>id</code>: 整数型，主键，自动增长</li><li><code>name</code>: 字符串型，最大长度为 50</li><li><code>age</code>: 整数型，最大长度为 4</li><li><code>email</code>: 字符串型，最大长度为 100</li><li><code>salary</code>: 十进制型，总长度为 10，小数部分长度为 2</li><li><code>hire_date</code>: 日期型</li><li><code>photo</code>: 二进制型，用于存储员工照片</li></ul><blockquote><p>这只是一个示例，根据实际需求，数据类型和字段定义可以有所不同。在创建表时，需要注意表的命名、字段名的命名、数据类型的选择等，以便确保表结构的规范性和易于维护性。</p></blockquote><h1 id="MySQL-DML"><a href="#MySQL-DML" class="headerlink" title="MySQL DML"></a>MySQL DML</h1><p>DML 是 MySQL 中的一种语言，用于操作表中的数据，包括<br>SELECT、INSERT、UPDATE 和 DELETE 四种操作。以下是 DML 的一些示例：</p><ol><li>SELECT</li></ol><p>SELECT 语句用于从表中检索数据。可以使用 WHERE 子句指定条件，也可以使用<br>ORDER BY 子句排序结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ol><li>INSERT</li></ol><p>INSERT<br>语句用于向表中插入新数据。需要指定表名和要插入的数据。如果要插入多行数据，可以使用<br>VALUES 关键字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, age, email, salary, hire_date) <span class="keyword">VALUES</span> (<span class="string">&#x27;Tom&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;tom@example.com&#x27;</span>, <span class="number">5000.00</span>, <span class="string">&#x27;2022-02-18&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li>UPDATE</li></ol><p>UPDATE 语句用于更新表中的数据。需要指定表名、要更新的字段和新的值，以及<br>WHERE 子句指定更新的条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">6000.00</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ol><li>DELETE</li></ol><p>DELETE 语句用于从表中删除数据。需要指定表名和 WHERE<br>子句指定要删除的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在使用 DML 语句时，需要小心使用 WHERE<br>子句和其他限制条件，以免意外删除或修改数据。另外，需要注意语句的性能和执行效率，避免对数据库造成不必要的负担。</p></blockquote><h1 id="MySQL-DQL"><a href="#MySQL-DQL" class="headerlink" title="MySQL DQL"></a>MySQL DQL</h1><p>DQL（Data Query Language）是 MySQL<br>中的一种语言，用于从表中检索数据。其中最常见的是 SELECT 语句，以下是<br>SELECT 语句的一些示例：</p><p><strong>准备数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  salary <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, email, age, salary)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;John Smith&#x27;</span>, <span class="string">&#x27;john.smith@example.com&#x27;</span>, <span class="number">28</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Jane Doe&#x27;</span>, <span class="string">&#x27;jane.doe@example.com&#x27;</span>, <span class="number">35</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Bob Johnson&#x27;</span>, <span class="string">&#x27;bob.johnson@example.com&#x27;</span>, <span class="number">42</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Mary Williams&#x27;</span>, <span class="string">&#x27;mary.williams@example.com&#x27;</span>, <span class="number">23</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;David Brown&#x27;</span>, <span class="string">&#x27;david.brown@example.com&#x27;</span>, <span class="number">31</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Sarah Davis&#x27;</span>, <span class="string">&#x27;sarah.davis@example.com&#x27;</span>, <span class="number">46</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Paul Wilson&#x27;</span>, <span class="string">&#x27;paul.wilson@example.com&#x27;</span>, <span class="number">29</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Lisa Jackson&#x27;</span>, <span class="string">&#x27;lisa.jackson@example.com&#x27;</span>, <span class="number">38</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Michael Lee&#x27;</span>, <span class="string">&#x27;michael.lee@example.com&#x27;</span>, <span class="number">27</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Jennifer Perez&#x27;</span>, <span class="string">&#x27;jennifer.perez@example.com&#x27;</span>, <span class="number">33</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;James Garcia&#x27;</span>, <span class="string">&#x27;james.garcia@example.com&#x27;</span>, <span class="number">44</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Elizabeth Rodriguez&#x27;</span>, <span class="string">&#x27;elizabeth.rodriguez@example.com&#x27;</span>, <span class="number">25</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Charles Hernandez&#x27;</span>, <span class="string">&#x27;charles.hernandez@example.com&#x27;</span>, <span class="number">39</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Jessica King&#x27;</span>, <span class="string">&#x27;jessica.king@example.com&#x27;</span>, <span class="number">30</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Anthony Wright&#x27;</span>, <span class="string">&#x27;anthony.wright@example.com&#x27;</span>, <span class="number">36</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Melissa Scott&#x27;</span>, <span class="string">&#x27;melissa.scott@example.com&#x27;</span>, <span class="number">41</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Kevin Green&#x27;</span>, <span class="string">&#x27;kevin.green@example.com&#x27;</span>, <span class="number">26</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Amanda Baker&#x27;</span>, <span class="string">&#x27;amanda.baker@example.com&#x27;</span>, <span class="number">37</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Richard Adams&#x27;</span>, <span class="string">&#x27;richard.adams@example.com&#x27;</span>, <span class="number">32</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Christina Carter&#x27;</span>, <span class="string">&#x27;christina.carter@example.com&#x27;</span>, <span class="number">43</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Daniel Lewis&#x27;</span>, <span class="string">&#x27;daniel.lewis@example.com&#x27;</span>, <span class="number">34</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>));</span><br></pre></td></tr></table></figure><ol><li>SELECT 所有列</li></ol><p>SELECT * 语句用于检索表中的所有列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ol><li>SELECT 指定列</li></ol><p>可以使用 SELECT 语句选择表中的指定列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, email <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ol><li>使用 WHERE 子句</li></ol><p>WHERE 子句用于过滤检索结果。可以根据多个条件过滤数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, email <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">AND</span> salary <span class="operator">&gt;</span> <span class="number">5000.00</span>;</span><br></pre></td></tr></table></figure><ol><li>使用 ORDER BY 子句</li></ol><p>ORDER BY 子句用于按指定列对结果进行排序，可以按升序或降序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, email, salary <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ol><li>使用 LIMIT 子句</li></ol><p>LIMIT 子句用于限制检索结果的数量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, email, salary <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>DQL 还有许多其他功能，例如使用 GROUP BY 和 HAVING 子句进行分组、使用<br>JOIN 子句连接多个表等等。在使用 DQL<br>语句时，需要注意语句的性能和效率，避免对数据库造成不必要的负担。</p><h1 id="MySQL条件查询where子句"><a href="#MySQL条件查询where子句" class="headerlink" title="MySQL条件查询where子句"></a>MySQL条件查询where子句</h1><p>在 MySQL 中，WHERE 子句用于从表中选择满足条件的数据。以下是一些示例：</p><p><strong>准备数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  salary <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, email, age, salary)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;John Smith&#x27;</span>, <span class="string">&#x27;john.smith@example.com&#x27;</span>, <span class="number">28</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Jane Doe&#x27;</span>, <span class="string">&#x27;jane.doe@example.com&#x27;</span>, <span class="number">35</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Bob Johnson&#x27;</span>, <span class="string">&#x27;bob.johnson@example.com&#x27;</span>, <span class="number">42</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Mary Williams&#x27;</span>, <span class="string">&#x27;mary.williams@example.com&#x27;</span>, <span class="number">23</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;David Brown&#x27;</span>, <span class="string">&#x27;david.brown@example.com&#x27;</span>, <span class="number">31</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Sarah Davis&#x27;</span>, <span class="string">&#x27;sarah.davis@example.com&#x27;</span>, <span class="number">46</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Paul Wilson&#x27;</span>, <span class="string">&#x27;paul.wilson@example.com&#x27;</span>, <span class="number">29</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Lisa Jackson&#x27;</span>, <span class="string">&#x27;lisa.jackson@example.com&#x27;</span>, <span class="number">38</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Michael Lee&#x27;</span>, <span class="string">&#x27;michael.lee@example.com&#x27;</span>, <span class="number">27</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Jennifer Perez&#x27;</span>, <span class="string">&#x27;jennifer.perez@example.com&#x27;</span>, <span class="number">33</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;James Garcia&#x27;</span>, <span class="string">&#x27;james.garcia@example.com&#x27;</span>, <span class="number">44</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Elizabeth Rodriguez&#x27;</span>, <span class="string">&#x27;elizabeth.rodriguez@example.com&#x27;</span>, <span class="number">25</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Charles Hernandez&#x27;</span>, <span class="string">&#x27;charles.hernandez@example.com&#x27;</span>, <span class="number">39</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Jessica King&#x27;</span>, <span class="string">&#x27;jessica.king@example.com&#x27;</span>, <span class="number">30</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Anthony Wright&#x27;</span>, <span class="string">&#x27;anthony.wright@example.com&#x27;</span>, <span class="number">36</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Melissa Scott&#x27;</span>, <span class="string">&#x27;melissa.scott@example.com&#x27;</span>, <span class="number">41</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Kevin Green&#x27;</span>, <span class="string">&#x27;kevin.green@example.com&#x27;</span>, <span class="number">26</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Amanda Baker&#x27;</span>, <span class="string">&#x27;amanda.baker@example.com&#x27;</span>, <span class="number">37</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Richard Adams&#x27;</span>, <span class="string">&#x27;richard.adams@example.com&#x27;</span>, <span class="number">32</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Christina Carter&#x27;</span>, <span class="string">&#x27;christina.carter@example.com&#x27;</span>, <span class="number">43</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>)),</span><br><span class="line">  (<span class="string">&#x27;Daniel Lewis&#x27;</span>, <span class="string">&#x27;daniel.lewis@example.com&#x27;</span>, <span class="number">34</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>));</span><br></pre></td></tr></table></figure><ol><li>基本用法</li></ol><p>WHERE 子句可以与 SELECT 语句一起使用，以便从表中检索指定条件的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><p>以上示例将返回所有薪水高于 5000 的员工的信息。</p><ol><li>AND 和 OR 运算符</li></ol><p>WHERE 子句可以使用 AND 和 OR 运算符来检索满足多个条件的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">AND</span> salary <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">OR</span> salary <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><p>以上示例将返回所有年龄大于 30 岁且薪水高于 5000<br>的员工的信息，或者返回所有年龄大于 30 岁或薪水高于 5000 的员工的信息。</p><ol><li>IN 运算符</li></ol><p>IN 运算符用于从表中检索符合指定值列表的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="keyword">IN</span> (<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>);</span><br></pre></td></tr></table></figure><p>以上示例将返回所有年龄为 25、30 或 35 的员工的信息。</p><ol><li>BETWEEN 运算符</li></ol><p>BETWEEN 运算符用于从表中检索在指定范围内的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">5000</span> <span class="keyword">AND</span> <span class="number">8000</span>;</span><br></pre></td></tr></table></figure><p>以上示例将返回所有薪水在 5000 到 8000 之间的员工的信息。</p><ol><li>LIKE 运算符</li></ol><p>LIKE 运算符用于从表中检索与指定模式匹配的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;Tom%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上示例将返回所有名字以 “Tom” 开头的员工的信息。</p><blockquote><p>WHERE 子句还有许多其他功能，例如使用 IS NULL 和 IS NOT NULL<br>来检索空值和非空值，使用通配符进行模糊匹配等等。在使用 WHERE<br>子句时，需要注意语句的性能和效率，避免对数据库造成不必要的负担。</p></blockquote><h1 id="MySQL查询like"><a href="#MySQL查询like" class="headerlink" title="MySQL查询like"></a>MySQL查询like</h1><p>在 MySQL 中，LIKE<br>运算符用于模糊查询满足指定模式的数据，通常用于字符串类型的字段。</p><p>LIKE 运算符可以与通配符一起使用，通配符用于指定要匹配的模式。MySQL<br>中常用的通配符有两种：</p><ol><li>百分号（%）：表示任意字符，包括 0 个字符。</li><li>下划线（_）：表示任意单个字符。</li></ol><p>以下是一些示例：</p><ol><li>匹配以指定字符开头的字符串</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;Tom%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上示例将返回所有名字以 “Tom” 开头的员工的信息。</p><ol><li>匹配以指定字符结尾的字符串</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%son&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上示例将返回所有名字以 “son” 结尾的员工的信息。</p><ol><li>匹配包含指定字符的字符串</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%Tom%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上示例将返回所有名字中包含 “Tom” 的员工的信息。</p><ol><li>匹配指定长度的字符串</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;___&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上示例将返回所有名字长度为 3 的员工的信息。</p><blockquote><p>需要注意的是，使用 LIKE<br>运算符进行模糊查询可能会影响查询性能，特别是在处理大量数据时。因此，在使用<br>LIKE 运算符时，应尽量减少使用通配符，以提高查询效率。</p></blockquote><h2 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h2><p>以下是创建一个包含一些员工姓名的示例表<br><code>employees</code>，并向其中插入一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;Tom Smith&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Peter Johnson&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;John Doe&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Alice Thompson&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Sara Williams&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Mark Brown&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Bob Lee&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在我们可以使用 <code>LIKE</code> 运算符来查询表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询以 &quot;Tom&quot; 开头的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;Tom%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中包含 &quot;Williams&quot; 的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%Williams%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字以 &quot;son&quot; 结尾的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%son&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字长度为 8 的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;________&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上查询将分别返回满足条件的数据。需要注意的是，使用通配符的查询可能会导致性能问题，因此应尽量避免过度使用通配符。</p><h1 id="MySQL聚合函数"><a href="#MySQL聚合函数" class="headerlink" title="MySQL聚合函数"></a>MySQL聚合函数</h1><pre><code>CREATE TABLE employees (  id INT PRIMARY KEY AUTO_INCREMENT,  name VARCHAR(50) NOT NULL,  email VARCHAR(50) NOT NULL,  age INT NOT NULL,  salary INT NOT NULL);INSERT INTO employees (name, email, age, salary)VALUES  (&#39;John Smith&#39;, &#39;john.smith@example.com&#39;, 28, FLOOR(RAND() * 10000)),  (&#39;Jane Doe&#39;, &#39;jane.doe@example.com&#39;, 35, FLOOR(RAND() * 10000)),  (&#39;Bob Johnson&#39;, &#39;bob.johnson@example.com&#39;, 42, FLOOR(RAND() * 10000)),  (&#39;Mary Williams&#39;, &#39;mary.williams@example.com&#39;, 23, FLOOR(RAND() * 10000)),  (&#39;David Brown&#39;, &#39;david.brown@example.com&#39;, 31, FLOOR(RAND() * 10000)),  (&#39;Sarah Davis&#39;, &#39;sarah.davis@example.com&#39;, 46, FLOOR(RAND() * 10000)),  (&#39;Paul Wilson&#39;, &#39;paul.wilson@example.com&#39;, 29, FLOOR(RAND() * 10000)),  (&#39;Lisa Jackson&#39;, &#39;lisa.jackson@example.com&#39;, 38, FLOOR(RAND() * 10000)),  (&#39;Michael Lee&#39;, &#39;michael.lee@example.com&#39;, 27, FLOOR(RAND() * 10000)),  (&#39;Jennifer Perez&#39;, &#39;jennifer.perez@example.com&#39;, 33, FLOOR(RAND() * 10000)),  (&#39;James Garcia&#39;, &#39;james.garcia@example.com&#39;, 44, FLOOR(RAND() * 10000)),  (&#39;Elizabeth Rodriguez&#39;, &#39;elizabeth.rodriguez@example.com&#39;, 25, FLOOR(RAND() * 10000)),  (&#39;Charles Hernandez&#39;, &#39;charles.hernandez@example.com&#39;, 39, FLOOR(RAND() * 10000)),  (&#39;Jessica King&#39;, &#39;jessica.king@example.com&#39;, 30, FLOOR(RAND() * 10000)),  (&#39;Anthony Wright&#39;, &#39;anthony.wright@example.com&#39;, 36, FLOOR(RAND() * 10000)),  (&#39;Melissa Scott&#39;, &#39;melissa.scott@example.com&#39;, 41, FLOOR(RAND() * 10000)),  (&#39;Kevin Green&#39;, &#39;kevin.green@example.com&#39;, 26, FLOOR(RAND() * 10000)),  (&#39;Amanda Baker&#39;, &#39;amanda.baker@example.com&#39;, 37, FLOOR(RAND() * 10000)),  (&#39;Richard Adams&#39;, &#39;richard.adams@example.com&#39;, 32, FLOOR(RAND() * 10000)),  (&#39;Christina Carter&#39;, &#39;christina.carter@example.com&#39;, 43, FLOOR(RAND() * 10000)),  (&#39;Daniel Lewis&#39;, &#39;daniel.lewis@example.com&#39;, 34, FLOOR(RAND() * 10000));</code></pre><p>在 MySQL<br>中，聚合函数用于在查询中对一组数据进行计算并返回单个结果。下面是 MySQL<br>支持的一些常见聚合函数：</p><ul><li><code>COUNT()</code>：计算行数或非空值的数量。</li><li><code>SUM()</code>：计算数值列的总和。</li><li><code>AVG()</code>：计算数值列的平均值。</li><li><code>MAX()</code>：返回数值列中的最大值。</li><li><code>MIN()</code>：返回数值列中的最小值。</li></ul><p>下面是一些使用聚合函数的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算 employees 表中员工的总数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算 employees 表中薪水的总和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算 employees 表中薪水的平均值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找到 employees 表中薪水最高的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> employees);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找到 employees 表中薪水最低的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，聚合函数通常是与 <code>GROUP BY</code><br>子句一起使用的，以对每个分组计算结果。例如，以下查询将返回每个部门的员工数量：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department;</span><br></pre></td></tr></table></figure><h1 id="MySQL分组查询"><a href="#MySQL分组查询" class="headerlink" title="MySQL分组查询"></a>MySQL分组查询</h1><p>在 MySQL 中，<code>GROUP BY</code><br>子句用于将结果集按照一个或多个列进行分组，并对每个分组应用一个聚合函数，从而计算每个分组的汇总信息。</p><p>以下是一个使用 <code>GROUP BY</code> 的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department, <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department;</span><br></pre></td></tr></table></figure><p>该查询将返回每个部门的平均工资。<code>GROUP BY</code> 子句按照 <code>department</code><br>列进行分组，然后对每个分组使用 <code>AVG()</code> 聚合函数计算平均工资。</p><blockquote><p>需要注意的是，<code>GROUP BY</code> 子句必须出现在 <code>SELECT</code><br>语句中的聚合函数之后，而且查询中不能使用未在 <code>GROUP BY</code><br>子句或聚合函数中的列。如果需要对分组进行过滤，可以使用 <code>HAVING</code> 子句。</p></blockquote><p>以下是一个带有 <code>HAVING</code> 子句的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department, <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><p>该查询将返回平均工资大于 5000 的部门，<code>HAVING</code> 子句使用了 <code>AVG()</code><br>聚合函数。</p><h2 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h2><p>以下是一个创建员工表的示例 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  department <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  salary <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>接下来，我们可以使用以下 SQL 语句向员工表中插入一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, department, salary) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Marketing&#x27;</span>, <span class="number">5000.00</span>),</span><br><span class="line">  (<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Marketing&#x27;</span>, <span class="number">6000.00</span>),</span><br><span class="line">  (<span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>, <span class="number">4500.00</span>),</span><br><span class="line">  (<span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>, <span class="number">5500.00</span>),</span><br><span class="line">  (<span class="string">&#x27;Eve&#x27;</span>, <span class="string">&#x27;Engineering&#x27;</span>, <span class="number">7000.00</span>),</span><br><span class="line">  (<span class="string">&#x27;Frank&#x27;</span>, <span class="string">&#x27;Engineering&#x27;</span>, <span class="number">8000.00</span>);</span><br></pre></td></tr></table></figure><p>这样就有了一些示例数据，可以用来测试分组查询。例如，我们可以使用以下 SQL<br>语句计算每个部门的平均工资：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department, <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> department, <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><p>运行该查询后，将会得到以下结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> department  <span class="operator">|</span> <span class="built_in">AVG</span>(salary) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> Engineering <span class="operator">|</span> <span class="number">7500.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Marketing   <span class="operator">|</span> <span class="number">5500.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sales       <span class="operator">|</span> <span class="number">5000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+</span></span><br></pre></td></tr></table></figure><h1 id="MySQL子查询"><a href="#MySQL子查询" class="headerlink" title="MySQL子查询"></a>MySQL子查询</h1><p>MySQL 子查询是指一个 SQL 语句中嵌入另一个 SQL 语句，这个嵌入的 SQL<br>语句称为子查询，它用来为主查询提供数据。</p><p>子查询可以嵌套到 SELECT、FROM、WHERE<br>等子句中，以便从嵌套的子查询中获取数据，然后将其传递给主查询。</p><p>下面是一个使用子查询的示例，它使用子查询查找工资高于平均工资的员工：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><p>在上面的示例中，子查询 <code>(SELECT AVG(salary) FROM employees)</code><br>返回了员工表中所有员工的平均工资，主查询则选择了工资高于平均工资的员工，并返回了这些员工的姓名和工资。</p><p>子查询可以使用各种运算符和函数，例如 EXISTS、IN、ANY、ALL、MAX、MIN<br>等等，以及联合查询、交叉查询等高级查询技术，可以极大地扩展 SQL<br>查询的功能和灵活性。</p><h2 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h2><p>我们可以使用以下语句来创建一个示例表 <code>students</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  grade <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id, name, age, grade)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;David&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;Ella&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">       (<span class="number">6</span>, <span class="string">&#x27;Frank&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;C&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这个表包含了学生的<br>ID、姓名、年龄和等级信息。我们可以使用子查询来查找年龄最大的学生：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(age) <span class="keyword">FROM</span> students);</span><br></pre></td></tr></table></figure><p>这个查询会返回年龄最大的学生的姓名和年龄。子查询<br><code>(SELECT MAX(age) FROM students)</code> 返回了 <code>students</code><br>表中所有学生的最大年龄，主查询则选择了年龄等于这个最大值的学生，并返回了这些学生的姓名和年龄。</p><h1 id="MySQL联合查询"><a href="#MySQL联合查询" class="headerlink" title="MySQL联合查询"></a>MySQL联合查询</h1><p>MySQL 中的联合查询是指将多个 <code>SELECT</code><br>查询语句的结果组合在一起，形成一个新的结果集。联合查询通常用于需要合并多个数据源的情况，或者需要从不同的表中检索相关数据的情况。</p><p>联合查询使用 <code>UNION</code> 关键字连接多个 <code>SELECT</code> 查询语句。联合查询要求每个<br><code>SELECT</code><br>查询语句返回相同数量和类型的列，列的顺序也必须相同。例如，假设有两个表<br><code>table1</code> 和 <code>table2</code>，它们包含相同数量和类型的列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2, col3 <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> col1, col2, col3 <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><p>这个联合查询会将 <code>table1</code> 和 <code>table2</code><br>的查询结果合并在一起，生成一个新的结果集。如果 <code>table1</code> 和 <code>table2</code><br>中有相同的行，联合查询会自动去除重复的行。如果需要包括所有行（包括重复的行），可以使用<br><code>UNION ALL</code> 关键字。</p><p>需要注意的是，联合查询的每个 <code>SELECT</code> 查询语句可以包含任意的 <code>SELECT</code><br>子句、<code>WHERE</code> 子句、<code>GROUP BY</code> 子句、<code>HAVING</code> 子句和 <code>ORDER BY</code><br>子句。例如，可以在联合查询中使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> col3 <span class="operator">&gt;</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> col3 <span class="operator">&gt;</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>这个联合查询会先从 <code>table1</code> 和 <code>table2</code> 中选择所有 <code>col3</code> 大于 10<br>的行，然后将它们合并在一起，并按照 <code>col1</code> 的升序排列结果集。</p><h2 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h2><p>假设有两个表 <code>employees</code> 和 <code>customers</code>，它们包含以下数据：</p><p>employees 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    emp_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    department <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    salary <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (emp_id, first_name, last_name, department, salary) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Doe&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>, <span class="number">5000</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Jane&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;HR&#x27;</span>, <span class="number">6000</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Lee&#x27;</span>, <span class="string">&#x27;IT&#x27;</span>, <span class="number">5500</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;Johnson&#x27;</span>, <span class="string">&#x27;Finance&#x27;</span>, <span class="number">7000</span>);</span><br></pre></td></tr></table></figure><p>customers 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">    cust_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (cust_id, first_name, last_name, email, phone) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Cooper&#x27;</span>, <span class="string">&#x27;alice.cooper@example.com&#x27;</span>, <span class="string">&#x27;555-123-4567&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Dylan&#x27;</span>, <span class="string">&#x27;bob.dylan@example.com&#x27;</span>, <span class="string">&#x27;555-234-5678&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;Parker&#x27;</span>, <span class="string">&#x27;charlie.parker@example.com&#x27;</span>, <span class="string">&#x27;555-345-6789&#x27;</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;Dave&#x27;</span>, <span class="string">&#x27;Matthews&#x27;</span>, <span class="string">&#x27;dave.matthews@example.com&#x27;</span>, <span class="string">&#x27;555-456-7890&#x27;</span>);</span><br></pre></td></tr></table></figure><p>可以使用联合查询将这两个表中的数据合并在一起。例如，可以使用以下 SQL<br>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_id, first_name, last_name, department, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_id, first_name, last_name, <span class="keyword">NULL</span> <span class="keyword">AS</span> department, <span class="keyword">NULL</span> <span class="keyword">AS</span> salary</span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure><p>这个联合查询将 <code>employees</code> 和 <code>customers</code><br>表的查询结果合并在一起，生成一个新的结果集。如果 <code>employees</code> 和<br><code>customers</code><br>中有相同的行，联合查询会自动去除重复的行。如果需要包括所有行（包括重复的行），可以使用<br><code>UNION ALL</code> 关键字。</p><p>在上述查询中，<code>customers</code> 表没有部门和薪水信息，因此使用 <code>NULL</code><br>值填充这两列。结果集如下：</p><p>  emp_id   first_name   last_name   department   salary</p><hr><p>  1        John         Doe         Sales        5000<br>  2        Jane         Smith       HR           6000<br>  3        David        Lee         IT           5500<br>  4        Mary         Johnson     Finance      7000<br>  1        Alice        Cooper      NULL         NULL<br>  2        Bob          Dylan       NULL         NULL<br>  3        Charlie      Parker      NULL         NULL<br>  4        Dave         Matthews    NULL         NULL</p><h1 id="MySQL连接查询-左连接"><a href="#MySQL连接查询-左连接" class="headerlink" title="MySQL连接查询-左连接"></a>MySQL连接查询-左连接</h1><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>在MySQL中，连接查询（join）是一种通过将两个或多个表中的行组合在一起的查询方式。连接查询可以帮助我们从多个表中获取数据，使我们能够更有效地组织和分析数据。</p><p>MySQL支持不同类型的连接查询，包括内连接（inner join）、左连接（left<br>join）、右连接（right join）和全外连接（full outer<br>join）。这些不同的连接方式会返回不同的数据集，可以根据需求选择不同的连接方式。</p><h2 id="左连接查询"><a href="#左连接查询" class="headerlink" title="左连接查询"></a>左连接查询</h2><p>在MySQL中，左连接（left<br>join）是一种查询两个或多个表的方式，它返回左边表中的所有行，并且返回右边表中与左边表中的行匹配的行。如果右表中没有与左表中的行匹配的行，则返回NULL值。</p><p>下面是一个使用左连接的示例查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure><p>在这个查询中，表1是左表，表2是右表。它会返回表1中的所有行，即使没有与表2中的行匹配的行。如果表2中没有与表1中的行匹配的行，则返回NULL值。</p><p>请注意，左连接可以用来查找一个表中的所有行，即使在另一个表中没有匹配的行。这对于查找不完整的数据非常有用，或者需要获取所有的数据而不是仅仅匹配的数据。</p><h2 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h2><p>为了验证MySQL的左连接查询，我们需要先准备一些数据，并创建两个表。假设我们有两个表，一个是顾客表（customers），另一个是订单表（orders）。我们可以使用以下的SQL语句创建这两个表，并初始化一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">    customer_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    product_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    quantity <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (customer_id, name, email)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John Smith&#x27;</span>, <span class="string">&#x27;john.smith@example.com&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Jane Doe&#x27;</span>, <span class="string">&#x27;jane.doe@example.com&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Bob Johnson&#x27;</span>, <span class="string">&#x27;bob.johnson@example.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (order_id, customer_id, product_name, quantity)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;Product A&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;Product B&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Product C&#x27;</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><hr><p>  customer_id   name      email</p><hr><p>  1             John      <a href="mailto:&#x6a;&#x6f;&#x68;&#x6e;&#46;&#x73;&#x6d;&#105;&#116;&#104;&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;">&#x6a;&#x6f;&#x68;&#x6e;&#46;&#x73;&#x6d;&#105;&#116;&#104;&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;</a><br>                Smith     </p><p>  2             Jane Doe  <a href="mailto:&#x6a;&#x61;&#x6e;&#101;&#x2e;&#100;&#111;&#101;&#x40;&#x65;&#x78;&#97;&#109;&#112;&#108;&#101;&#46;&#99;&#111;&#x6d;">&#x6a;&#x61;&#x6e;&#101;&#x2e;&#100;&#111;&#101;&#x40;&#x65;&#x78;&#97;&#109;&#112;&#108;&#101;&#46;&#99;&#111;&#x6d;</a></p><h2 id="3-Bob-x62-x6f-x62-x2e-x6a-111-104-110-115-111-110-x40-101-x78-x61-109-x70-x6c-101-46-x63-x6f-109-Johnson"><a href="#3-Bob-x62-x6f-x62-x2e-x6a-111-104-110-115-111-110-x40-101-x78-x61-109-x70-x6c-101-46-x63-x6f-109-Johnson" class="headerlink" title="  3             Bob       &#x62;&#x6f;&#x62;&#x2e;&#x6a;&#111;&#104;&#110;&#115;&#111;&#110;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;                Johnson   "></a>  3             Bob       <a href="mailto:&#x62;&#x6f;&#x62;&#x2e;&#x6a;&#111;&#104;&#110;&#115;&#111;&#110;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;">&#x62;&#x6f;&#x62;&#x2e;&#x6a;&#111;&#104;&#110;&#115;&#111;&#110;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a><br>                Johnson   </h2><p>  order_id   customer_id   product_name   quantity</p><hr><p>  1          1             Product A      2<br>  2          2             Product B      1<br>  3          1             Product C      4</p><p>以上SQL语句创建了两个表，并插入了一些示例数据。现在我们可以使用左连接查询来查找每个客户及其订单，即使客户没有订单也可以显示出来。以下是使用左连接的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.name, orders.product_name, orders.quantity</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> customers.customer_id <span class="operator">=</span> orders.customer_id;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用了LEFT<br>JOIN来将两个表连接起来。左表是customers表，右表是orders表。我们在ON子句中使用了customer_id列作为连接条件。这个查询会返回所有客户的信息，即使他们没有订单，也会显示出来。如果客户没有订单，orders表中的字段将会是NULL值。</p><p>这样，我们就可以使用以上的数据和查询语句来验证MySQL的左连接查询了。</p><h1 id="MySQL连接查询-右连接"><a href="#MySQL连接查询-右连接" class="headerlink" title="MySQL连接查询-右连接"></a>MySQL连接查询-右连接</h1><p>在MySQL中，右连接（right<br>join）是一种连接查询，它返回右边表中的所有行，并且返回左边表中与右边表中的行匹配的行。如果左表中没有与右表中的行匹配的行，则返回NULL值。</p><p>以下是一个使用右连接的示例查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure><p>在这个查询中，表1是左表，表2是右表。它会返回表2中的所有行，即使没有与表1中的行匹配的行。如果表1中没有与表2中的行匹配的行，则返回NULL值。</p><p>需要注意的是，虽然使用右连接和左连接可以返回不同的结果集，但是它们是等价的。也就是说，使用右连接可以得到与左连接相同的结果集，只要交换左表和右表的位置，并把连接条件从ON子句中移到WHERE子句中。</p><p>下面是一个使用WHERE子句实现右连接的示例查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table2</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table1</span><br><span class="line"><span class="keyword">ON</span> table2.id <span class="operator">=</span> table1.id</span><br><span class="line"><span class="keyword">WHERE</span> table1.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们首先使用右连接将表2和表1连接起来，然后将连接条件从ON子句中移到WHERE子句中，并将条件反转。最后，我们使用IS<br>NULL操作符来筛选出在左表中没有匹配的行，即返回右表中所有没有匹配行的结果。这个查询将返回与左连接相同的结果集。</p><h2 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h2><p>为了验证MySQL的右连接查询，我们需要先准备一些数据，并创建两个表。假设我们有两个表，一个是订单表（orders），另一个是客户表（customers）。我们可以使用以下的SQL语句创建这两个表，并初始化一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    product_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    quantity <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">    customer_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (order_id, customer_id, product_name, quantity)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;Product A&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;Product B&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Product C&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="number">3</span>, <span class="string">&#x27;Product D&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (customer_id, name, email)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John Smith&#x27;</span>, <span class="string">&#x27;john.smith@example.com&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Jane Doe&#x27;</span>, <span class="string">&#x27;jane.doe@example.com&#x27;</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;Mike Johnson&#x27;</span>, <span class="string">&#x27;mike.johnson@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><p>  customer_id   name       email</p><hr><p>  1             John Smith <a href="mailto:&#106;&#x6f;&#x68;&#110;&#x2e;&#115;&#x6d;&#x69;&#116;&#104;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;">&#106;&#x6f;&#x68;&#110;&#x2e;&#115;&#x6d;&#x69;&#116;&#104;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a></p><p>  2             Jane Doe   <a href="mailto:&#106;&#x61;&#x6e;&#101;&#x2e;&#x64;&#x6f;&#x65;&#64;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;">&#106;&#x61;&#x6e;&#101;&#x2e;&#x64;&#x6f;&#x65;&#64;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;</a></p><h2 id="4-Mike-x6d-x69-107-101-46-x6a-x6f-x68-x6e-115-x6f-x6e-64-101-x78-x61-109-x70-x6c-x65-46-x63-x6f-109-Johnson"><a href="#4-Mike-x6d-x69-107-101-46-x6a-x6f-x68-x6e-115-x6f-x6e-64-101-x78-x61-109-x70-x6c-x65-46-x63-x6f-109-Johnson" class="headerlink" title="  4             Mike       &#x6d;&#x69;&#107;&#101;&#46;&#x6a;&#x6f;&#x68;&#x6e;&#115;&#x6f;&#x6e;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;                Johnson    "></a>  4             Mike       <a href="mailto:&#x6d;&#x69;&#107;&#101;&#46;&#x6a;&#x6f;&#x68;&#x6e;&#115;&#x6f;&#x6e;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;">&#x6d;&#x69;&#107;&#101;&#46;&#x6a;&#x6f;&#x68;&#x6e;&#115;&#x6f;&#x6e;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;</a><br>                Johnson    </h2><p>  order_id   customer_id   product_name   quantity</p><hr><p>  1          1             Product A      2<br>  2          2             Product B      1<br>  3          1             Product C      4<br>  4          3             Product D      3</p><p>以上SQL语句创建了两个表，并插入了一些示例数据。现在我们可以使用右连接查询来查找每个客户及其订单，即使没有订单也可以显示出来。以下是使用右连接的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    orders.product_name,</span><br><span class="line">    orders.quantity,</span><br><span class="line">    customers.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    customers</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> orders</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">    orders.customer_id <span class="operator">=</span> customers.customer_id;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用了RIGHT<br>JOIN来将两个表连接起来。右表是customers表，左表是orders表。我们在ON子句中使用<code>customer_id</code>列作为连接条件。这个查询会返回所有客户的信息，即使他们没有订单，也会显示出来。如果客户没有订单，orders表中的字段将会是NULL值。</p><p>这样，我们就可以使用以上的数据和查询语句来验证MySQL的右连接查询了。</p><h1 id="MySQL连接查询-全连接"><a href="#MySQL连接查询-全连接" class="headerlink" title="MySQL连接查询-全连接"></a>MySQL连接查询-全连接</h1><p>在MySQL中，全连接（full<br>join）是一种连接查询，它返回左右两个表中所有的行，如果两个表中的行没有匹配，则返回NULL值。</p><p>MySQL中并没有提供FULL JOIN关键字，但是我们可以使用LEFT<br>JOIN和UNION操作符来实现FULL JOIN。具体地，我们可以使用LEFT<br>JOIN将左表和右表连接起来，并使用UNION操作符将右表中不在左表中的行连接起来，得到所有行。以下是使用LEFT<br>JOIN和UNION实现FULL JOIN的示例查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id</span><br><span class="line"><span class="keyword">WHERE</span> table1.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们首先使用LEFT<br>JOIN将表1和表2连接起来，并得到匹配的行。然后，我们使用UNION操作符将表2中不在表1中的行连接起来。最后，我们使用RIGHT<br>JOIN将表2和表1连接起来，并得到表1中不在表2中的行，并使用WHERE子句将这些行筛选出来。这个查询会返回所有行，包括两个表中的所有行。如果两个表中的行没有匹配，则会返回NULL值。</p><p>需要注意的是，由于FULL JOIN并不是MySQL原生支持的，这种实现FULL<br>JOIN的方法可能不是最高效的，因此在处理大数据量的查询时，可能需要采用其他的方法来实现FULL<br>JOIN。</p><h2 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h2><p>为了验证MySQL的全连接查询，我们需要先准备一些数据，并创建两个表。假设我们有两个表，一个是订单表（orders），另一个是客户表（customers）。我们可以使用以下的SQL语句创建这两个表，并初始化一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    product_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    quantity <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">    customer_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (order_id, customer_id, product_name, quantity)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;Product A&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;Product B&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Product C&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="number">3</span>, <span class="string">&#x27;Product D&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (customer_id, name, email)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John Smith&#x27;</span>, <span class="string">&#x27;john.smith@example.com&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Jane Doe&#x27;</span>, <span class="string">&#x27;jane.doe@example.com&#x27;</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;Mike Johnson&#x27;</span>, <span class="string">&#x27;mike.johnson@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>以上SQL语句创建了两个表，并插入了一些示例数据。现在我们可以使用全连接查询来查找每个客户及其订单，即使没有订单也可以显示出来。以下是使用全连接的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.name, orders.product_name, orders.quantity</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> customers</span><br><span class="line"><span class="keyword">ON</span> orders.customer_id <span class="operator">=</span> customers.customer_id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> customers.name, orders.product_name, orders.quantity</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> customers</span><br><span class="line"><span class="keyword">ON</span> orders.customer_id <span class="operator">=</span> customers.customer_id</span><br><span class="line"><span class="keyword">WHERE</span> orders.customer_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用了LEFT JOIN和RIGHT<br>JOIN，以实现全连接。我们在ON子句中使用customer_id列作为连接条件。这个查询会返回所有客户的信息，即使他们没有订单，也会显示出来。如果客户没有订单，orders表中的字段将会是NULL值。</p><p>这样，我们就可以使用以上的数据和查询语句来验证MySQL的全连接查询了。</p><h1 id="MySQL连接查询-内连接"><a href="#MySQL连接查询-内连接" class="headerlink" title="MySQL连接查询-内连接"></a>MySQL连接查询-内连接</h1><p>在MySQL中，内连接（inner<br>join）是一种连接查询，它只返回左右两个表中匹配的行。内连接可以使用JOIN关键字或INNER<br>JOIN关键字实现。以下是使用JOIN关键字实现内连接的示例查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用JOIN关键字将表1和表2连接起来，并使用ON子句指定连接条件。这个查询会返回两个表中匹配的行，如果两个表中的行没有匹配，则不会返回。</p><p>我们还可以使用INNER JOIN关键字来实现内连接。以下是使用INNER<br>JOIN关键字实现内连接的示例查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure><p>这个查询和使用JOIN关键字实现内连接的查询效果是一样的，只不过使用了INNER<br>JOIN关键字而已。</p><p>需要注意的是，内连接只返回匹配的行，而不返回没有匹配的行。如果你需要返回所有行，包括没有匹配的行，可以考虑使用外连接（outer<br>join），包括左外连接（left join）、右外连接（right join）和全连接（full<br>join）等。</p><h2 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h2><p>为了验证MySQL的内连接查询，我们需要先准备一些数据，并创建两个表。假设我们有两个表，一个是订单表（orders），另一个是客户表（customers）。我们可以使用以下的SQL语句创建这两个表，并初始化一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    product_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    quantity <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">    customer_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (order_id, customer_id, product_name, quantity)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;Product A&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;Product B&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Product C&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="number">3</span>, <span class="string">&#x27;Product D&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (customer_id, name, email)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John Smith&#x27;</span>, <span class="string">&#x27;john.smith@example.com&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Jane Doe&#x27;</span>, <span class="string">&#x27;jane.doe@example.com&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Mike Johnson&#x27;</span>, <span class="string">&#x27;mike.johnson@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>以上SQL语句创建了两个表，并插入了一些示例数据。现在我们可以使用内连接查询来查找客户及其订单。以下是使用内连接的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.name, orders.product_name, orders.quantity</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> customers.customer_id <span class="operator">=</span> orders.customer_id;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用JOIN关键字和ON子句指定了连接条件。这个查询会返回所有匹配的行，也就是每个客户和他们的订单信息。如果一个客户没有订单，他不会被包含在结果集中。</p><p>这样，我们就可以使用以上的数据和查询语句来验证MySQL的内连接查询了。</p><h1 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h1><p>MySQL函数可以分为以下几类：</p><ol><li>聚合函数：聚合函数对一组值进行计算，并返回单个值作为结果。这些函数包括COUNT、SUM、AVG、MAX和MIN等。</li><li>数学函数：数学函数对数字值进行计算，例如ABS、CEIL、FLOOR、ROUND和TRUNCATE等。</li><li>字符串函数：字符串函数对字符串进行操作，例如CONCAT、SUBSTR、LENGTH、LOWER和UPPER等。</li><li>日期和时间函数：日期和时间函数对日期和时间值进行计算和操作，例如NOW、DATE、YEAR、MONTH、DAY、HOUR、MINUTE和SECOND等。</li><li>逻辑函数：逻辑函数用于执行逻辑运算，例如AND、OR和NOT等。</li><li>条件函数：条件函数用于根据指定的条件返回不同的结果，例如IF、CASE和COALESCE等。</li><li>加密函数：加密函数用于对数据进行加密和解密，例如MD5、SHA1和AES_ENCRYPT等。</li><li>其他函数：其他函数包括流程控制函数、系统函数和用户自定义函数等。</li></ol><p>这些函数可以在MySQL中方便地进行调用和使用，可以使数据库操作更加高效和便捷。</p><h2 id="聚合函数实例"><a href="#聚合函数实例" class="headerlink" title="聚合函数实例"></a>聚合函数实例</h2><p>为了验证MySQL的聚合函数，我们需要准备一些数据，并创建一个表。以下是一个示例表orders，用于存储订单信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    product_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    quantity <span class="type">INT</span>,</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (order_id, customer_id, product_name, quantity, price)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;Product A&#x27;</span>, <span class="number">2</span>, <span class="number">10.99</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;Product B&#x27;</span>, <span class="number">1</span>, <span class="number">5.99</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Product C&#x27;</span>, <span class="number">4</span>, <span class="number">12.99</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="number">3</span>, <span class="string">&#x27;Product D&#x27;</span>, <span class="number">3</span>, <span class="number">7.50</span>);</span><br></pre></td></tr></table></figure><p>以上SQL语句创建了一个名为orders的表，并插入了一些示例数据。现在我们可以使用聚合函数来计算订单信息的总数、平均价格、最高价格和最低价格。以下是使用聚合函数的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_orders,</span><br><span class="line">       <span class="built_in">AVG</span>(price) <span class="keyword">AS</span> avg_price,</span><br><span class="line">       <span class="built_in">MAX</span>(price) <span class="keyword">AS</span> max_price,</span><br><span class="line">       <span class="built_in">MIN</span>(price) <span class="keyword">AS</span> min_price</span><br><span class="line"><span class="keyword">FROM</span> orders;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用了聚合函数COUNT、AVG、MAX和MIN来计算总订单数、平均价格、最高价格和最低价格。使用AS关键字给计算结果取了别名，可以使查询结果更加易读和直观。</p><p>这样，我们就可以使用以上的数据和查询语句来验证MySQL的聚合函数了。</p><h2 id="字符串函数实例"><a href="#字符串函数实例" class="headerlink" title="字符串函数实例"></a>字符串函数实例</h2><p>为了验证MySQL的字符串函数，我们需要准备一些数据，并创建一个表。以下是一个示例表students，用于存储学生信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">    student_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (student_id, first_name, last_name, email, phone)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Doe&#x27;</span>, <span class="string">&#x27;johndoe@example.com&#x27;</span>, <span class="string">&#x27;555-1234&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Jane&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;janesmith@example.com&#x27;</span>, <span class="string">&#x27;555-5678&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Johnson&#x27;</span>, <span class="string">&#x27;bjohnson@example.com&#x27;</span>, <span class="string">&#x27;555-9012&#x27;</span>);</span><br></pre></td></tr></table></figure><p>以上SQL语句创建了一个名为students的表，并插入了一些示例数据。现在我们可以使用字符串函数来操作学生信息的姓名、电子邮件和电话号码。以下是使用字符串函数的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name, <span class="string">&#x27; &#x27;</span>, last_name) <span class="keyword">AS</span> full_name,</span><br><span class="line">       <span class="built_in">UPPER</span>(email) <span class="keyword">AS</span> upper_email,</span><br><span class="line">       SUBSTR(phone, <span class="number">1</span>, <span class="number">3</span>) <span class="keyword">AS</span> phone_prefix</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用了字符串函数CONCAT、UPPER和SUBSTR来操作学生信息的姓名、电子邮件和电话号码。使用AS关键字给计算结果取了别名，可以使查询结果更加易读和直观。</p><p>这样，我们就可以使用以上的数据和查询语句来验证MySQL的字符串函数了。</p><h2 id="日期时间函数实例"><a href="#日期时间函数实例" class="headerlink" title="日期时间函数实例"></a>日期时间函数实例</h2><p>为了验证MySQL的日期时间函数，我们需要准备一些数据，并创建一个表。以下是一个示例表employees，用于存储员工信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    employee_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    hire_date <span class="type">DATE</span>,</span><br><span class="line">    salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (employee_id, first_name, last_name, hire_date, salary)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Doe&#x27;</span>, <span class="string">&#x27;2020-01-01&#x27;</span>, <span class="number">50000.00</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Jane&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;2019-05-15&#x27;</span>, <span class="number">60000.00</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Johnson&#x27;</span>, <span class="string">&#x27;2018-03-01&#x27;</span>, <span class="number">70000.00</span>);</span><br></pre></td></tr></table></figure><p>以上SQL语句创建了一个名为employees的表，并插入了一些示例数据。现在我们可以使用日期时间函数来操作员工信息的入职日期和工资。以下是使用日期时间函数的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(hire_date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">AS</span> formatted_date,</span><br><span class="line">       <span class="keyword">YEAR</span>(hire_date) <span class="keyword">AS</span> hire_year,</span><br><span class="line">       <span class="keyword">MONTH</span>(hire_date) <span class="keyword">AS</span> hire_month,</span><br><span class="line">       <span class="keyword">DAY</span>(hire_date) <span class="keyword">AS</span> hire_day,</span><br><span class="line">       salary <span class="operator">*</span> <span class="number">12</span> <span class="keyword">AS</span> annual_salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用了日期时间函数DATE_FORMAT、YEAR、MONTH和DAY来操作员工信息的入职日期和工资。使用AS关键字给计算结果取了别名，可以使查询结果更加易读和直观。</p><p>这样，我们就可以使用以上的数据和查询语句来验证MySQL的日期时间函数了。</p><h2 id="逻辑函数实例"><a href="#逻辑函数实例" class="headerlink" title="逻辑函数实例"></a>逻辑函数实例</h2><p>为了验证MySQL的逻辑函数，我们需要准备一些数据，并创建一个表。以下是一个示例表products，用于存储产品信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">    product_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    product_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    unit_price <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    in_stock <span class="type">BOOLEAN</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products (product_id, product_name, unit_price, in_stock)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Product A&#x27;</span>, <span class="number">10.00</span>, <span class="literal">TRUE</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Product B&#x27;</span>, <span class="number">20.00</span>, <span class="literal">FALSE</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Product C&#x27;</span>, <span class="number">30.00</span>, <span class="literal">TRUE</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;Product D&#x27;</span>, <span class="number">40.00</span>, <span class="literal">FALSE</span>);</span><br></pre></td></tr></table></figure><p>以上SQL语句创建了一个名为products的表，并插入了一些示例数据。现在我们可以使用逻辑函数来操作产品信息的库存状态。以下是使用逻辑函数的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name,</span><br><span class="line">       IF(in_stock, <span class="string">&#x27;In stock&#x27;</span>, <span class="string">&#x27;Out of stock&#x27;</span>) <span class="keyword">AS</span> stock_status</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用了逻辑函数IF来操作产品信息的库存状态。使用AS关键字给计算结果取了别名，可以使查询结果更加易读和直观。</p><p>这样，我们就可以使用以上的数据和查询语句来验证MySQL的逻辑函数了。</p><h2 id="条件函数实例"><a href="#条件函数实例" class="headerlink" title="条件函数实例"></a>条件函数实例</h2><p>为了验证MySQL的条件函数，我们需要准备一些数据，并创建一个表。以下是一个示例表students，用于存储学生信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">    student_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    score <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (student_id, first_name, last_name, gender, age, score)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Doe&#x27;</span>, <span class="string">&#x27;Male&#x27;</span>, <span class="number">18</span>, <span class="number">80.00</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Jane&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;Female&#x27;</span>, <span class="number">19</span>, <span class="number">85.00</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Johnson&#x27;</span>, <span class="string">&#x27;Male&#x27;</span>, <span class="number">20</span>, <span class="number">90.00</span>);</span><br></pre></td></tr></table></figure><p>以上SQL语句创建了一个名为students的表，并插入了一些示例数据。现在我们可以使用条件函数来操作学生信息的成绩情况。以下是使用条件函数的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name,</span><br><span class="line">       last_name,</span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line">           <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">70</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;F&#x27;</span></span><br><span class="line">       <span class="keyword">END</span> <span class="keyword">AS</span> grade</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们使用了条件函数CASE来操作学生信息的成绩情况。使用AS关键字给计算结果取了别名，可以使查询结果更加易读和直观。</p><p>这样，我们就可以使用以上的数据和查询语句来验证MySQL的条件函数了。</p><h1 id="MySQL-DCL"><a href="#MySQL-DCL" class="headerlink" title="MySQL DCL"></a>MySQL DCL</h1><p>在MySQL中，DCL代表”数据控制语言”，用于控制和管理用户访问数据库的权限。DCL命令包括以下几个关键字：</p><ol><li>GRANT：用于向用户或用户组授予访问数据库的特定权限。</li><li>REVOKE：用于从用户或用户组中撤销访问数据库的特定权限。</li><li>DENY：用于拒绝用户或用户组访问数据库的特定权限。</li></ol><p>这些关键字可以用于控制用户访问数据库的权限，以确保数据库的安全性和完整性。以下是一些常用的DCL命令：</p><ol><li>GRANT SELECT ON database.* TO user@localhost;<br>&#x2F;&#x2F;授予用户在database数据库中查询数据的权限</li><li>REVOKE INSERT ON database.* FROM user@localhost;<br>&#x2F;&#x2F;从用户中撤销在database数据库中插入数据的权限</li><li>DENY DROP ON database.* TO user@localhost;<br>&#x2F;&#x2F;拒绝用户在database数据库中删除数据表的权限</li></ol><p>请注意，这些命令需要具有适当的特权和权限才能使用。只有具有管理员权限的用户才能授予、撤销和拒绝其他用户的访问权限。</p><h2 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h2><p>为了验证MySQL的DCL命令，我们需要准备一些数据并创建一个具有特定权限的用户。以下是一个示例数据库students，用于存储学生信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE students;</span><br><span class="line"></span><br><span class="line">USE students;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    score <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (first_name, last_name, gender, age, score)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Doe&#x27;</span>, <span class="string">&#x27;Male&#x27;</span>, <span class="number">18</span>, <span class="number">80.00</span>),</span><br><span class="line">       (<span class="string">&#x27;Jane&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;Female&#x27;</span>, <span class="number">19</span>, <span class="number">85.00</span>),</span><br><span class="line">       (<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Johnson&#x27;</span>, <span class="string">&#x27;Male&#x27;</span>, <span class="number">20</span>, <span class="number">90.00</span>);</span><br></pre></td></tr></table></figure><p>以上SQL语句创建了一个名为students的数据库和一个名为student的表，并插入了一些示例数据。现在我们需要创建一个新用户，并授予该用户对students数据库的查询权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;testuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;testpass&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> students.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;testuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了CREATE<br>USER命令创建了一个名为testuser的新用户，并使用GRANT命令授予该用户对students数据库的查询权限。</p><p>现在我们可以尝试使用新创建的用户testuser连接到MySQL，并查询students数据库中的数据。以下是使用testuser用户进行查询的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u testuser <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p>在提示符中输入密码testpass，然后使用以下命令查询student表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students.student;</span><br></pre></td></tr></table></figure><p>如果一切正常，testuser应该可以成功连接到MySQL，并查询students数据库中的数据。这个示例演示了如何使用DCL命令控制用户访问数据库的权限，以确保数据库的安全性和完整性。</p><h1 id="MySQL用户管理"><a href="#MySQL用户管理" class="headerlink" title="MySQL用户管理"></a>MySQL用户管理</h1><p>在MySQL中，可以使用以下命令来管理用户：</p><ol><li>创建用户</li></ol><p>要创建新用户，可以使用CREATE USER语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上述语句将创建一个名为username的用户，该用户只能从本地主机（localhost）登录，并设置了密码为password。您可以使用CREATE<br>USER创建任意数量的用户。</p><ol><li>删除用户</li></ol><p>要删除现有用户，可以使用DROP USER语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上述语句将从MySQL服务器中删除名为username的用户。</p><ol><li>授予权限</li></ol><p>要授予用户对特定数据库或表的访问权限，可以使用GRANT语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> permission <span class="keyword">ON</span> database.table <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上述语句将授予名为username的用户在数据库database中的table表上执行permission操作的权限。可以使用GRANT授予不同的权限，如SELECT、INSERT、UPDATE和DELETE等。</p><ol><li>撤销权限</li></ol><p>要从用户中撤销访问权限，可以使用REVOKE语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> permission <span class="keyword">ON</span> database.table <span class="keyword">FROM</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上述语句将从名为username的用户中撤销在database数据库的table表上执行permission操作的权限。</p><ol><li>修改用户密码</li></ol><p>要更改现有用户的密码，可以使用SET PASSWORD语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;newpassword&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上述语句将更改名为username的用户的密码为newpassword。</p><ol><li>查看现有用户</li></ol><p>要查看MySQL服务器上的现有用户，可以使用SELECT语句从mysql.user表中检索用户信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure><p>上述语句将返回MySQL服务器上所有用户的用户名和主机名。</p><p>总之，使用上述命令可以管理和控制MySQL用户的访问权限，并确保数据库的安全性和完整性。</p><h2 id="角色、用户、权限管理"><a href="#角色、用户、权限管理" class="headerlink" title="角色、用户、权限管理"></a>角色、用户、权限管理</h2><p>MySQL权限管理是控制MySQL用户对数据库、表、列等对象的访问权限的过程。MySQL提供了多种权限管理方法来保护数据库中的数据。</p><ol><li>角色管理</li></ol><p>MySQL<br>8.0引入了角色管理功能，通过角色来管理用户的权限。角色是一组权限的集合，可以将多个用户赋予同一个角色，简化了权限管理的复杂度。可以通过以下命令来创建和管理角色：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建角色</span></span><br><span class="line"><span class="keyword">CREATE</span> ROLE role_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除角色</span></span><br><span class="line"><span class="keyword">DROP</span> ROLE role_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给角色授权</span></span><br><span class="line"><span class="keyword">GRANT</span> privilege <span class="keyword">ON</span> object <span class="keyword">TO</span> role_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 收回角色授权</span></span><br><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> object <span class="keyword">FROM</span> role_name;</span><br></pre></td></tr></table></figure><ol><li>用户管理</li></ol><p>MySQL允许创建多个用户，每个用户都有自己的用户名和密码。可以使用以下命令来创建和管理用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改用户密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;newpassword&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> privilege <span class="keyword">ON</span> object <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 收回权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> object <span class="keyword">FROM</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>数据库和表权限管理</li></ol><p>在MySQL中，可以将权限授予到数据库或表级别。以下是在数据库和表级别授予权限的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授予用户对数据库的访问权限</span></span><br><span class="line"><span class="keyword">GRANT</span> privilege <span class="keyword">ON</span> database_name.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 授予用户对表的访问权限</span></span><br><span class="line"><span class="keyword">GRANT</span> privilege <span class="keyword">ON</span> database_name.table_name <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 收回用户对数据库的访问权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> database_name.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 收回用户对表的访问权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> database_name.table_name <span class="keyword">FROM</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>数据访问控制</li></ol><p>MySQL提供了多种数据访问控制机制，如视图、存储过程、触发器、事件等，可以通过这些机制来控制对数据的访问。例如，可以使用视图来隐藏敏感数据，使用存储过程来限制对数据的修改。</p><p>总之，MySQL提供了多种权限管理和数据访问控制机制，以保护数据库中的数据。管理员可以根据实际需求来选择适合自己的权限管理方法和数据访问控制机制。</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>为了演示MySQL权限管理的功能，我们需要先创建一些测试数据，以及相应的用户和角色。以下是一个示例数据，包括两个表：users和orders。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE testdb;</span><br><span class="line"></span><br><span class="line">USE testdb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;alice@example.com&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;bob@example.com&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;charlie@example.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  user_id <span class="type">INT</span>,</span><br><span class="line">  product <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  price <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (user_id, product, price) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;iPhone&#x27;</span>, <span class="number">999.99</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;iPad&#x27;</span>, <span class="number">499.99</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;MacBook&#x27;</span>, <span class="number">1499.99</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;Apple Watch&#x27;</span>, <span class="number">199.99</span>);</span><br></pre></td></tr></table></figure><p>接下来，我们创建一些用户和角色，并给它们授予不同的权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;alice&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;bob&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;charlie&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建角色</span></span><br><span class="line"><span class="keyword">CREATE</span> ROLE sales;</span><br><span class="line"><span class="keyword">CREATE</span> ROLE finance;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给角色授权</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> testdb.users <span class="keyword">TO</span> sales;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> testdb.orders <span class="keyword">TO</span> sales;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span> <span class="keyword">ON</span> testdb.orders <span class="keyword">TO</span> finance;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给用户授权</span></span><br><span class="line"><span class="keyword">GRANT</span> sales <span class="keyword">TO</span> <span class="string">&#x27;alice&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> sales <span class="keyword">TO</span> <span class="string">&#x27;bob&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> finance <span class="keyword">TO</span> <span class="string">&#x27;charlie&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面的代码创建了三个用户和两个角色。其中，alice和bob都属于sales角色，而charlie属于finance角色。此外，sales角色被授予了对users表的SELECT权限，以及对orders表的SELECT和INSERT权限；finance角色被授予了对orders表的SELECT、UPDATE和DELETE权限。最后，我们将角色分别授予给了对应的用户。</p><p>现在，我们可以测试不同用户和角色对数据的访问权限了。例如，我们可以用alice的账户查询orders表中的数据，只能看到自己的订单，而不能修改或删除数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE testdb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 可以查询自己的订单</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (user_id, product, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;iMac&#x27;</span>, <span class="number">1999.99</span>); <span class="comment">-- 可以插入自己的订单</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> orders <span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">899.99</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 无法修改其他用户的订单</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 无法删除其他用户的订单</span></span><br></pre></td></tr></table></figure><p>另外，我们还可以使用finance角色来修改和删除订单表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE testdb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders; <span class="comment">-- 可以查询所有订单</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> orders <span class="keyword">SET</span> price <span class="operator">=</span> price <span class="operator">*</span> <span class="number">0.9</span> <span class="keyword">WHERE</span> product <span class="operator">=</span> <span class="string">&#x27;iPhone&#x27;</span>; <span class="comment">-- 可以修改订单价格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> price <span class="operator">&gt;</span> <span class="number">1000</span>; <span class="comment">-- 可以删除价格高于1000的订单</span></span><br></pre></td></tr></table></figure><h1 id="MySQL约束"><a href="#MySQL约束" class="headerlink" title="MySQL约束"></a>MySQL约束</h1><p>MySQL中的约束是用来限制表中数据的有效性和完整性的规则。它们确保了数据的正确性和一致性，并帮助保持数据库中的数据质量。MySQL支持以下类型的约束：</p><ol><li>主键约束（PRIMARY KEY）：用于确保表中的每行都具有唯一的标识符。</li><li>外键约束（FOREIGN KEY）：用于确保表之间的关系的完整性。</li><li>唯一约束（UNIQUE）：用于确保表中的某一列或一组列的值是唯一的。</li><li>检查约束（CHECK）：用于确保表中的数据符合指定的条件。</li></ol><p>下面是一些MySQL约束的示例：</p><ol><li>创建一个带有主键约束的表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li>创建一个带有外键约束的表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    order_date <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (customer_id) <span class="keyword">REFERENCES</span> customers(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li>创建一个带有唯一约束的表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li>创建一个带有检查约束的表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">    quantity <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">CHECK</span> (price <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">CHECK</span> (quantity <span class="operator">&gt;=</span> <span class="number">0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这些约束可以在表创建时定义，也可以在表创建后使用ALTER<br>TABLE语句进行修改。</p><h2 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h2><p>以下是一些MySQL约束的验证数据示例：</p><ol><li>验证主键约束：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Jane&#x27;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id, name, age) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id, name, age) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="number">21</span>); <span class="comment">-- 这行会导致主键冲突错误</span></span><br></pre></td></tr></table></figure><ol><li>验证外键约束：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    order_date <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (customer_id) <span class="keyword">REFERENCES</span> customers(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (id, name) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (id, name) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Jane&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (id, customer_id, order_date) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;2022-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (id, customer_id, order_date) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;2022-02-01&#x27;</span>); <span class="comment">-- 这行会导致外键约束错误</span></span><br></pre></td></tr></table></figure><ol><li>验证唯一约束：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (id, name, email, phone) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>, <span class="string">&#x27;123-456-7890&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (id, name, email, phone) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Jane&#x27;</span>, <span class="string">&#x27;jane@example.com&#x27;</span>, <span class="string">&#x27;234-567-8901&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (id, name, email, phone) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>, <span class="string">&#x27;345-678-9012&#x27;</span>); <span class="comment">-- 这行会导致唯一约束错误</span></span><br></pre></td></tr></table></figure><ol><li>验证检查约束：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">    quantity <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">CHECK</span> (price <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">CHECK</span> (quantity <span class="operator">&gt;=</span> <span class="number">0</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products (id, name, price, quantity) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Product 1&#x27;</span>, <span class="number">10.99</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products (id, name, price, quantity) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Product 2&#x27;</span>, <span class="number">-5.99</span>, <span class="number">50</span>); <span class="comment">-- 这行会导致检查约束错误</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products (id, name, price, quantity) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Product 3&#x27;</span>, <span class="number">19.99</span>, <span class="number">-10</span>);</span><br></pre></td></tr></table></figure><h1 id="MySQL-NULL-和-NOT-NULL-约束"><a href="#MySQL-NULL-和-NOT-NULL-约束" class="headerlink" title="MySQL NULL 和 NOT NULL 约束"></a>MySQL NULL 和 NOT NULL 约束</h1><p>在 MySQL 中，可以使用 NULL 和 NOT NULL 约束来定义列中是否允许插入 NULL<br>值。NULL 值指的是缺少值或不适用的值，因此它与空字符串或空格不同。</p><p>当在表中定义一个列时，可以使用以下语法定义该列是否允许为 NULL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column_name data_type <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>如果没有指定 NULL 或 NOT NULL 约束，则该列默认允许为 NULL。</p><p>以下是一个例子，创建一个包含允许为 NULL 和不允许为 NULL 的列的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在上面的例子中，id 和 age 列被定义为 NOT NULL，这意味着它们不能为<br>NULL。而 name 列被定义为允许为 NULL。</p><p>在插入数据时，可以指定 NULL 值来填充允许为 NULL 的列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (id, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="keyword">NULL</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>当尝试将 NULL 值插入不允许为 NULL 的列时，将会收到错误消息。</p><h1 id="MySQL-Default关键字"><a href="#MySQL-Default关键字" class="headerlink" title="MySQL Default关键字"></a>MySQL Default关键字</h1><p>在 MySQL 中，DEFAULT<br>关键字用于指定当插入一条记录时，如果没有为某个列指定值，该列应使用的默认值。如果未指定默认值，则该列将默认为<br>NULL。</p><p>default 默认值</p><p>以下是一个例子，创建一个包含默认值的列的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;Anonymous&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在上面的例子中，name 列被定义为具有默认值<br>‘Anonymous’。当在插入数据时未为该列指定值时，将使用默认值<br>‘Anonymous’。下面是一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (id, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>在上面的例子中，未为 name 列指定值，因此将使用默认值 ‘Anonymous’。</p><p>如果需要更改默认值，可以使用 ALTER TABLE<br>语句来更改列的默认值，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_table <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> name <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;Unknown&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在上面的例子中，将更改 name 列的默认值为<br>‘Unknown’。如果要删除默认值，可以使用以下语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_table <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> name <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure><p>在上面的例子中，将删除 name 列的默认值。</p><h1 id="MySQL数据库设计"><a href="#MySQL数据库设计" class="headerlink" title="MySQL数据库设计"></a>MySQL数据库设计</h1><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>数据库设计是指在实现数据库应用程序之前，对数据库的结构和逻辑进行规划和设计的过程。数据库设计涉及到从业务需求中识别出数据实体、属性、关系和约束，以及设计适当的表结构、视图、索引、触发器、存储过程和其他数据库对象。好的数据库设计能够提高数据访问的效率和数据的安全性，并能更好地支持业务需求。</p><p>下面是一些数据库设计的最佳实践：</p><ol><li>识别和建模实体：从业务需求中识别出需要存储的实体，定义实体的属性，建立实体之间的关系。</li><li>规范化表结构：将数据分解为多个表，避免数据冗余和数据更新异常，提高数据的一致性和完整性。</li><li>设计适当的数据类型：选择适当的数据类型和长度，避免浪费存储空间和查询性能。</li><li>设计主键和外键：为每个表定义主键，确保每条记录的唯一性，定义外键建立表之间的关系。</li><li>设计索引：为经常被查询的列创建索引，加快查询性能。</li><li>设计视图：为常用的查询创建视图，提高查询的重用性和可读性。</li><li>设计存储过程和触发器：将业务逻辑封装在存储过程和触发器中，提高数据的安全性和完整性。</li><li>设计备份和恢复策略：定期备份数据库，并测试备份和恢复策略，确保数据的安全性和可靠性。</li></ol><p>以上是一些数据库设计的最佳实践，但具体的设计应该根据具体的业务需求和数据特点来确定。</p><h2 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h2><p>数据库设计工具是一种帮助数据库开发人员进行数据库设计和管理的软件。这些工具提供了一个图形化界面来建模、维护和管理数据库。以下是几种常用的数据库设计工具：</p><ol><li>MySQL<br>Workbench：MySQL官方提供的免费数据库设计工具，可用于设计和管理MySQL数据库。</li><li>Oracle SQL<br>Developer：Oracle公司提供的免费数据库设计工具，支持多种数据库，包括Oracle、MySQL、Microsoft<br>SQL Server等。</li><li>ER&#x2F;Studio：ER&#x2F;Studio是一款商业数据库设计工具，提供全面的数据建模和管理功能，支持多种数据库。</li><li>Navicat：Navicat是一款商业数据库管理工具，支持多种数据库，包括MySQL、Oracle、Microsoft<br>SQL Server、PostgreSQL等。</li><li>Toad for Oracle：Toad for<br>Oracle是一款商业数据库管理工具，主要用于管理和维护Oracle数据库。</li></ol><p>以上是几种常用的数据库设计工具，每种工具都有其优点和缺点，具体使用应根据项目需求和个人喜好进行选择。</p><h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><p>ER图（Entity-Relationship<br>Diagram）实体关系图，是一种用于表示实体之间关系的图形化工具。ER图通常用于数据库设计过程中，可以帮助开发人员建立清晰的数据模型，并描述实体之间的关系。</p><p>在ER图中，实体通常用矩形表示，属性用椭圆形表示，关系用菱形表示。实体和属性之间用直线连接，表示实体和属性之间的关系；实体和关系之间用直线连接，表示实体和关系之间的关系；关系和属性之间也用直线连接，表示关系和属性之间的关系。</p><p>ER图常用于设计关系型数据库，用于描述数据库的结构和约束。通过ER图，开发人员可以更好地理解数据库中的实体和关系，提高数据库的可维护性和扩展性。</p><p>ER图可以手动绘制，也可以使用数据库设计工具来绘制。在设计ER图时，需要遵循一些基本原则，例如实体之间的关系应该是可靠的，具有明确的定义和规则。</p><h1 id="MySQL数据库三范式"><a href="#MySQL数据库三范式" class="headerlink" title="MySQL数据库三范式"></a>MySQL数据库三范式</h1><p>数据库设计三范式（Normalization）是指对关系数据库的设计进行规范化，以减少数据冗余、提高数据一致性、避免数据异常等问题，保证数据的有效性和完整性。三范式是一个逐步拆分数据表的过程，其目的是消除重复数据，并使得数据表内的每个属性都只与主键直接相关。</p><p>三范式的具体定义如下：</p><ol><li>第一范式（1NF）：数据表中的每个属性都是原子性的，即不可再分割。如果数据表中某个属性可以分为更小的子属性，就需要拆分成一个新的数据表。</li><li>第二范式（2NF）：数据表中的非主键属性都必须完全依赖于主键，而不是依赖于主键的一部分。如果一个数据表中有多个主键，非主键属性必须与所有主键相关，而不能只与其中一部分主键相关。</li><li>第三范式（3NF）：数据表中的非主键属性不依赖于其他非主键属性。如果有两个非主键属性之间存在依赖关系，需要将其拆分成两个数据表。</li></ol><p>设计一个符合三范式的数据库模型可以避免冗余和不一致性数据，并能提高数据操作的效率和可靠性。但是，过度的规范化可能会导致数据库结构复杂，难以维护和查询。在设计数据库时，应该根据具体的应用场景和数据需求，权衡规范化和性能的关系，以获得最佳的设计方案。</p><h2 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h2><p>为了初始化数据并验证数据库的三范式，我们可以考虑以下示例数据：</p><p>假设我们要创建一个数据库来管理公司的员工信息。我们可以创建一个包含以下表的关系型数据库：</p><p><strong>员工表（Employee）</strong></p><p>  员工编号   姓名   部门编号   职位</p><hr><p>  1          张三   101        经理<br>  2          李四   102        经理<br>  3          王五   102        员工</p><p><strong>部门表（Department）</strong></p><p>  部门编号   部门名称   部门经理编号</p><hr><p>  101        销售部     1<br>  102        研发部     2</p><p><strong>验证第一范式（1NF）</strong></p><p>在第一范式中，每个表中的每个字段都应该是原子的，不可再分的。上述表格中，每个字段都是原子的，因此符合第一范式。</p><p><strong>验证第二范式（2NF）</strong></p><p>在第二范式中，每个表中的非主键字段都应该完全依赖于主键。上述表格中，员工表中的部门编号和部门表中的部门编号都是主键，而职位字段只依赖于员工表中的部门编号，因此符合第二范式。</p><p><strong>验证第三范式（3NF）</strong></p><p>在第三范式中，每个表中的非主键字段都不应该依赖于其他非主键字段。上述表格中，员工表中的部门编号和部门表中的部门编号都是主键，而部门名称和部门经理编号只依赖于部门编号，因此符合第三范式。</p><p>因此，我们可以验证出这个关系型数据库符合第一、第二、第三范式。</p><h1 id="MySQL事务简介"><a href="#MySQL事务简介" class="headerlink" title="MySQL事务简介"></a>MySQL事务简介</h1><p>MySQL事务是一系列数据库操作的集合，这些操作被视为一个单独的工作单元，要么全部成功完成，要么全部失败回滚。</p><p>在MySQL中，可以使用以下语句来开始和结束一个事务：</p><ol><li>开始事务：START TRANSACTION 或 BEGIN</li><li>提交事务：COMMIT</li><li>回滚事务：ROLLBACK</li></ol><p>当一个事务开始时，所有的SQL语句都将被保存在缓冲区中，而不是立即执行。只有当COMMIT语句被执行时，MySQL才会将缓冲区中的SQL语句提交到数据库中。如果在事务执行期间出现错误或者ROLLBACK语句被执行，所有在缓冲区中的SQL语句都会被撤销，数据库状态会回滚到事务开始前的状态。</p><p>使用事务可以确保数据库的一致性和完整性。如果一个事务中的任何一条SQL语句执行失败或者事务被回滚，那么数据库的状态就不会被破坏。这使得MySQL事务在高并发和复杂业务场景下非常有用，可以有效地保证数据的正确性和可靠性。</p><h2 id="实例演示-1"><a href="#实例演示-1" class="headerlink" title="实例演示"></a>实例演示</h2><h3 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h3><p>创建student表的SQL语句示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  age <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;John&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id, name, age) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用了START<br>TRANSACTION语句来开启一个事务，然后执行了三个INSERT语句来往student表中插入三个学生的信息。最后，我们使用COMMIT语句来提交这个事务。</p><p>如果在执行这个事务的过程中，任何一个INSERT语句执行失败（比如插入了一个重复的学生ID），那么整个事务将会被回滚，student表的数据将会回到事务开始之前的状态。</p><p>这样，使用事务来管理数据库操作，可以确保数据的一致性和完整性，避免了数据操作过程中的错误和异常情况。</p><h3 id="回滚事务"><a href="#回滚事务" class="headerlink" title="回滚事务"></a>回滚事务</h3><p>这个示例将尝试向student表中插入一个重复的学生ID，导致事务执行失败并回滚。</p><p>首先，我们可以通过以下语句检查student表的内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>这应该会返回我们之前插入的三个学生记录。</p><p>现在，我们尝试执行以下SQL语句来往student表中插入一个重复的学生ID：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;David&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id, name, age) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;Lisa&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们故意将第一个学生的ID设置为1，这是我们之前插入的学生的ID。因此，第一个INSERT语句会失败，整个事务也会因为第一个操作失败而回滚。</p><p>执行完上述SQL语句后，我们可以再次执行以下SELECT语句来检查student表的内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>这应该返回之前插入的三个学生记录，而新插入的学生记录并没有被添加到表中。</p><p>这个例子说明了MySQL事务的回滚功能：当事务中的任何一条SQL语句执行失败时，整个事务都会被回滚，确保数据库的一致性和完整性。</p><h1 id="MySQL事务的特性"><a href="#MySQL事务的特性" class="headerlink" title="MySQL事务的特性"></a>MySQL事务的特性</h1><h2 id="数据库事务的特性"><a href="#数据库事务的特性" class="headerlink" title="数据库事务的特性"></a>数据库事务的特性</h2><p>数据库事务具有以下四个特性，通常被称为ACID特性：</p><ol><li>原子性（Atomicity）：一个事务中的所有操作要么全部完成，要么全部不完成，事务的执行是一个不可分割的原子操作。</li><li>一致性（Consistency）：事务执行之前和之后，数据库的完整性约束没有被破坏。也就是说，一个事务执行之前和之后，数据库中的数据必须保持一致，如果事务执行失败，则数据必须回滚到执行事务前的状态。</li><li>隔离性（Isolation）：事务的执行不会被其他事务干扰，事务的执行结果与其他事务是隔离的。每个事务都应该认为它是唯一在数据库上运行的事务，并且在其他事务对其影响之前完成。</li><li>持久性（Durability）：一旦事务被提交，它的结果就应该是永久的。即使在系统故障的情况下，数据也不应该被丢失。</li></ol><p>这些特性确保了事务的可靠性和数据的完整性，是保证数据库操作正确性和可靠性的重要保障。事务可以保证一组操作全部执行或全部回滚，避免了数据操作中的异常和错误，确保了数据的正确性和一致性。</p><h2 id="实例演示-2"><a href="#实例演示-2" class="headerlink" title="实例演示"></a>实例演示</h2><p>下面通过一个银行转账项目演示，事务的特性：</p><p>下面是创建 <code>accounts</code> 表的 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> accounts (</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  balance <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们可以插入一些数据来测试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts (name, balance) <span class="keyword">VALUES</span> (<span class="string">&#x27;A&#x27;</span>, <span class="number">1000.00</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts (name, balance) <span class="keyword">VALUES</span> (<span class="string">&#x27;B&#x27;</span>, <span class="number">500.00</span>);</span><br></pre></td></tr></table></figure><p>假设我们有两个银行账户，账户A和账户B。我们希望从账户A向账户B转移100元。这个过程需要进行以下三个操作：</p><ol><li>检查账户A的余额是否足够。</li><li>从账户A中扣除100元。</li><li>将100元存入账户B中。</li></ol><p>我们可以使用MySQL事务来确保这三个操作的原子性，以便在出现故障时能够回滚并确保数据的完整性。</p><p>下面是一个示例代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> balance <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们首先使用SELECT语句锁定账户A的余额，以确保其他事务不能同时读取或修改这个值。然后，我们执行两个UPDATE语句来减少账户A的余额并增加账户B的余额。最后，我们使用COMMIT语句提交事务并释放锁。</p><p>如果在事务执行过程中发生任何错误，如余额不足或数据库错误，事务会自动回滚并撤销对数据库的任何更改。这确保了银行转账的操作是原子的，即要么成功转移100元，要么不进行转移。</p><p>通过使用MySQL事务，我们可以确保在复杂的数据库操作中保持数据的完整性和一致性。</p><h1 id="MySQL事务的隔离级别"><a href="#MySQL事务的隔离级别" class="headerlink" title="MySQL事务的隔离级别"></a>MySQL事务的隔离级别</h1><p>MySQL<br>支持四种事务隔离级别，每种隔离级别的事务并发控制方式不同，如下所述：</p><ol><li>READ<br>UNCOMMITTED（未提交读）：最低的隔离级别，允许事务读取未提交的数据，可能会导致脏读、不可重复读和幻象读的问题。</li><li>READ<br>COMMITTED（提交读）：允许事务读取已提交的数据，可以避免脏读的问题，但仍可能会出现不可重复读和幻象读的问题。</li><li>REPEATABLE<br>READ（可重复读）：保证在同一事务中多次读取同一数据时返回相同的结果，可以避免不可重复读的问题，但仍可能会出现幻象读的问题。</li><li>SERIALIZABLE（串行化）：最高的隔离级别，通过强制事务串行执行来避免并发问题，可以避免脏读、不可重复读和幻象读的问题，但会降低并发性能。</li></ol><p>可以使用以下语句来设置事务隔离级别：</p><pre><code>SET TRANSACTION ISOLATION LEVEL &lt;isolation level&gt;;</code></pre><p>其中，<code>&lt;isolation level&gt;</code> 可以是<br><code>READ UNCOMMITTED</code>、<code>READ COMMITTED</code>、<code>REPEATABLE READ</code> 或<br><code>SERIALIZABLE</code> 中的任意一个。</p><blockquote><p>需要注意的是，设置事务隔离级别会影响数据库的性能和并发控制效果，应根据具体的应用场景选择适当的隔离级别。</p></blockquote><h2 id="实例演示-3"><a href="#实例演示-3" class="headerlink" title="实例演示"></a>实例演示</h2><p>假设有一个银行转账的场景，银行账户信息保存在 <code>account</code><br>表中，包括账户编号（<code>id</code>）和账户余额（<code>balance</code>）两个字段。现在有两个客户端<br>A 和 B，分别要从账户 1 向账户 2 转账 100 元和 200 元。</p><p>以下是一个示例的 SQL 代码，创建 <code>account</code> 表并插入一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  balance <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account (id, balance) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1000</span>), (<span class="number">2</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>现在，我们在两个客户端中分别开启一个事务，并设置不同的隔离级别。在客户端<br>A 中，设置隔离级别为 <code>READ COMMITTED</code>，在客户端 B 中，设置隔离级别为<br><code>REPEATABLE READ</code>。</p><p>在客户端 A 中执行以下 SQL 代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>在客户端 B 中执行以下 SQL 代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>由于隔离级别不同，客户端 A 和客户端 B 的事务执行结果也不同。在<br><code>READ COMMITTED</code> 隔离级别下，客户端 A<br>可以读取其他已提交事务的数据，因此在转账时可以正确地读取账户 2<br>的余额。而在 <code>REPEATABLE READ</code> 隔离级别下，客户端 B<br>无法读取其他已提交事务的数据，因此在转账时无法正确地读取账户 2<br>的余额，可能会导致余额不足的错误。</p><p>因此，在实际应用中，需要根据具体的业务需求和并发性能要求来选择合适的事务隔离级别。</p><h1 id="MySQL事务并发"><a href="#MySQL事务并发" class="headerlink" title="MySQL事务并发"></a>MySQL事务并发</h1><p>在 MySQL<br>中，事务并发执行是允许的，这意味着多个事务可以同时读取和写入数据库，但同时也会引入一些并发控制的问题。下面是一些关于<br>MySQL 事务并发的概念和相关问题：</p><ol><li>事务隔离级别：MySQL 支持四种事务隔离级别，包括 READ<br>UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和<br>SERIALIZABLE，不同隔离级别的事务对并发控制的方式也不同。</li><li>锁定：在并发环境下，为了避免数据的不一致性，MySQL<br>会使用锁定机制来控制对数据的访问。MySQL<br>支持两种锁定方式：行级锁和表级锁，行级锁可以避免锁定整个表，提高并发性能。</li><li>死锁：如果两个或多个事务试图锁定对方持有的资源，就会发生死锁。MySQL<br>的 InnoDB 存储引擎提供了死锁检测和回滚机制，可以自动检测并回滚死锁。</li><li>并发问题：并发执行的事务可能会引起一些问题，例如丢失更新、脏读、不可重复读和幻象读。这些问题可以通过使用事务隔离级别和锁定机制来避免或减少发生。</li></ol><p>总之，在 MySQL<br>中，事务并发执行是一种常见的情况。为了确保数据的一致性和可靠性，我们需要了解并发控制的相关概念和技术，并根据具体的应用场景选择适当的事务隔离级别和锁定机制。</p><h2 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h2><p>假设有一个银行转账的场景，银行账户信息保存在 <code>account</code><br>表中，包括账户编号（<code>id</code>）和账户余额（<code>balance</code>）两个字段。现在有两个客户端<br>A 和 B，分别要从账户 1 向账户 2 转账 100 元和 200 元。</p><p>以下是一个示例的 SQL 代码，创建 <code>account</code> 表并插入一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  balance <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account (id, balance) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1000</span>), (<span class="number">2</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>现在，我们在两个客户端中分别开启一个事务，并进行转账操作。在客户端 A<br>中，执行以下 SQL 代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>在客户端 B 中，执行以下 SQL 代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>由于两个事务并发执行，可能会出现一些并发问题。以下是一些常见的并发问题：</p><ol><li>脏读（Dirty<br>read）：一个事务读取到了另一个未提交事务的数据，如果另一个事务回滚了，则读取到的数据就是无效的。</li><li>不可重复读（Non-repeatable<br>read）：在同一个事务中，一个事务多次读取同一数据时，返回的结果不一致，因为另一个事务在这期间对数据进行了修改或删除。</li><li>幻象读（Phantom<br>read）：在同一个事务中，一个事务多次查询同一范围内的数据时，返回的结果不一致，因为另一个事务在这期间插入或删除了数据。</li></ol><p>针对这些并发问题，可以通过设置事务隔离级别和加锁等方式来解决。例如，可以将事务隔离级别设置为<br><code>SERIALIZABLE</code>，通过强制事务串行执行来避免并发问题，或者在转账操作中加锁，确保在修改数据时只有一个事务能够访问。</p><h1 id="MySQL视图"><a href="#MySQL视图" class="headerlink" title="MySQL视图"></a>MySQL视图</h1><p>MySQL<br>中的视图（View）是一种虚拟的表，它并不真实存在于数据库中，但可以像表一样被查询和操作。视图是基于查询语句创建的，它包含了查询语句中的<br>SELECT 语句的结果集，可以对这个结果集进行各种操作。</p><p>MySQL 中的视图有以下特点：</p><ol><li>视图是虚拟的，不占用数据库的物理存储空间。</li><li>视图是基于查询语句创建的，对查询语句进行了封装，简化了复杂的查询操作。</li><li>视图可以用来保护数据的安全性，可以限制用户只能看到特定的数据。</li><li>视图可以被当做普通表使用，可以进行查询、插入、更新和删除等操作，但是它们的数据是由基础表生成的，无法直接修改。</li></ol><p>以下是一个创建视图的示例 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span> <span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>其中，<code>view_name</code> 是视图的名称，<code>column1</code> 和 <code>column2</code><br>是要查询的列，<code>table_name</code> 是要查询的基础表，<code>condition</code> 是查询条件。</p><p>例如，以下是一个创建视图的示例 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> customer_info <span class="keyword">AS</span> <span class="keyword">SELECT</span> name, address, phone <span class="keyword">FROM</span> customer <span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这个视图名为 <code>customer_info</code>，包含了 <code>customer</code> 表中 <code>status</code> 字段为<br><code>&#39;active&#39;</code> 的客户的姓名、地址和电话号码。</p><p>使用视图可以简化查询语句，例如，可以使用以下 SQL 查询语句查询<br><code>customer_info</code> 视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer_info;</span><br></pre></td></tr></table></figure><p>这个查询语句会返回 <code>customer</code> 表中 <code>status</code> 字段为 <code>&#39;active&#39;</code><br>的客户的姓名、地址和电话号码。可以看到，使用视图可以避免重复编写复杂的查询语句，提高了查询效率和代码的可维护性。</p><h2 id="视图实例"><a href="#视图实例" class="headerlink" title="视图实例"></a>视图实例</h2><p>假设有一个 <code>employees</code><br>表，其中包含了员工的姓名、部门、薪水等信息。我们可以创建一个视图，只显示部门为<br><code>Sales</code> 的员工的姓名和薪水信息。下面是创建视图的 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> sales_employees <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> name, salary <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;Sales&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面的语句创建了一个名为 <code>sales_employees</code> 的视图，它只包含了部门为<br><code>Sales</code> 的员工的姓名和薪水信息。我们可以像查询表一样查询这个视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sales_employees;</span><br></pre></td></tr></table></figure><p>这个查询语句会返回部门为 <code>Sales</code><br>的员工的姓名和薪水信息。注意，视图并不存储数据，它只是一个基于查询语句的虚拟表，所以我们不能向视图中插入、修改或删除数据。</p><p>当 <code>employees</code> 表中的数据发生改变时，<code>sales_employees</code><br>视图也会相应地发生改变。例如，如果我们修改了某个部门为 <code>Sales</code><br>的员工的薪水信息，那么查询 <code>sales_employees</code><br>视图会反映这个改变。因此，视图提供了一种方便的方式来查看经常需要查询的数据，同时也保证了数据的一致性。</p><h1 id="MySQL视图检查选项（限制写入）"><a href="#MySQL视图检查选项（限制写入）" class="headerlink" title="MySQL视图检查选项（限制写入）"></a>MySQL视图检查选项（限制写入）</h1><p>在 MySQL 中，可以使用 <code>CREATE VIEW</code> 语句的 <code>WITH CHECK OPTION</code><br>子句来限制通过视图写入表的数据。当使用 <code>WITH CHECK OPTION</code><br>选项创建视图时，MySQL<br>会检查写入视图的数据是否符合视图的定义，如果不符合则拒绝写入操作。</p><p>下面是一个使用 <code>WITH CHECK OPTION</code> 选项创建视图的示例。假设有一个<br><code>employees</code> 表，包含员工的姓名、部门和薪水信息。我们可以创建一个名为<br><code>sales_employees</code> 的视图，只包含部门为 <code>Sales</code><br>的员工的姓名和薪水信息，并限制通过视图写入的数据必须满足部门为 <code>Sales</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> sales_employees <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> name, salary <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;Sales&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><p>上面的语句创建了一个名为 <code>sales_employees</code> 的视图，只包含了部门为<br><code>Sales</code> 的员工的姓名和薪水信息。当我们通过视图写入数据时，MySQL<br>会检查写入的数据是否符合视图的定义，如果不符合则拒绝写入操作。</p><p>例如，如果我们尝试通过视图写入一个部门不为 <code>Sales</code><br>的员工的薪水信息，MySQL 将拒绝这个操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sales_employees (name, salary, department) <span class="keyword">VALUES</span> (<span class="string">&#x27;John Smith&#x27;</span>, <span class="number">50000</span>, <span class="string">&#x27;Marketing&#x27;</span>);</span><br></pre></td></tr></table></figure><p>MySQL 会返回一个错误，指出写入操作被拒绝了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">1369</span> (HY000): <span class="keyword">CHECK</span> OPTION failed <span class="string">&#x27;test.sales_employees&#x27;</span></span><br></pre></td></tr></table></figure><p>这样，我们就可以使用 <code>WITH CHECK OPTION</code><br>选项限制通过视图写入表的数据，保证数据的一致性。</p><h1 id="MySQL视图的删除修改和替换"><a href="#MySQL视图的删除修改和替换" class="headerlink" title="MySQL视图的删除修改和替换"></a>MySQL视图的删除修改和替换</h1><p>在 MySQL 中，可以使用 <code>ALTER VIEW</code> 语句来修改已有的视图。<code>ALTER VIEW</code><br>语句的语法与 <code>CREATE VIEW</code><br>语句类似，但只需要指定要修改的视图的名称和新的视图定义即可。例如，假设我们要修改名为<br><code>high_salary_employees</code> 的视图，只显示薪水高于 60000<br>的员工的姓名和薪水信息，可以使用以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> high_salary_employees <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> name, salary <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">60000</span>;</span><br></pre></td></tr></table></figure><p>这个命令将原有的 <code>high_salary_employees</code> 视图修改为只显示薪水高于 60000<br>的员工的姓名和薪水信息。</p><p>要删除一个视图，可以使用 <code>DROP VIEW</code><br>语句，指定要删除的视图的名称即可。例如，要删除名为<br><code>high_salary_employees</code> 的视图，可以使用以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> high_salary_employees;</span><br></pre></td></tr></table></figure><p>这个命令将删除名为 <code>high_salary_employees</code> 的视图。</p><p>在 MySQL 5.1 版本及以上，还可以使用 <code>CREATE OR REPLACE VIEW</code><br>语句来替换已有的视图。<code>CREATE OR REPLACE VIEW</code> 语句的语法与<br><code>CREATE VIEW</code><br>语句类似，但如果指定的视图名称已经存在，则会将原有的视图替换为新的视图定义。例如，要替换名为<br><code>high_salary_employees</code> 的视图为只显示薪水高于 70000<br>的员工的姓名和薪水信息，可以使用以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> high_salary_employees <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> name, salary <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">70000</span>;</span><br></pre></td></tr></table></figure><p>这个命令将替换原有的 <code>high_salary_employees</code> 视图为只显示薪水高于 70000<br>的员工的姓名和薪水信息。</p><h1 id="MySQL存储过程"><a href="#MySQL存储过程" class="headerlink" title="MySQL存储过程"></a>MySQL存储过程</h1><p>MySQL 存储过程是一种预先编译的代码块，可以接收参数、执行一系列的 SQL<br>语句、进行条件判断和循环操作等，并最终返回结果或修改数据库的状态。使用存储过程可以提高<br>SQL<br>的执行效率，减少网络通信的开销，还可以在数据库端进行一些复杂的计算和数据处理。</p><p>以下是一个简单的 MySQL 存储过程的示例，它接收一个参数 <code>emp_id</code>，查询名为<br><code>employees</code> 的表中 <code>emp_id</code><br>对应的员工的姓名和薪水信息，然后将这些信息输出到控制台：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_employee_info(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> emp_name <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> emp_salary <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SELECT</span> name, salary <span class="keyword">INTO</span> emp_name, emp_salary</span><br><span class="line">  <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Employee name: &#x27;</span>, emp_name) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line">  <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Employee salary: &#x27;</span>, emp_salary) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>该存储过程的参数为 <code>emp_id</code>，在存储过程的主体中，声明了两个变量<br><code>emp_name</code> 和<br><code>emp_salary</code>，用于存储从表中查询到的员工姓名和薪水信息。然后使用<br><code>SELECT INTO</code> 语句将查询结果赋值给这两个变量。最后，使用 <code>SELECT</code><br>语句将员工姓名和薪水信息输出到控制台。</p><p>要调用该存储过程，可以使用 <code>CALL</code> 语句，并传递一个参数<br><code>emp_id</code>。例如，要查询员工 ID 为 100<br>的员工的姓名和薪水信息，可以使用以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> get_employee_info(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>执行该命令后，MySQL 会调用 <code>get_employee_info</code><br>存储过程，并输出员工姓名和薪水信息。</p><p>除了 <code>IN</code> 类型的参数，MySQL 存储过程还支持 <code>OUT</code> 和 <code>INOUT</code><br>类型的参数，用于将存储过程内部计算得到的结果或状态返回给调用方。存储过程还支持条件语句、循环语句、异常处理等高级语言特性，可以实现更加复杂的逻辑。</p><h2 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h2><p>下面演示一个简单的 MySQL 存储过程，它接收一个参数 <code>dept_name</code>，查询名为<br><code>employees</code><br>的表中在该部门工作的员工的姓名和薪水信息，并将结果输出到控制台。</p><p>首先，我们需要创建一个名为 <code>employees</code> 的表，并插入一些数据，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">  emp_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  emp_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  dept_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  salary <span class="type">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (emp_id, emp_name, dept_name, salary)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>, <span class="number">5000.00</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>, <span class="number">6000.00</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;Marketing&#x27;</span>, <span class="number">7000.00</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Marketing&#x27;</span>, <span class="number">8000.00</span>);</span><br></pre></td></tr></table></figure><p>接下来，我们可以创建一个名为 <code>get_dept_employees</code> 的存储过程，代码如下：</p><p>注：DELIMITER 命令在MySQL命令行客户端之外，是不支持的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_dept_employees(<span class="keyword">IN</span> dept_name <span class="type">VARCHAR</span>(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> emp_name <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> emp_salary <span class="type">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">DECLARE</span> cur <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line">    <span class="keyword">SELECT</span> emp_name, salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> dept_name <span class="operator">=</span> dept_name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">OPEN</span> cur;</span><br><span class="line">  REPEAT</span><br><span class="line">    <span class="keyword">FETCH</span> cur <span class="keyword">INTO</span> emp_name, emp_salary;</span><br><span class="line">    IF <span class="keyword">NOT</span> done <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Employee name: &#x27;</span>, emp_name) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line">      <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Employee salary: &#x27;</span>, emp_salary) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">  UNTIL done <span class="keyword">END</span> REPEAT;</span><br><span class="line">  <span class="keyword">CLOSE</span> cur;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">这段代码是用于创建一个名为&quot;get_dept_employees&quot;的存储过程，它根据传入的部门名称（dept_name），获取该部门的员工信息。</span><br><span class="line"></span><br><span class="line">让我逐行解释这段代码：</span><br><span class="line"></span><br><span class="line">DELIMITER //</span><br><span class="line">这个语句将分隔符设置为&quot;//&quot;，因为存储过程中包含多个语句，需要使用不同于默认分隔符的分隔符。</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE get_dept_employees(IN dept_name VARCHAR(50))</span><br><span class="line">这是创建存储过程的语句。存储过程名为&quot;get_dept_employees&quot;，它接受一个输入参数dept_name，类型为VARCHAR，最大长度为50。</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">存储过程的开始标志，表示接下来是存储过程的主体部分。</span><br><span class="line"></span><br><span class="line">DECLARE emp_name VARCHAR(50);</span><br><span class="line">这是声明一个局部变量emp_name，用于存储员工姓名，类型为VARCHAR，最大长度为50。</span><br><span class="line"></span><br><span class="line">DECLARE emp_salary DECIMAL(8, 2);</span><br><span class="line">这是声明一个局部变量emp_salary，用于存储员工工资，类型为DECIMAL，总共8位数，其中2位为小数。</span><br><span class="line"></span><br><span class="line">DECLARE cur CURSOR FOR SELECT emp_name, salary FROM employees WHERE dept_name = dept_name;</span><br><span class="line">这是声明一个游标cur，用于查询符合条件的员工信息。游标是一种数据结构，用于逐行访问查询结果。</span><br><span class="line"></span><br><span class="line">OPEN cur;</span><br><span class="line">打开游标，准备开始遍历查询结果。</span><br><span class="line"></span><br><span class="line">REPEAT</span><br><span class="line">开始一个循环，用于遍历查询结果。</span><br><span class="line"></span><br><span class="line">FETCH cur INTO emp_name, emp_salary;</span><br><span class="line">从游标中获取一行数据，并将结果存储到emp_name和emp_salary变量中。</span><br><span class="line"></span><br><span class="line">IF NOT done THEN</span><br><span class="line">判断是否还有更多的数据行可获取。</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(&#x27;Employee name: &#x27;, emp_name) AS result;</span><br><span class="line">如果还有数据行，输出员工姓名。</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(&#x27;Employee salary: &#x27;, emp_salary) AS result;</span><br><span class="line">输出员工工资。</span><br><span class="line"></span><br><span class="line">END IF;</span><br><span class="line">结束条件判断。</span><br><span class="line"></span><br><span class="line">UNTIL done END REPEAT;</span><br><span class="line">继续循环，直到没有更多的数据行可获取。</span><br><span class="line"></span><br><span class="line">CLOSE cur;</span><br><span class="line">关闭游标。</span><br><span class="line"></span><br><span class="line">END //</span><br><span class="line">存储过程主体部分结束标志。</span><br></pre></td></tr></table></figure><p>可以尝试使用以下修正后的代码，它没有使用DELIMITER命令，并对存储过程的语法进行了适当调整：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE get_dept_employees(IN dept_name VARCHAR(50))</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE emp_name VARCHAR(50);</span><br><span class="line">  DECLARE emp_salary DECIMAL(8, 2);</span><br><span class="line"></span><br><span class="line">  DECLARE done INT DEFAULT FALSE;</span><br><span class="line"></span><br><span class="line">  DECLARE cur CURSOR FOR</span><br><span class="line">    SELECT emp_name, salary FROM employees WHERE dept_name = dept_name;</span><br><span class="line"></span><br><span class="line">  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;</span><br><span class="line"></span><br><span class="line">  OPEN cur;</span><br><span class="line">  FETCH cur INTO emp_name, emp_salary;</span><br><span class="line"></span><br><span class="line">  WHILE NOT done DO</span><br><span class="line">    SELECT CONCAT(&#x27;Employee name: &#x27;, emp_name) AS result;</span><br><span class="line">    SELECT CONCAT(&#x27;Employee salary: &#x27;, emp_salary) AS result;</span><br><span class="line"></span><br><span class="line">    FETCH cur INTO emp_name, emp_salary;</span><br><span class="line">  END WHILE;</span><br><span class="line"></span><br><span class="line">  CLOSE cur;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>该存储过程接收一个参数 <code>dept_name</code>，声明了两个变量 <code>emp_name</code> 和<br><code>emp_salary</code>，用于存储从表中查询到的员工姓名和薪水信息。然后使用<br><code>CURSOR</code> 语句创建一个游标<br><code>cur</code>，用于遍历在该部门工作的所有员工的信息。接下来，在一个循环中，使用<br><code>FETCH</code> 语句从游标中取出一条员工记录，并使用 <code>SELECT</code><br>语句将员工姓名和薪水信息输出到控制台。最后，使用 <code>CLOSE</code> 语句关闭游标。</p><p>要调用该存储过程，可以使用 <code>CALL</code> 语句，并传递一个参数<br><code>dept_name</code>。例如，要查询部门名为 <code>Sales</code><br>的员工的姓名和薪水信息，可以使用以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> get_dept_employees(<span class="string">&#x27;Sales&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行该命令后，MySQL 会调用 <code>get_dept_employees</code><br>存储过程，并输出员工姓名和薪水信息。</p><h1 id="MySQL-存储过程语法"><a href="#MySQL-存储过程语法" class="headerlink" title="MySQL 存储过程语法"></a>MySQL 存储过程语法</h1><p>MySQL 存储过程的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE procedure_name ([IN | OUT | INOUT] parameter_name parameter_type [, ...])</span><br><span class="line">[characteristic ...] routine_body</span><br></pre></td></tr></table></figure><p>其中，<code>procedure_name</code> 是存储过程的名称，<code>parameter_name</code> 和<br><code>parameter_type</code> 是存储过程的参数，可以有多个参数，参数类型可以是 MySQL<br>数据类型或者用户定义的类型。</p><p>参数的类型可以是 <code>IN</code>、<code>OUT</code> 或者<br><code>INOUT</code>，分别表示输入参数、输出参数和输入输出参数。输入参数用于向存储过程传递值，输出参数用于从存储过程中返回值，输入输出参数可以在存储过程内部修改参数的值，并将修改后的值返回给调用者。</p><p><code>characteristic</code> 是一些存储过程的特性，包括<br><code>COMMENT</code>、<code>LANGUAGE</code>、<code>DETERMINISTIC</code>、<code>SQL SECURITY</code><br>等。这些特性可以用于指定存储过程的注释、语言、确定性等信息。</p><p><code>routine_body</code> 是存储过程的主体，包括一系列的 SQL<br>语句、控制流语句、游标语句等，用于执行特定的操作。存储过程可以包含条件语句、循环语句、游标语句、异常处理语句等，以实现复杂的业务逻辑。</p><p>存储过程创建完成后，可以使用 <code>CALL</code><br>语句来调用存储过程，并传递相应的参数。例如：</p><pre><code>CALL procedure_name(param1, param2, ...);</code></pre><p>执行该命令后，MySQL<br>会调用指定的存储过程，并按照存储过程的定义执行相应的操作。</p><h2 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h2><p><strong>准备数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    gender ENUM(<span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;female&#x27;</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>以下是一个初始化数据的例子，演示 MySQL 存储过程的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> init_data(<span class="keyword">IN</span> n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    WHILE i <span class="operator">&lt;=</span> n DO</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (name, gender, age) <span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;student&#x27;</span>, i), IF(i <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span>, <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;female&#x27;</span>), <span class="number">18</span> <span class="operator">+</span> i);</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> init_data(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>上面的例子创建了一个名为 <code>init_data</code> 的存储过程，用于向 <code>students</code><br>表中插入指定数量的数据。存储过程接受一个输入参数<br><code>n</code>，表示要插入的数据的数量。</p><p>存储过程的主体包含一个 <code>DECLARE</code> 语句，用于声明一个变量<br><code>i</code>，并将其初始化为 1。接着使用 <code>WHILE</code><br>循环语句，循环插入数据，直到插入的数据量达到 <code>n</code>。</p><p>循环体内部使用 <code>INSERT INTO</code> 语句向 <code>students</code> 表中插入数据，其中使用<br><code>CONCAT</code> 函数生成学生的名称，使用 <code>IF</code> 函数生成学生的性别，使用 <code>+</code><br>运算符生成学生的年龄。循环体内还使用 <code>SET</code> 语句将变量 <code>i</code> 的值加<br>1，实现循环计数。</p><p>存储过程定义完成后，使用 <code>CALL</code> 语句来调用存储过程，并传递一个参数<br>10。调用该存储过程后，MySQL 会自动向 <code>students</code> 表中插入 10<br>条数据，每条数据包含一个不同的学生名称、性别和年龄。</p><h1 id="MySQL存储过程声明变量"><a href="#MySQL存储过程声明变量" class="headerlink" title="MySQL存储过程声明变量"></a>MySQL存储过程声明变量</h1><p>在 MySQL 存储过程中，可以使用 <code>DECLARE</code> 语句声明变量，语法如下：</p><pre><code>DECLARE variable_name datatype [DEFAULT value];</code></pre><p>其中，<code>variable_name</code> 是变量名，<code>datatype</code> 是变量的数据类型，<code>DEFAULT</code><br>可选，用于指定变量的默认值。</p><p>下面是一个简单的例子，展示如何在存储过程中声明变量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_var()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> x <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> y <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SET</span> x <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">SET</span> y <span class="operator">=</span> x <span class="operator">+</span> <span class="number">5</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> x, y;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>该存储过程声明了两个整型变量 <code>x</code> 和 <code>y</code>，默认值均为 0。然后，将 <code>x</code><br>设置为 10，将 <code>y</code> 设置为 <code>x</code> 加上 5，最后将 <code>x</code> 和 <code>y</code><br>的值作为结果返回。</p><p>在执行该存储过程时，可以通过以下语句调用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> test_var();</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">|</span> y</span><br><span class="line"><span class="comment">--+--</span></span><br><span class="line"><span class="number">10</span><span class="operator">|</span><span class="number">15</span></span><br></pre></td></tr></table></figure><p>说明变量 <code>x</code> 和 <code>y</code> 的值被成功赋值，并且计算结果正确。</p><h1 id="MySQL存储过程流程控制"><a href="#MySQL存储过程流程控制" class="headerlink" title="MySQL存储过程流程控制"></a>MySQL存储过程流程控制</h1><p>在 MySQL<br>存储过程中，可以使用流程控制语句控制程序的流程，包括条件判断、循环和异常处理等。</p><p>以下是一些常用的流程控制语句：</p><ul><li><code>IF</code> 语句：用于执行条件判断，根据条件执行不同的操作。</li><li><code>CASE</code> 语句：类似于 <code>switch</code> 语句，根据不同的条件执行不同的操作。</li><li><code>WHILE</code> 循环：在满足条件的情况下，重复执行某个操作，直到条件不成立。</li><li><code>REPEAT</code><br>循环：先执行一次操作，然后在满足条件的情况下，重复执行该操作，直到条件不成立。</li><li><code>LOOP</code> 循环：无条件执行某个操作，直到遇到 <code>LEAVE</code> 语句或出现异常。</li><li><code>LEAVE</code> 语句：用于在循环中退出，配合 <code>LOOP</code> 或 <code>REPEAT</code> 循环使用。</li><li><code>ITERATE</code> 语句：用于跳过循环中的某一次迭代，配合 <code>WHILE</code> 或 <code>REPEAT</code><br>循环使用。</li><li><code>HANDLER</code> 语句：用于处理存储过程中的异常情况。</li></ul><p>下面是一个例子，展示了如何在存储过程中使用 <code>IF</code> 语句进行条件判断：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_if(x <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line">  </span><br><span class="line">  IF x <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;positive&#x27;</span>;</span><br><span class="line">  ELSEIF x <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;negative&#x27;</span>;</span><br><span class="line">  <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;zero&#x27;</span>;</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>该存储过程接受一个整型参数 <code>x</code>，根据 <code>x</code> 的正负性返回不同的结果。如果<br><code>x</code> 大于 0，则返回字符串 <code>&#39;positive&#39;</code>；如果 <code>x</code> 小于 0，则返回字符串<br><code>&#39;negative&#39;</code>；如果 <code>x</code> 等于 0，则返回字符串<br><code>&#39;zero&#39;</code>。最后，将结果返回给调用者。</p><p>在执行该存储过程时，可以通过以下语句调用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> test_if(<span class="number">10</span>); <span class="comment">-- 返回 &#x27;positive&#x27;</span></span><br><span class="line"><span class="keyword">CALL</span> test_if(<span class="number">-5</span>); <span class="comment">-- 返回 &#x27;negative&#x27;</span></span><br><span class="line"><span class="keyword">CALL</span> test_if(<span class="number">0</span>); <span class="comment">-- 返回 &#x27;zero&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="case实例"><a href="#case实例" class="headerlink" title="case实例"></a>case实例</h2><p>下面是一个使用 <code>CASE</code> 语句的存储过程例子，该存储过程接收一个整数参数<br><code>score</code>，并根据分数的不同，返回对应的评级。如果分数大于 90，则返回评级<br><code>&#39;A&#39;</code>，如果分数在 80-89 之间，则返回评级 <code>&#39;B&#39;</code>，以此类推。如果分数小于<br>60，则返回评级 <code>&#39;F&#39;</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> calculate_grade(<span class="keyword">IN</span> score <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> grade <span class="type">CHAR</span>(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SET</span> grade <span class="operator">=</span> </span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">      <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">      <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">AND</span> score <span class="operator">&lt;</span> <span class="number">90</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">      <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">70</span> <span class="keyword">AND</span> score <span class="operator">&lt;</span> <span class="number">80</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">      <span class="keyword">WHEN</span> score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">AND</span> score <span class="operator">&lt;</span> <span class="number">70</span> <span class="keyword">THEN</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line">      <span class="keyword">ELSE</span> <span class="string">&#x27;F&#x27;</span></span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Score:&#x27;</span>, score, <span class="string">&#x27; Grade:&#x27;</span>, grade) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在执行该存储过程时，可以通过以下语句调用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> calculate_grade(<span class="number">95</span>); <span class="comment">-- 返回 &#x27;Score: 95 Grade: A&#x27;</span></span><br><span class="line"><span class="keyword">CALL</span> calculate_grade(<span class="number">85</span>); <span class="comment">-- 返回 &#x27;Score: 85 Grade: B&#x27;</span></span><br><span class="line"><span class="keyword">CALL</span> calculate_grade(<span class="number">75</span>); <span class="comment">-- 返回 &#x27;Score: 75 Grade: C&#x27;</span></span><br><span class="line"><span class="keyword">CALL</span> calculate_grade(<span class="number">65</span>); <span class="comment">-- 返回 &#x27;Score: 65 Grade: D&#x27;</span></span><br><span class="line"><span class="keyword">CALL</span> calculate_grade(<span class="number">55</span>); <span class="comment">-- 返回 &#x27;Score: 55 Grade: F&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="while实例"><a href="#while实例" class="headerlink" title="while实例"></a>while实例</h2><p>下面是一个使用 <code>WHILE</code> 循环的存储过程例子，该存储过程接收一个整数参数<br><code>n</code>，并计算从 1 到 <code>n</code> 的所有整数的和。该存储过程使用一个变量 <code>i</code> 来迭代<br>1 到 <code>n</code> 的整数，并使用另一个变量 <code>sum</code> 来存储它们的和。在每次循环中，将<br><code>i</code> 的值添加到 <code>sum</code> 中，然后将 <code>i</code> 的值增加 1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> calculate_sum(<span class="keyword">IN</span> n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> sum <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  WHILE i <span class="operator">&lt;=</span> n DO</span><br><span class="line">    <span class="keyword">SET</span> sum <span class="operator">=</span> sum <span class="operator">+</span> i;</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> WHILE;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Sum of integers from 1 to &#x27;</span>, n, <span class="string">&#x27;: &#x27;</span>, sum) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在执行该存储过程时，可以通过以下语句调用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> calculate_sum(<span class="number">10</span>); <span class="comment">-- 返回 &#x27;Sum of integers from 1 to 10: 55&#x27;</span></span><br></pre></td></tr></table></figure><p>该存储过程将计算 1 到 10 的整数的和，结果为 55。</p><h2 id="repeat实例"><a href="#repeat实例" class="headerlink" title="repeat实例"></a>repeat实例</h2><p>下面是一个使用 <code>REPEAT</code> 循环的存储过程例子，该存储过程接收一个整数参数<br><code>n</code>，并计算从 1 到 <code>n</code> 的所有整数的和。该存储过程使用一个变量 <code>i</code> 来迭代<br>1 到 <code>n</code> 的整数，并使用另一个变量 <code>sum</code> 来存储它们的和。在每次循环中，将<br><code>i</code> 的值添加到 <code>sum</code> 中，然后将 <code>i</code> 的值增加 1。与 <code>WHILE</code><br>循环不同，<code>REPEAT</code> 循环保证循环体至少被执行一次。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> calculate_sum(<span class="keyword">IN</span> n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> sum <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  REPEAT</span><br><span class="line">    <span class="keyword">SET</span> sum <span class="operator">=</span> sum <span class="operator">+</span> i;</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  UNTIL i <span class="operator">&gt;</span> n <span class="keyword">END</span> REPEAT;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Sum of integers from 1 to &#x27;</span>, n, <span class="string">&#x27;: &#x27;</span>, sum) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在执行该存储过程时，可以通过以下语句调用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> calculate_sum(<span class="number">10</span>); <span class="comment">-- 返回 &#x27;Sum of integers from 1 to 10: 55&#x27;</span></span><br></pre></td></tr></table></figure><p>该存储过程将计算 1 到 10 的整数的和，结果为 55。</p><h1 id="MySQL存储过程异常处理"><a href="#MySQL存储过程异常处理" class="headerlink" title="MySQL存储过程异常处理"></a>MySQL存储过程异常处理</h1><p>MySQL 存储过程提供了多种异常处理方式，可以使用 <code>DECLARE</code><br>语句声明异常，并使用 <code>SIGNAL</code> 或 <code>RESIGNAL</code> 语句抛出异常，也可以使用<br><code>HANDLER</code><br>语句捕获异常并进行处理。以下是一个示例存储过程，演示了如何在存储过程中使用异常处理：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> divide_numbers(</span><br><span class="line">  <span class="keyword">IN</span> a <span class="type">INT</span>,</span><br><span class="line">  <span class="keyword">IN</span> b <span class="type">INT</span>,</span><br><span class="line">  <span class="keyword">OUT</span> <span class="keyword">result</span> <span class="keyword">DOUBLE</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> divide_by_zero <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;22012&#x27;</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> message <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line">  </span><br><span class="line">  IF b <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">SET</span> message <span class="operator">=</span> <span class="string">&#x27;Cannot divide by zero&#x27;</span>;</span><br><span class="line">    SIGNAL divide_by_zero <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> message;</span><br><span class="line">  <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> a <span class="operator">/</span> b;</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在上面的存储过程中，如果参数 <code>b</code> 的值为 <code>0</code>，则将抛出一个自定义的异常<br><code>divide_by_zero</code>，异常的 SQLSTATE 值为 <code>22012</code>，异常消息为<br><code>&#39;Cannot divide by zero&#39;</code>。如果没有抛出异常，将计算 <code>a / b</code><br>的值，并将结果赋给参数<br><code>result</code>。可以通过以下代码调用该存储过程，并捕获可能的异常：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="keyword">DOUBLE</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> error_code <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> error_message <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">CALL</span> divide_numbers(<span class="number">10</span>, <span class="number">2</span>, <span class="keyword">result</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;22012&#x27;</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">GET</span> DIAGNOSTICS <span class="keyword">CONDITION</span> <span class="number">1</span></span><br><span class="line">      error_code <span class="operator">=</span> RETURNED_SQLSTATE,</span><br><span class="line">      error_message <span class="operator">=</span> MESSAGE_TEXT;</span><br><span class="line">  <span class="keyword">END</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">CALL</span> divide_numbers(<span class="number">10</span>, <span class="number">0</span>, <span class="keyword">result</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> error_code, error_message;</span><br></pre></td></tr></table></figure><p>在上面的代码中，首先调用了存储过程 <code>divide_numbers</code>，计算了 <code>10 / 2</code><br>的值，并将结果赋给变量 <code>result</code>。然后，使用 <code>BEGIN</code> 和 <code>END</code><br>包装了另一个调用存储过程 <code>divide_numbers</code> 的块，该块将参数 <code>b</code><br>的值设置为 <code>0</code>，从而触发了异常。在 <code>BEGIN</code> 和 <code>END</code> 中，使用<br><code>DECLARE HANDLER</code> 语句声明了一个异常处理程序，当抛出 SQLSTATE 为 <code>22012</code><br>的异常时，将获取异常的 SQLSTATE 和消息，分别赋给变量 <code>error_code</code> 和<br><code>error_message</code>。最后，使用 <code>SELECT</code> 语句输出异常的 SQLSTATE 值和消息。</p><h1 id="MySQL触发器简介"><a href="#MySQL触发器简介" class="headerlink" title="MySQL触发器简介"></a>MySQL触发器简介</h1><p>MySQL触发器（Trigger）是一种在特定条件下自动执行的数据库对象，可以在数据表上定义触发器，以便在插入、更新或删除数据时自动执行相应的操作，如修改其他表中的数据或向日志表中插入日志等。MySQL触发器可以帮助开发人员简化数据操作，并确保数据的完整性和一致性。</p><p>MySQL触发器包括两种类型：BEFORE触发器和AFTER触发器。BEFORE触发器在数据被插入、更新或删除前被触发执行，而AFTER触发器在数据被插入、更新或删除后被触发执行。触发器可以定义在一个表的INSERT、UPDATE或DELETE事件上，也可以同时定义多个事件。</p><p>MySQL触发器的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">&#123;BEFORE <span class="operator">|</span> AFTER&#125; &#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> <span class="operator">|</span> <span class="keyword">DELETE</span>&#125;</span><br><span class="line"><span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">trigger_body</span><br></pre></td></tr></table></figure><p>其中，trigger_name是触发器的名称，table_name是被触发的数据表名，trigger_body是触发器的执行内容。在trigger_body中，可以使用NEW和OLD关键字来引用被插入、更新或删除的数据。</p><p>例如，以下是一个简单的MySQL触发器，当向orders表插入新数据时，自动向order_log表中插入一条日志：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> log_insert_trigger</span><br><span class="line">AFTER <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> orders <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_log(order_id, action, <span class="type">date</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (NEW.order_id, <span class="string">&#x27;insert&#x27;</span>, NOW());</span><br></pre></td></tr></table></figure><p>这段代码是用于创建一个触发器（trigger）的SQL语句。触发器是一种数据库对象，它可以在指定的事件发生时自动执行特定的操作。下面是对这段代码的解释：</p><ul><li><code>CREATE TRIGGER log_insert_trigger</code>:<br>这是创建触发器的语句，触发器的名称是 <code>log_insert_trigger</code>。</li><li><code>AFTER INSERT</code>: 这表示触发器在插入操作之后触发。</li><li><code>ON orders</code>: 这表示触发器应该应用于名为 <code>orders</code> 的表。</li><li><code>FOR EACH ROW</code>: 这表示触发器将针对每一行的插入操作执行一次。</li><li><code>INSERT INTO order_log(order_id, action, date) VALUES (NEW.order_id, &#39;insert&#39;, NOW())</code>:<br>这是在触发器中执行的操作。它插入一条新的记录到名为 <code>order_log</code><br>的表中。插入的值来自于 <code>NEW</code><br>伪行，它表示插入操作中的新行。插入的字段包括 <code>order_id</code>、<code>action</code> 和<br><code>date</code>，其中 <code>order_id</code> 的值来自于插入操作中的 <code>order_id</code><br>字段，<code>action</code> 值为 <code>&#39;insert&#39;</code>，<code>date</code> 值为当前的日期和时间（通过<br><code>NOW()</code> 函数获取）。</li></ul><p>综上所述，这段代码创建了一个名为 <code>log_insert_trigger</code> 的触发器，当在<br><code>orders</code> 表中进行插入操作时，它会在每一行插入后，将相应的数据插入到<br><code>order_log</code> 表中，记录了订单的插入操作、订单ID和插入时间。</p><blockquote><p>需要注意的是，MySQL触发器的使用应该谨慎，因为触发器会增加数据库的负担，可能会影响数据库的性能。因此，应该仅在必要时使用触发器，并且应该尽量避免使用复杂的触发器。</p></blockquote><h1 id="MySQL插入触发器"><a href="#MySQL插入触发器" class="headerlink" title="MySQL插入触发器"></a>MySQL插入触发器</h1><p>MySQL插入触发器（Insert<br>Trigger）是在MySQL数据库中，当向一个数据表插入新数据时触发执行的一种触发器。插入触发器可以让开发人员在数据插入之前或之后执行一些操作，例如插入到另一个数据表，修改插入数据的值等。</p><p>MySQL插入触发器的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">BEFORE <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> table_name</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">trigger_body</span><br></pre></td></tr></table></figure><p>其中，trigger_name是触发器的名称，table_name是被触发的数据表名，trigger_body是触发器的执行内容。在trigger_body中，可以使用NEW关键字来引用被插入的数据。</p><p>例如，以下是一个简单的MySQL插入触发器，当向orders表插入新数据时，自动向order_log表中插入一条日志：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> log_insert_trigger</span><br><span class="line">BEFORE <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> orders <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">SET</span> NEW.create_time <span class="operator">=</span> NOW();</span><br></pre></td></tr></table></figure><p>上面的例子中，当向orders表插入新数据时，触发器会将create_time字段的值设为当前时间。这个例子是一个BEFORE<br>INSERT触发器，它在数据插入之前执行，所以可以修改被插入的数据。</p><blockquote><p>需要注意的是，MySQL插入触发器的使用应该谨慎，因为触发器会增加数据库的负担，可能会影响数据库的性能。因此，应该仅在必要时使用触发器，并且应该尽量避免使用复杂的触发器。</p></blockquote><h2 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h2><p>以下是一个演示MySQL插入触发器的例子。</p><p>首先，我们创建一个示例数据表<code>users</code>，包含<code>id</code>、<code>name</code>和<code>age</code>字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  age <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后，我们创建一个<code>before insert</code>触发器，将<code>age</code>字段的默认值设置为<code>18</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> set_default_age</span><br><span class="line">BEFORE <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> users</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">SET</span> NEW.age <span class="operator">=</span> IFNULL(NEW.age, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>上述触发器会在每次向<code>users</code>表中插入新数据之前执行，并检查是否提供了<code>age</code>字段的值，如果没有，则将其设置为默认值18。</p><p>接着，我们创建一个<code>after insert</code>触发器，向<code>user_log</code>表中插入新记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_log (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  user_id <span class="type">INT</span>,</span><br><span class="line">  action <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="type">date</span> DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> log_insert_trigger</span><br><span class="line">AFTER <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> users</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_log (user_id, action, <span class="type">date</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (NEW.id, <span class="string">&#x27;insert&#x27;</span>, NOW());</span><br></pre></td></tr></table></figure><p>上述触发器会在每次向<code>users</code>表中插入新数据之后执行，并将<code>user_id</code>、<code>action</code>和<code>date</code>插入到<code>user_log</code>表中。</p><p>现在，我们可以向<code>users</code>表中插入一些数据，观察触发器的执行情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;Alice&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;Charlie&#x27;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><p>执行上述插入操作后，<code>users</code>表中的数据如下：</p><p>  id   name      age</p><hr><p>  1    Alice     20<br>  2    Bob       18<br>  3    Charlie   25</p><p>而<code>user_log</code>表中的数据如下：</p><p>  id   user_id   action   date</p><hr><p>  1    1         insert   2023-02-19 12:00:00<br>  2    2         insert   2023-02-19 12:00:01<br>  3    3         insert   2023-02-19 12:00:02</p><p>观察上述结果可以发现，第一条插入语句指定了<code>age</code>字段的值，所以触发器不会对其进行修改；第二条插入语句没有指定<code>age</code>字段的值，所以触发器会将其默认设置为18；第三条插入语句指定了<code>age</code>字段的值，所以触发器不会对其进行修改。同时，每次插入数据后，<code>user_log</code>表中都会插入一条日志记录。</p><p>这就是一个简单的MySQL插入触发器的演示。</p><blockquote><p>需要注意的是，触发器的执行顺序是由触发器类型和事件类型决定的。在本例中，<code>set_default_age</code>触发器是<code>before insert</code>类型的，所以它会在插入新数据之前执行；而<code>log_insert_trigger</code>触发器是<code>after insert</code>类型的，所以它会在插入新数据之后执行。</p></blockquote><blockquote><p>此外，需要注意<code>set_default_age</code>触发器使用了<code>IFNULL()</code>函数来判断<code>age</code>字段的值是否为<code>NULL</code>。如果不使用<code>IFNULL()</code>函数，则会遇到一个问题：当插入一条<code>age</code>字段值为0的记录时，触发器会将其修改为默认值18。这是因为MySQL将0视为<code>NULL</code>的一种特殊情况，所以在使用触发器时需要特别注意。</p></blockquote><h1 id="MySQL删除触发器"><a href="#MySQL删除触发器" class="headerlink" title="MySQL删除触发器"></a>MySQL删除触发器</h1><p>在MySQL中，<code>DELETE</code>触发器用于在删除表中的数据之前或之后执行一些操作。与<code>INSERT</code>和<code>UPDATE</code>触发器类似，<code>DELETE</code>触发器也可以分为<code>BEFORE</code>和<code>AFTER</code>两种类型。</p><p>以下是一个简单的例子，演示了如何使用<code>BEFORE DELETE</code>触发器：</p><p>首先，我们创建一个示例表<code>employees</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  department <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  salary <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后，我们创建一个<code>BEFORE DELETE</code>触发器，在删除员工记录时将其记录到<code>employee_log</code>表中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee_log (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  employee_id <span class="type">INT</span>,</span><br><span class="line">  action <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="type">date</span> DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> log_delete_trigger</span><br><span class="line">BEFORE <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> employees</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee_log (employee_id, action, <span class="type">date</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (OLD.id, <span class="string">&#x27;delete&#x27;</span>, NOW());</span><br></pre></td></tr></table></figure><p>上述触发器会在每次删除<code>employees</code>表中的一条记录之前执行，并将被删除记录的<code>id</code>、操作类型和日期插入到<code>employee_log</code>表中。</p><p>接下来，我们可以向<code>employees</code>表中插入一些数据，并删除其中一些记录，观察触发器的执行情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, department, salary) <span class="keyword">VALUES</span> (<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, department, salary) <span class="keyword">VALUES</span> (<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Marketing&#x27;</span>, <span class="number">6000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, department, salary) <span class="keyword">VALUES</span> (<span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;Engineering&#x27;</span>, <span class="number">7000</span>);</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>执行上述操作后，<code>employees</code>表中的数据如下：</p><p>  id   name      department    salary</p><hr><p>  1    Alice     Sales         5000<br>  3    Charlie   Engineering   7000</p><p>而<code>employee_log</code>表中的数据如下：</p><p>  id   employee_id   action   date</p><hr><p>  1    2             delete   2023-02-19 12:00:00</p><p>观察上述结果可以发现，在执行<code>DELETE</code>操作时，<code>log_delete_trigger</code>触发器先于<code>DELETE</code>语句执行，将要删除的员工记录的信息插入到<code>employee_log</code>表中，然后才执行<code>DELETE</code>语句删除记录。</p><p>需要注意的是，<code>DELETE</code>触发器的执行顺序是由触发器类型和事件类型决定的。在本例中，<code>log_delete_trigger</code>触发器是<code>BEFORE DELETE</code>类型的，所以它会在执行<code>DELETE</code>语句之前执行。</p><h1 id="MySQL更新触发器"><a href="#MySQL更新触发器" class="headerlink" title="MySQL更新触发器"></a>MySQL更新触发器</h1><p>在MySQL中，<code>UPDATE</code>触发器用于在更新表中的数据之前或之后执行一些操作。与<code>INSERT</code>和<code>DELETE</code>触发器类似，<code>UPDATE</code>触发器也可以分为<code>BEFORE</code>和<code>AFTER</code>两种类型。</p><p>以下是一个简单的例子，演示了如何使用<code>BEFORE UPDATE</code>触发器：</p><p>首先，我们创建一个示例表<code>employees</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  department <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  salary <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后，我们创建一个<code>BEFORE UPDATE</code>触发器，在更新员工记录时将其记录到<code>employee_log</code>表中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee_log (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  employee_id <span class="type">INT</span>,</span><br><span class="line">  action <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="type">date</span> DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> log_update_trigger</span><br><span class="line">BEFORE <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> employees</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee_log (employee_id, action, <span class="type">date</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (OLD.id, <span class="string">&#x27;update&#x27;</span>, NOW());</span><br></pre></td></tr></table></figure><p>上述触发器会在每次更新<code>employees</code>表中的一条记录之前执行，并将被更新记录的<code>id</code>、操作类型和日期插入到<code>employee_log</code>表中。</p><p>接下来，我们可以向<code>employees</code>表中插入一些数据，并更新其中一些记录，观察触发器的执行情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, department, salary) <span class="keyword">VALUES</span> (<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, department, salary) <span class="keyword">VALUES</span> (<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Marketing&#x27;</span>, <span class="number">6000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, department, salary) <span class="keyword">VALUES</span> (<span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;Engineering&#x27;</span>, <span class="number">7000</span>);</span><br><span class="line"><span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary<span class="operator">=</span><span class="number">8000</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>执行上述操作后，<code>employees</code>表中的数据如下：</p><p>  id   name      department    salary</p><hr><p>  1    Alice     Sales         5000<br>  2    Bob       Marketing     8000<br>  3    Charlie   Engineering   7000</p><p>而<code>employee_log</code>表中的数据如下：</p><p>  id   employee_id   action   date</p><hr><p>  1    2             update   2023-02-19 12:00:00</p><p>观察上述结果可以发现，在执行<code>UPDATE</code>操作时，<code>log_update_trigger</code>触发器先于<code>UPDATE</code>语句执行，将要更新的员工记录的信息插入到<code>employee_log</code>表中，然后才执行<code>UPDATE</code>语句更新记录。</p><blockquote><p>需要注意的是，<code>UPDATE</code>触发器的执行顺序是由触发器类型和事件类型决定的。在本例中，<code>log_update_trigger</code>触发器是<code>BEFORE UPDATE</code>类型的，所以它会在执行<code>UPDATE</code>语句之前执行。</p></blockquote><h1 id="MySQL索引简介"><a href="#MySQL索引简介" class="headerlink" title="MySQL索引简介"></a>MySQL索引简介</h1><p>在 MySQL 中，索引是用于提高数据库查询效率的一种数据结构。索引可以帮助<br>MySQL 快速地查找匹配某个条件的记录，从而大大缩短查询的时间。</p><p>MySQL 中常用的索引类型包括：</p><ol><li>B-Tree 索引：默认情况下，MySQL 使用 B-Tree 索引。B-Tree<br>索引对于全值匹配和前缀匹配非常高效，但对于范围查询的效率会有所下降。</li><li>Hash 索引：Hash 索引适合用于等值查询，但不适合用于范围查询，因为<br>Hash 索引无法排序。</li><li>Full-Text 索引：Full-Text<br>索引适用于全文搜索，可以对文本字段进行全文搜索匹配。</li></ol><p>在创建索引时，需要注意以下几点：</p><ol><li>对于经常查询的列，应该尽可能地为其创建索引，以提高查询效率。</li><li>索引并不是越多越好，创建过多的索引会导致查询效率降低，同时也会占用更多的存储空间。</li><li>对于频繁进行插入、更新或删除操作的表，不宜创建过多的索引，因为这些操作会对索引的维护产生额外的开销。</li></ol><p>以下是创建索引的示例代码：</p><pre><code>-- 为表中的单个列创建索引CREATE INDEX idx_name ON employee (name);-- 为表中的多个列创建联合索引CREATE INDEX idx_name_dept ON employee (name, department);-- 删除索引DROP INDEX idx_name ON employee;</code></pre><blockquote><p>需要注意的是，在创建索引时应该根据实际情况选择适当的索引类型和索引列，以提高查询效率并减少额外开销。同时，对于大表中的索引创建和删除操作需要谨慎，避免对数据库性能造成负面影响。</p></blockquote><h2 id="索引对于查询效率的影响"><a href="#索引对于查询效率的影响" class="headerlink" title="索引对于查询效率的影响"></a>索引对于查询效率的影响</h2><p>为了演示索引对于查询效率的影响，我们可以创建一个包含大量数据的表，并对其进行查询。首先，我们需要创建一个包含<br>1,000,000 条记录的 <code>user</code> 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向表中插入 1,000,000 条记录</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, username, email, password)</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    n,</span><br><span class="line">    CONCAT(<span class="string">&#x27;user&#x27;</span>, n),</span><br><span class="line">    CONCAT(<span class="string">&#x27;user&#x27;</span>, n, <span class="string">&#x27;@example.com&#x27;</span>),</span><br><span class="line">    MD5(RAND())</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="variable">@n</span> :<span class="operator">=</span> <span class="variable">@n</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> n </span><br><span class="line">     <span class="keyword">FROM</span> </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span>) t1, </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span>) t2, </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span>) t3, </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span>) t4, </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span>) t5, </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span>) t6, </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span>) t7, </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span>) t8, </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span>) t9, </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="variable">@n</span> :<span class="operator">=</span> <span class="number">0</span>) t10</span><br><span class="line">    ) t11;</span><br></pre></td></tr></table></figure><p>接下来，我们可以对 <code>user</code> 表的 <code>username</code> 列创建一个索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_username <span class="keyword">ON</span> <span class="keyword">user</span> (username);</span><br></pre></td></tr></table></figure><p>现在，我们可以对 <code>user</code><br>表进行两次查询，分别测试有无索引对查询效率的影响：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 username 为 &#x27;user50000&#x27; 的记录（有索引）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;user50000&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 username 为 &#x27;user50000&#x27; 的记录（无索引）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;user50000@example.com&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在测试结果中，第一次查询使用了 <code>idx_username</code><br>索引，查询时间很短；而第二次查询没有使用索引，查询时间相对较长。这表明，索引可以显著提高查询效率，特别是对于大表中的查询操作。但同时需要注意的是，对表的更新操作会对索引的维护产生额外的开销，因此需要谨慎地为表创建索引。</p><h1 id="MySQL-B-Tree-索引"><a href="#MySQL-B-Tree-索引" class="headerlink" title="MySQL B-Tree 索引"></a>MySQL B-Tree 索引</h1><p>MySQL B-Tree 索引是一种常见的索引类型，用于加速对表的查询操作。B-Tree<br>是一种平衡的多路搜索树，可以快速查找到指定值所对应的记录。</p><p>在 MySQL 中，B-Tree<br>索引可以用于加速对表的等值查询、范围查询和排序操作。当对表进行查询操作时，MySQL<br>可以利用 B-Tree 索引快速定位到符合条件的记录，从而提高查询效率。</p><p>B-Tree<br>索引的基本结构是一棵平衡的多路搜索树，其中每个节点可以包含多个关键字和指向子节点的指针。树的每个节点都可以包含多个数据记录，而数据记录的存储位置则由指向下一个节点的指针来指定。B-Tree<br>索引的叶子节点包含了表中的实际数据记录。</p><p>B-Tree<br>索引的优点在于可以快速查找到指定值所对应的记录，并且对于范围查询和排序操作也具有很好的支持。此外，B-Tree<br>索引可以自动维护索引的有序性，因此在进行排序操作时可以直接使用索引而不需要进行额外的排序操作。</p><p>然而，B-Tree<br>索引也存在一些缺点。例如，在对表进行插入、更新和删除操作时，需要对索引进行更新，这可能会对系统的性能产生影响。此外，B-Tree<br>索引在进行模糊查询等操作时可能会失去部分优势，因为它只能精确匹配给定的值。</p><p>综上所述，B-Tree<br>索引是一种常用的索引类型，可以用于加速对表的查询操作。但同时也需要注意，为了最大程度地发挥<br>B-Tree 索引的优势，需要根据具体的业务场景和查询需求进行优化。</p><h2 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h2><p>假设我们有一个名为 <code>employees</code> 的表，该表包含了员工的基本信息，其中 <code>id</code><br>为主键，为了提高查询效率，我们希望在 <code>employees</code> 表中添加一个 B-Tree<br>索引来加速对员工姓名的查询操作。</p><p>以下是在 MySQL 中创建 B-Tree 索引的示例代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建 employees 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加 B-Tree 索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> employees (name);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先创建了一个名为 <code>employees</code> 的表，并将 <code>id</code><br>设置为主键。接着，我们使用 <code>CREATE INDEX</code> 语句创建了一个名为 <code>idx_name</code><br>的 B-Tree 索引，该索引包含了 <code>employees</code><br>表中的所有姓名字段，并且用于加速对员工姓名的查询操作。</p><p>一旦创建了 B-Tree<br>索引，我们就可以使用它来加速对表的查询操作。例如，我们可以使用如下代码来查询名为<br>“Tom” 的员工：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Tom&#x27;</span>;</span><br></pre></td></tr></table></figure><p>MySQL 将会使用 B-Tree 索引来定位名为 “Tom”<br>的员工，并返回其基本信息。由于 B-Tree<br>索引可以自动维护索引的有序性，因此即使 <code>employees</code><br>表包含了大量数据，MySQL 也可以在很短的时间内完成查询操作。</p><blockquote><p>总之，B-Tree<br>索引是一种常见的索引类型，可以用于加速对表的查询操作。在实际应用中，我们需要根据具体的业务场景和查询需求进行优化，以达到最好的查询效果。</p></blockquote><h1 id="MySQL-Hash-索引"><a href="#MySQL-Hash-索引" class="headerlink" title="MySQL Hash 索引"></a>MySQL Hash 索引</h1><p>MySQL 中的 Hash 索引是一种散列索引，可以用于加速对表的查询操作。与<br>B-Tree 索引不同的是，Hash<br>索引并不维护索引数据的有序性，而是将索引数据散列到一个固定长度的哈希表中，并使用哈希算法对数据进行定位。当我们需要查询一个记录时，MySQL<br>将使用相同的哈希算法在哈希表中定位记录所在的位置，以获得相应的查询结果。</p><p>在 MySQL 中，我们可以使用 <code>CREATE TABLE</code> 语句的 <code>HASH</code> 子句来为表添加<br>Hash 索引，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表，并添加 Hash 索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">    INDEX idx_name (name) <span class="keyword">USING</span> HASH</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先创建了一个名为 <code>employees</code> 的表，并将 <code>id</code><br>设置为主键。接着，我们使用 <code>INDEX</code> 子句和 <code>USING HASH</code> 子句来为<br><code>employees</code> 表的 <code>name</code> 列添加了一个 Hash 索引。</p><p>需要注意的是，Hash 索引适用于等值查询操作，例如<br><code>WHERE name = &#39;Tom&#39;</code>，但不适用于范围查询操作，例如<br><code>WHERE name &gt; &#39;Tom&#39;</code>，因为 Hash 索引无法保证索引数据的有序性。此外，由于<br>Hash 索引需要在内存中维护哈希表，因此 Hash<br>索引的可用内存受到限制，如果哈希表过大，可能会导致内存溢出或性能下降等问题。</p><p>综上所述，Hash<br>索引是一种用于加速表查询操作的散列索引，适用于等值查询操作。在实际应用中，我们需要根据具体的业务场景和查询需求进行优化，以达到最好的查询效果。</p><h1 id="MySQL-Full-Text-索引"><a href="#MySQL-Full-Text-索引" class="headerlink" title="MySQL Full-Text 索引"></a>MySQL Full-Text 索引</h1><p>MySQL<br>Full-Text索引是一种全文索引技术，它支持更灵活的文本搜索。Full-Text索引可以帮助用户查找包含特定单词或短语的文本，而不仅仅是查找包含特定值的列。</p><p>以下是一个使用Full-Text索引的MySQL表的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">  id <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  title <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  body TEXT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">  FULLTEXT index_title_body (title, body)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们创建了一个名为”mytable”的表，其中包含一个名为”title”的列和一个名为”body”的TEXT类型列。我们为这两列创建了一个Full-Text索引，这意味着MySQL将可以使用该索引进行全文搜索。</p><p>现在，我们可以向这个表中插入一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable (id, title, body) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;First article&#x27;</span>, <span class="string">&#x27;This is the body of the first article.&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable (id, title, body) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Second article&#x27;</span>, <span class="string">&#x27;This is the body of the second article.&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable (id, title, body) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Third article&#x27;</span>, <span class="string">&#x27;This is the body of the third article.&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable (id, title, body) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;Fourth article&#x27;</span>, <span class="string">&#x27;This is the body of the fourth article.&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在，我们可以使用以下查询来查找包含特定单词的文本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(title, body) AGAINST(<span class="string">&#x27;article&#x27;</span>);</span><br></pre></td></tr></table></figure><p>此查询将使用我们创建的Full-Text索引来查找包含”article”单词的行。Full-Text索引的优点是它支持对文本进行复杂的搜索，包括支持通配符和布尔运算符等高级搜索功能，这些功能在普通的索引中不可用。但是需要注意的是，Full-Text索引在处理大量文本时可能会比较慢，因此应该根据实际情况进行权衡和优化。</p><h1 id="MySQL索引性能分析"><a href="#MySQL索引性能分析" class="headerlink" title="MySQL索引性能分析"></a>MySQL索引性能分析</h1><p>MySQL索引的性能分析是优化查询性能的关键部分，以下是一些用于分析MySQL索引性能的技术：</p><ol><li>Explain命令：Explain命令可以解释查询语句的执行计划，包括哪些索引被使用、查询的优化方式等。通过分析Explain输出，可以找出查询性能瓶颈并进行优化。</li><li>Slow Query Log：启用Slow Query<br>Log可以记录查询执行时间超过指定阈值的查询，从而帮助识别哪些查询需要进行优化。Slow<br>Query Log记录的查询还包括执行计划，可以用于进一步分析查询性能问题。</li><li>MySQL Performance Schema：Performance Schema是MySQL<br>5.5及以上版本中的一个特性，它提供了对MySQL数据库的性能监控和分析功能。通过Performance<br>Schema，可以监控索引使用情况、查询执行时间、锁竞争等信息，以便更好地优化查询性能。</li><li>使用索引分析工具：除了MySQL自带的工具，还可以使用一些第三方工具来分析索引性能。例如，pt-index-usage工具可以分析索引使用情况，pt-duplicate-key-checker工具可以分析重复索引，pt-online-schema-change工具可以在线修改表结构等。</li></ol><blockquote><p>需要注意的是，索引性能分析需要综合考虑多个因素，包括数据分布、查询复杂度、索引类型等。因此，对于复杂的查询和数据场景，需要进行多方面的分析和测试，才能找到最优的索引策略。</p></blockquote><h1 id="MySQL索引性能分析-Explain命令的用法"><a href="#MySQL索引性能分析-Explain命令的用法" class="headerlink" title="MySQL索引性能分析 Explain命令的用法"></a>MySQL索引性能分析 Explain命令的用法</h1><p>Explain命令是MySQL中用于解释查询执行计划的命令，它可以帮助我们分析查询的性能瓶颈和优化查询。以下是Explain命令的用法：</p><p>Explain语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>通过Explain命令，我们可以获取查询语句的执行计划，包括哪些索引被使用、查询的优化方式等。执行Explain命令后，MySQL会返回一个包含以下列的结果集：</p><ul><li>id：查询序列号，用于标识每个查询的序列号。如果查询语句是复合查询（如使用UNION或子查询），则每个查询语句都会有一个唯一的序列号。</li><li>select_type：查询类型，表示查询的类型，如SIMPLE（简单查询）、SUBQUERY（子查询）、UNION（多个查询合并）等。</li><li>table：被访问的表名。</li><li>partitions：表分区。</li><li>type：访问类型，表示MySQL如何访问表，如ALL（全表扫描）、index（索引扫描）、range（范围扫描）、ref（基于索引引用的行）、const（常量）等。</li><li>possible_keys：可能使用的索引，表示MySQL可以使用哪些索引来处理查询。</li><li>key：实际使用的索引，表示MySQL实际上使用了哪些索引来处理查询。</li><li>key_len：索引长度。</li><li>ref：列或常量与索引的匹配方式。</li><li>rows：估计的结果集行数。</li><li>filtered：结果集的过滤率。</li><li>Extra：附加信息，包括使用的索引类型、使用的临时表等。</li></ul><p>通过分析Explain输出，我们可以找出查询性能瓶颈并进行优化，例如：</p><ol><li>索引优化：通过查看possible_keys和key列，我们可以看到查询中使用了哪些索引，如果key列的值为NULL，说明查询没有使用索引。可以通过优化查询语句或增加适当的索引来提高查询性能。</li><li>表优化：通过查看type列，我们可以看到MySQL如何访问表。如果type列的值为ALL，说明查询使用了全表扫描，可能导致查询性能问题。可以通过优化查询语句或增加索引来改善查询性能。</li><li>优化查询语句：通过查看Extra列，我们可以看到一些额外的信息，如是否使用了临时表、是否使用了文件排序等。如果Extra列的值为Using<br>filesort或Using<br>temporary，说明查询使用了文件排序或临时表，可能导致查询性能问题。可以通过优化查询语句来避免这些问题。</li></ol><blockquote><p>需要注意的是，Explain输出的结果只是查询执行计划的估算值，实际执行结果可能会因为多种因素而有所不同。因此，在进行优化之前，应该进行多次测试和分析，以确保优化的准确性。</p></blockquote><h2 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h2><p>假设我们有一张名为<code>user</code>的表，包含如下字段：<code>id</code>、<code>name</code>、<code>age</code>、<code>gender</code>、<code>salary</code>、<code>address</code>，其中<code>id</code>为主键。现在我们想要查询年龄在25岁及以下、工资在5000元及以上的男性用户信息，查询语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, age, gender, salary, address <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> age <span class="operator">&lt;=</span> <span class="number">25</span> <span class="keyword">AND</span> gender <span class="operator">=</span> <span class="string">&#x27;male&#x27;</span> <span class="keyword">AND</span> salary <span class="operator">&gt;=</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><p>接下来，我们可以使用Explain命令来分析这个查询语句的执行计划，具体步骤如下：</p><ol><li>创建user表并插入数据：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    salary <span class="type">INT</span>,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, gender, salary, address)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">6000</span>, <span class="string">&#x27;Beijing&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Jerry&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">5500</span>, <span class="string">&#x27;Shanghai&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;female&#x27;</span>, <span class="number">7000</span>, <span class="string">&#x27;Guangzhou&#x27;</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;John&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">4800</span>, <span class="string">&#x27;Hangzhou&#x27;</span>),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;Lisa&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;female&#x27;</span>, <span class="number">5200</span>, <span class="string">&#x27;Chengdu&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li>使用Explain命令分析查询语句：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> id, name, age, gender, salary, address <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> age <span class="operator">&lt;=</span> <span class="number">25</span> <span class="keyword">AND</span> gender <span class="operator">=</span> <span class="string">&#x27;male&#x27;</span> <span class="keyword">AND</span> salary <span class="operator">&gt;=</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id  select_type <span class="keyword">table</span>   partitions  type    possible_keys   key key_len <span class="keyword">ref</span> <span class="keyword">rows</span>    filtered    Extra</span><br><span class="line"><span class="number">1</span>   SIMPLE  <span class="keyword">user</span>    <span class="keyword">NULL</span>    <span class="keyword">ref</span> idx_age_gender_salary   idx_age_gender_salary   <span class="number">34</span>  const,const    <span class="number">2</span>   <span class="number">100.00</span>  <span class="keyword">Using</span> index <span class="keyword">condition</span></span><br></pre></td></tr></table></figure><p>从上面的结果可以看出，该查询使用了<code>idx_age_gender_salary</code>索引，并且使用了索引条件过滤。也就是说，查询首先使用<code>age</code>和<code>gender</code>字段进行索引扫描，然后再使用<code>salary</code>字段进行筛选，最后返回满足条件的数据。可以看到，Explain命令输出的结果对我们分析查询性能有很大的帮助。</p><h1 id="MySQL慢查询日志的配置和管理"><a href="#MySQL慢查询日志的配置和管理" class="headerlink" title="MySQL慢查询日志的配置和管理"></a>MySQL慢查询日志的配置和管理</h1><p>MySQL慢查询日志记录了执行时间超过指定阈值的SQL语句，可以用于优化查询和发现潜在的性能问题。在本次回答中，我们将介绍如何配置和管理MySQL慢查询日志。</p><h3 id="配置慢查询日志"><a href="#配置慢查询日志" class="headerlink" title="配置慢查询日志"></a>配置慢查询日志</h3><ol><li><p>打开MySQL配置文件<code>my.cnf</code>，通常在<code>/etc/mysql</code>目录下。如果不存在该文件，可以创建一个。</p></li><li><p>找到<code>[mysqld]</code>节点，在其中添加如下配置项：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log <span class="operator">=</span> <span class="number">1</span>    # 开启慢查询日志</span><br><span class="line">slow_query_log_file <span class="operator">=</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>mysql<span class="operator">-</span>slow.log  # 慢查询日志文件路径</span><br><span class="line">long_query_time <span class="operator">=</span> <span class="number">2</span>   # 定义慢查询阈值，单位为秒</span><br></pre></td></tr></table></figure><p>上述配置的含义如下：</p><ul><li><code>slow_query_log</code>：设置是否开启慢查询日志，0表示关闭，1表示开启，默认为0。</li><li><code>slow_query_log_file</code>：指定慢查询日志文件路径和文件名。</li><li><code>long_query_time</code>：定义慢查询阈值，超过该阈值的SQL语句将被记录到慢查询日志中。默认为10秒。</li></ul></li><li><p>保存修改后的配置文件并重启MySQL服务。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mysql restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="查看慢查询日志"><a href="#查看慢查询日志" class="headerlink" title="查看慢查询日志"></a>查看慢查询日志</h3><ol><li><p>登录MySQL命令行客户端。</p></li><li><p>执行以下命令，打开慢查询日志：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行一些查询语句，让MySQL记录慢查询日志。</p></li><li><p>执行以下命令，查看最近一次慢查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.slow_log <span class="keyword">ORDER</span> <span class="keyword">BY</span> start_time <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>该命令将显示最近一次慢查询的详细信息，包括查询语句、执行时间、扫描行数等。</p></li></ol><h3 id="管理慢查询日志"><a href="#管理慢查询日志" class="headerlink" title="管理慢查询日志"></a>管理慢查询日志</h3><ol><li><p>关闭慢查询日志：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;OFF&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>清空慢查询日志：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file <span class="operator">=</span> <span class="string">&#x27;/dev/null&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意：将慢查询日志文件路径设置为<code>/dev/null</code>将日志输出到系统黑洞中，实际上并不会清空日志文件，需要手动删除。</p></li><li><p>修改慢查询阈值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>该命令将慢查询阈值修改为5秒。</p></li><li><p>查看慢查询日志路径：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;slow_query_log_file&#x27;</span>;</span><br></pre></td></tr></table></figure><p>该命令将显示慢查询日志文件路径。</p></li></ol><p>总之，MySQL慢查询日志对于排查性能问题和优化查询语句非常有用。配置和管理慢查询日志需要一些经验和技巧。</p><h1 id="MySQL-Performance-Schema"><a href="#MySQL-Performance-Schema" class="headerlink" title="MySQL Performance Schema"></a>MySQL Performance Schema</h1><p>MySQL Performance Schema是MySQL<br>5.5版本引入的一个新特性，它提供了一系列工具和接口来监控MySQL服务器的性能。Performance<br>Schema会在MySQL服务器内存中维护一些系统变量和状态信息，这些信息包括线程、锁、IO、查询等方面的数据，可以帮助我们了解MySQL服务器的性能瓶颈所在，从而进行针对性的优化。</p><p>下面简单介绍一下Performance Schema中与索引性能分析相关的内容：</p><ol><li><code>table_io_waits_summary_by_index_usage</code>表：该表记录了每个索引被使用的次数、等待的时间和锁定时间等信息。可以通过查询该表来了解每个索引的使用情况，从而判断哪些索引使用频率低、哪些索引需要优化。</li><li><code>table_lock_waits_summary_by_table</code>表：该表记录了每张表的锁定情况，包括锁定次数、等待时间、等待次数等。可以通过查询该表来了解哪些表被频繁锁定，从而判断哪些查询需要优化。</li><li><code>events_statements_summary_by_digest</code>表：该表记录了每个SQL语句的执行情况，包括执行次数、执行时间、等待时间等。可以通过查询该表来了解每个SQL语句的性能瓶颈所在，从而进行针对性的优化。</li><li><code>events_statements_summary_by_index_usage</code>表：该表记录了每个索引被使用的情况，包括使用次数、等待时间、扫描行数等。可以通过查询该表来了解每个索引的使用情况，从而判断哪些索引使用频率低、哪些索引需要优化。</li></ol><p>在使用Performance Schema进行索引性能分析时，需要先启用Performance<br>Schema并配置相关参数，例如设置<code>performance_schema=on</code>启用Performance<br>Schema、设置<code>performance_schema_max_table_instances</code>限制Performance<br>Schema最多能记录的表数等。然后可以通过查询Performance<br>Schema中的各个表来获取性能信息。需要注意的是，Performance<br>Schema会占用一定的系统资源，因此需要根据系统资源情况来配置相关参数。</p><h2 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h2><p>以下是一个使用Performance Schema进行索引性能分析的例子：</p><ol><li>确认是否启用了Performance Schema</li></ol><p>在MySQL命令行界面中输入以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%performance_schema%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果输出结果中<code>performance_schema</code>的值为<code>ON</code>，则表示已经启用了Performance<br>Schema。</p><ol><li>创建一个测试表并插入数据</li></ol><p>在MySQL命令行界面中输入以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">  INDEX name_age_idx (name, age)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (id, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (id, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="number">25</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (id, name, age) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (id, name, age) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;David&#x27;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (id, name, age) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;Eve&#x27;</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>这里创建了一个名为<code>test_table</code>的表，包含3个字段：<code>id</code>、<code>name</code>、<code>age</code>。其中<code>id</code>字段为主键，<code>name</code>和<code>age</code>字段组合成一个索引。插入了5条测试数据。</p><ol><li>查询<code>table_io_waits_summary_by_index_usage</code>表</li></ol><p>在MySQL命令行界面中输入以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> performance_schema.table_io_waits_summary_by_index_usage;</span><br></pre></td></tr></table></figure><p>这条命令将查询<code>table_io_waits_summary_by_index_usage</code>表，该表记录了每个索引被使用的次数、等待的时间和锁定时间等信息。执行该命令后，会输出类似如下的结果：</p><pre><code>+-------------+--------------+-----------+----------------------+-----------+-----------+----------+-------------+-------------+| OBJECT_TYPE | OBJECT_SCHEMA| OBJECT_NAME| INDEX_NAME           | COUNT_READ| COUNT_WRITE|SUM_TIMER_READ| SUM_TIMER_WRITE| SUM_TIMER_WAIT|+-------------+--------------+-----------+----------------------+-----------+-----------+----------+-------------+-------------+| TABLE       | test         | test_table| PRIMARY              | 5        | 0         | 0            | 0             | 0             || TABLE       | test         | test_table| name_age_idx         | 0        | 1         | 0            | 122           | 11            |+-------------+--------------+-----------+----------------------+-----------+-----------+----------+-------------+-------------+</code></pre><p>可以看到，<code>name_age_idx</code>索引被使用了1次，读取了0行数据，写入了1行数据，总等待时间为11微秒。</p><ol><li>查询<code>events_statements_summary_by_digest</code>表</li></ol><p>在MySQL命令行界面中输入以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> performance_schema.events_statements_summary_by_digest <span class="keyword">WHERE</span> DIGEST_TEXT <span class="keyword">LIKE</span> <span class="string">&#x27;%test_table%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这条命令将查询<code>events_statements_summary_by_digest</code>表，该表记录了每个SQL语句的执行情况，包括执行次数、执行时间、等待时间等。执行该命令后，会输出类似如下的结果：</p><pre><code>| DIGEST                      | SCHEMA_NAME | DIGEST_TEXT                                                                  | COUNT_STAR | SUM_TIMER_WAIT | SUM_LOCK_TIME | SUM_ROWS_SENT | SUM_ROWS_EXAMINED | SUM_CREATED_TMP_DISK_TABLES | SUM_CREATED_TMP_TABLES | SUM_SELECT_FULL_JOIN | SUM_SELECT_FULL_RANGE_JOIN | SUM_SELECT_RANGE | SUM_SELECT_RANGE_CHECK | SUM_SELECT_SCAN | SUM_SORT_MERGE_PASSES | SUM_SORT_RANGE | SUM_SORT_ROWS | SUM_SORT_SCAN | SUM_NO_INDEX_USED | SUM_NO_GOOD_INDEX_USED |+-----------------------------+-------------+------------------------------------------------------------------------------+------------+----------------+---------------+---------------+------------------+-----------------------------+------------------------+----------------------+-----------------------------+------------------+------------------------+-----------------+-----------------------+----------------+---------------+----------------+------------------+------------------------+| b48e881a1b6148d390faea5ecf75 | test        | SELECT * FROM test_table WHERE name = &#39;Alice&#39; AND age = 20 ORDER BY id DESC |          1 |      465912100 |     361376201 |             1 |                1 |                           0 |                      0 |                    0 |                           0 |                1 |                      0 |               0 |                     0 |              0 |             0 |              0 |                1 |                      0 |+-----------------------------+-------------+------------------------------------------------------------------------------+------------+----------------+---------------+---------------+------------------+-----------------------------+------------------------+----------------------+-----------------------------+------------------+------------------------+-----------------+-----------------------+----------------+---------------+----------------+------------------+------------------------+</code></pre><p>可以看到，执行了一条SELECT语句，扫描了1行数据，等待时间为465912100微秒，锁定时间为361376201微秒，未使用索引，未使用优化的索引。</p><p>通过以上的查询结果，我们可以了解到当前系统中索引的使用情况和SQL语句的执行情况，以便进行性能优化。</p><h1 id="使用pt-index-usage工具分析索引"><a href="#使用pt-index-usage工具分析索引" class="headerlink" title="使用pt-index-usage工具分析索引"></a>使用pt-index-usage工具分析索引</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pt-index-usage</code> 工具是 Percona Toolkit 中的一个工具，可以在 Percona<br>Toolkit<br>的官方网站（<a href="https://www.percona.com/downloads/percona-toolkit/%EF%BC%89%E4%B8%8A%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85%E3%80%82%E4%BB%A5%E4%B8%8B%E6%98%AF%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%EF%BC%9A">https://www.percona.com/downloads/percona-toolkit/）上进行下载和安装。以下是安装步骤：</a></p><ol><li>下载 Percona Toolkit。</li></ol><p>在 Percona Toolkit 的官方网站上，可以下载到最新版本的 Percona Toolkit<br>的二进制安装包。选择适合自己系统的二进制包进行下载。常用的包括<br>rpm、deb、tar.gz 和 zip 等格式。</p><ol><li>安装 Percona Toolkit。</li></ol><p>如果下载的是 rpm 或 deb 包，可以使用系统自带的包管理器进行安装。以<br>Debian 或 Ubuntu 系统为例，可以使用以下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install percona-toolkit</span></span><br></pre></td></tr></table></figure><p>如果下载的是 tar.gz 或 zip<br>包，则需要先解压缩，并将解压缩后的二进制文件添加到系统的环境变量中。以在<br>Linux 系统下解压缩为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -xzf percona-toolkit-3.3.0.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> percona-toolkit-3.3.0</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">cp</span> bin/* /usr/local/bin/</span></span><br></pre></td></tr></table></figure><ol><li>使用 <code>pt-index-usage</code> 工具。</li></ol><p>安装完成后，可以在命令行终端中使用 <code>pt-index-usage</code><br>命令进行索引使用分析。具体用法可以参考前面的回答。</p><h2 id="分析索引"><a href="#分析索引" class="headerlink" title="分析索引"></a>分析索引</h2><p><code>pt-index-usage</code> 是 Percona Toolkit 中的一个工具，用于分析 MySQL<br>数据库中索引的使用情况。</p><p>该工具的使用方法如下：</p><pre><code>pt-index-usage [OPTION...] [DSN]</code></pre><p>其中，<code>DSN</code> 是要分析的 MySQL 数据库连接字符串，可以指定 MySQL<br>主机名、端口号、用户名和密码等信息。</p><p>以下是一些常用的选项：</p><ul><li><code>--ask-pass</code>：提示输入 MySQL 数据库密码。</li><li><code>--user</code>：指定 MySQL 数据库用户名。</li><li><code>--password</code>：指定 MySQL 数据库密码。</li><li><code>--port</code>：指定 MySQL 数据库端口号。</li><li><code>--socket</code>：指定 MySQL 数据库 socket 文件路径。</li><li><code>--ignore-databases</code>：指定不需要分析的数据库列表，多个数据库之间用逗号分隔。</li><li><code>--ignore-tables</code>：指定不需要分析的表名列表，多个表名之间用逗号分隔。</li></ul><p>以下是 <code>pt-index-usage</code> 工具的一些示例用法：</p><ol><li>分析默认 MySQL 实例中的索引使用情况：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- --&gt;</span><br></pre></td></tr></table></figure><pre><code>pt-index-usage</code></pre><ol><li>分析指定 MySQL 实例中的索引使用情况：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- --&gt;</span><br></pre></td></tr></table></figure><pre><code>pt-index-usage --user=username --password=password --port=3306 --ask-pass localhost</code></pre><ol><li>分析指定 MySQL 实例中的索引使用情况，忽略指定的数据库和表：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- --&gt;</span><br></pre></td></tr></table></figure><pre><code>pt-index-usage --ignore-databases=db1,db2 --ignore-tables=db3.table1,db3.table2 localhost</code></pre><p>在执行完 <code>pt-index-usage</code> 命令后，将会输出类似下面的信息：</p><pre><code>tsv-or-csv# 2018-08-31T08:46:19 mysql_localhost_query_digests# Time range: 2018-08-29T00:00:00 to 2018-08-30T23:59:59# Query sample size: 7386 out of 14772# Rank Query ID           Response time Calls R/Call V/M   Item# ==== ================== ============= ===== ===== ===== ==========#    1 0x8C73E09B64815F22 1451.2412  11 131.9319  0.00 SELECT ...#    2 0xC79245D1AB4E274B  256.3333 1019   0.2518  0.00 SELECT ...#    3 0x57E16F5F0D91F9AB  178.4078  77   2.3166  0.00 UPDATE ...</code></pre><p>其中，包含以下列：</p><ul><li>Query ID：查询语句的哈希值。</li><li>Response time：查询语句的平均响应时间。</li><li>Calls：查询语句的调用次数。</li><li>R&#x2F;Call：查询语句的平均响应时间。</li><li>V&#x2F;M：查询语句的方差&#x2F;平均值。</li><li>Item：查询语句的 SQL 语句。</li></ul><h1 id="MySQL索引使用规则"><a href="#MySQL索引使用规则" class="headerlink" title="MySQL索引使用规则"></a>MySQL索引使用规则</h1><p>在 MySQL 中，使用索引可以提高查询效率，但索引的使用需要遵循一些规则：</p><ol><li>在表中使用索引列，列的选择应该具有很好的选择性，即该列的值尽可能地不同，这样可以减少扫描行数，提高查询效率。</li><li>对于频繁的查询条件，建议创建索引，但索引也不能过多，否则会增加数据的写入时间，并可能降低性能。</li><li>在对表中的某个列进行查询时，应该尽可能地使用该列的索引，避免全表扫描。</li><li>多个列的联合索引适用于经常使用这些列的所有前缀或完整的组合进行查询，而不是单个列。</li><li>在 WHERE、JOIN、GROUP BY 和 ORDER BY<br>等子句中，应该使用与最终结果集匹配的索引，以便 MySQL<br>可以使用覆盖索引。</li><li>在使用 LIKE 进行查询时，索引只能用于以 % 或 _<br>结尾的查询，以及在不使用通配符的情况下，用 &#x3D; 或 &lt;&gt;<br>进行匹配的查询。</li><li>在更新表中的数据时，如果列被索引，则需要更新索引，这将导致写入操作的成本增加。</li></ol><p>总的来说，索引的使用应该遵循”适度原则”，即尽可能使用索引，但不应过度使用，以避免索引维护的成本超过查询效率的提高。</p><h2 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h2><p>假设有一个包含以下字段的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `score` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `idx_name` (`name`),</span><br><span class="line">  KEY `idx_age` (`age`),</span><br><span class="line">  KEY `idx_name_age` (`name`,`age`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>现在考虑以下两种 SQL 查询语句：</p><ol><li>查询年龄为 20 的学生：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE age = 20;</span><br></pre></td></tr></table></figure><ol><li>查询名字为 Alice，年龄为 20 的学生：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span> <span class="keyword">AND</span> age <span class="operator">=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>针对这两种查询，应该如何选择索引呢？</p><p>对于第一种查询，由于只对 age 列进行查询，因此应该使用 idx_age 索引，因为<br>idx_age 索引只包含 age 列，因此查找时只需要扫描 idx_age<br>索引的叶子节点，而不需要扫描整张表，这将大大提高查询效率。</p><p>对于第二种查询，既有对 name 列的查询，又有对 age 列的查询，因此可以使用<br>idx_name_age 索引，idx_name_age 索引以 name 列为前缀，因此也可以支持对<br>name 列的查询，同时又可以通过 name、age 组合作为索引，支持对 name、age<br>列的组合查询，因此使用 idx_name_age 索引可以避免全表扫描，提高查询效率。</p><p>需要注意的是，如果在使用 idx_name_age 索引的同时，查询语句中使用的只有<br>name 列，那么 idx_name 索引可能会更快，因为 idx_name 索引只包含 name<br>列，比 idx_name_age 索引更小，因此扫描 idx_name<br>索引的代价更小。因此，在选择索引时，需要根据实际情况来选择，不能盲目使用。</p><p>MySQL 的 SQL 语句优化是提高数据库性能的重要手段之一。以下是一些常用的<br>SQL 语句优化技巧：</p><ol><li>选择合适的数据类型</li></ol><p>在创建表时，应该选择合适的数据类型。通常情况下，越小的数据类型会占用更少的存储空间和更少的计算资源。例如，应该尽可能使用<br><code>INT</code> 类型来存储整数，而不是使用 <code>BIGINT</code> 或 <code>FLOAT</code> 等类型。</p><ol><li>使用索引</li></ol><p>使用索引可以加快查询的速度。应该根据具体的查询语句和表结构来选择适合的索引。一般来说，对于经常被查询的字段应该创建索引。</p><ol><li>避免使用通配符查询</li></ol><p>通配符查询（如<br><code>%value%</code>）通常会导致全表扫描，对性能影响较大。如果必须使用通配符查询，可以考虑使用全文搜索等技术来优化。</p><ol><li>限制返回的数据量</li></ol><p>返回大量数据会占用过多的网络带宽和系统资源，影响数据库的性能。应该尽可能限制返回的数据量，可以使用<br><code>LIMIT</code>、<code>OFFSET</code> 等语句来限制查询结果。</p><ol><li>避免使用子查询</li></ol><p>子查询可能会影响查询的性能。如果可以使用连接查询来替代子查询，则应该优先考虑使用连接查询。</p><ol><li>使用批量插入</li></ol><p>使用批量插入可以提高数据插入的速度。例如，可以使用<br><code>INSERT INTO ... VALUES (), (), ()</code> 语句来一次性插入多行数据。</p><ol><li>缓存查询结果</li></ol><p>如果某个查询的结果在短时间内不会发生变化，可以考虑使用缓存来避免重复查询。例如，可以使用<br>Memcached 等工具来缓存查询结果。</p><p>总之，SQL<br>语句优化是一个复杂的过程，需要根据具体的业务需求和数据库结构来选择合适的优化方法。在优化<br>SQL 语句时，可以使用 Explain<br>命令、慢查询日志等工具来分析查询性能，帮助优化 SQL 语句。</p><h1 id="MySQL锁简介"><a href="#MySQL锁简介" class="headerlink" title="MySQL锁简介"></a>MySQL锁简介</h1><p>MySQL是一种流行的关系型数据库管理系统，它支持多个并发用户同时访问同一个数据库。在并发访问中，为了保证数据的完整性和一致性，MySQL使用锁来协调访问数据库的不同用户之间的竞争。</p><p>MySQL中有两种类型的锁：共享锁和排它锁。共享锁允许多个用户同时读取数据，但是不允许写入数据，而排它锁则只允许一个用户同时读取或写入数据。</p><p>在MySQL中，锁可以在多个级别上应用，包括整个数据库、表、行以及页。在使用锁时，需要注意以下几点：</p><ol><li>锁的粒度越小，越容易避免锁冲突，但是也会增加锁的开销和并发控制的复杂性。</li><li>锁的等待时间越长，会增加锁冲突的可能性，同时也会影响系统的响应时间。</li><li>为了避免死锁，需要按照一定的顺序获取锁。例如，如果两个用户同时请求资源A和B，那么他们必须按照相同的顺序获取锁，比如先获取A再获取B或者先获取B再获取A。</li></ol><p>在MySQL中，使用锁需要慎重考虑，并根据具体情况选择适当的锁策略和粒度。同时，还需要注意锁的并发性和性能影响，以确保系统的稳定性和可扩展性。</p><h1 id="MySQL锁-共享锁"><a href="#MySQL锁-共享锁" class="headerlink" title="MySQL锁-共享锁"></a>MySQL锁-共享锁</h1><p>在 MySQL 中，共享锁（Shared<br>Lock）是一种保护读取操作的锁机制，它允许多个事务同时持有同一个资源的共享锁，以实现并发读取操作。共享锁的基本特点如下：</p><ol><li>多个事务可以同时持有共享锁，以访问被锁定的资源，比如一张表或者一行记录。</li><li>共享锁允许其他事务获取相同的共享锁，但是不允许其他事务获取排它锁。</li><li>共享锁不会阻塞其他事务的读取操作，但会阻塞其他事务的写入操作。</li></ol><p>在 MySQL 中，可以使用 <code>SELECT ... LOCK IN SHARE MODE</code><br>语句获取共享锁。比如，下面的示例代码获取一个共享锁，并读取 <code>orders</code><br>表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_id <span class="operator">=</span> <span class="number">1001</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><p>这个语句会锁定满足条件的行，并在事务提交或回滚之前一直持有共享锁。其他事务可以读取该行的数据，但是不能修改它，直到共享锁被释放。</p><p>需要注意的是，共享锁只能保护读取操作，不能保护写入操作。如果需要修改数据，需要先释放共享锁，然后再获取排它锁。</p><h2 id="实例-25"><a href="#实例-25" class="headerlink" title="实例"></a>实例</h2><p>以下是一个使用共享锁的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">  order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  customer_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  amount <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>假设有一个 <code>orders</code> 表，包含订单信息，其中包含字段<br><code>order_id</code>、<code>customer_id</code> 和 <code>amount</code>。现在需要查询订单号为 1001<br>的订单信息，并获取共享锁。首先，我们需要向 <code>orders</code> 表中插入一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (order_id, customer_id, amount) <span class="keyword">VALUES</span> (<span class="number">1001</span>, <span class="number">2001</span>, <span class="number">100</span>), (<span class="number">1002</span>, <span class="number">2002</span>, <span class="number">200</span>), (<span class="number">1003</span>, <span class="number">2003</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><p>接下来，我们可以使用以下语句获取订单号为 1001 的订单信息，并获取共享锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_id <span class="operator">=</span> <span class="number">1001</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><p>这个语句会锁定 <code>orders</code> 表中订单号为 1001<br>的行，并在事务提交或回滚之前一直持有共享锁。其他事务可以读取该行的数据，但是不能修改它，直到共享锁被释放。</p><blockquote><p>需要注意的是，在使用共享锁时需要注意死锁的问题。如果多个事务同时获取共享锁并且相互等待，可能会导致死锁的发生。因此，在使用共享锁时需要注意并发控制的问题，避免死锁的发生。</p></blockquote><h1 id="MySQL锁-独占锁"><a href="#MySQL锁-独占锁" class="headerlink" title="MySQL锁-独占锁"></a>MySQL锁-独占锁</h1><p>在 MySQL 中，排它锁（Exclusive<br>Lock）是一种保护写入操作的锁机制，它允许事务独占资源，以实现独占性的写入操作。排它锁的基本特点如下：</p><ol><li>排它锁只能被一个事务持有，其他事务不能同时持有排它锁。</li><li>排它锁不允许其他事务获取相同的共享锁或排它锁，直到当前事务释放锁。</li><li>排它锁会阻塞其他事务的读取和写入操作。</li></ol><p>在 MySQL 中，可以使用 <code>SELECT ... FOR UPDATE</code> 或 <code>UPDATE</code><br>语句获取排它锁。比如，下面的示例代码获取一个排它锁，并修改 <code>orders</code><br>表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_id <span class="operator">=</span> <span class="number">1001</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> orders <span class="keyword">SET</span> amount <span class="operator">=</span> <span class="number">200</span> <span class="keyword">WHERE</span> order_id <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>这个语句会锁定满足条件的行，并在事务提交或回滚之前一直持有排它锁。其他事务不能读取或修改该行的数据，直到排它锁被释放。</p><blockquote><p>需要注意的是，排它锁只能保护写入操作，不能保护读取操作。如果需要读取数据，可以先获取共享锁，然后再获取排它锁。另外，需要避免死锁的发生，在使用排它锁时需要注意并发控制的问题。</p></blockquote><h2 id="实例-26"><a href="#实例-26" class="headerlink" title="实例"></a>实例</h2><p>以下是一个使用排它锁的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">  order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  customer_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  amount <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>假设有一个 <code>orders</code> 表，包含订单信息，其中包含字段<br><code>order_id</code>、<code>customer_id</code> 和 <code>amount</code>。现在需要将订单号为 1001<br>的订单金额加 100 并获取排它锁。首先，我们需要向 <code>orders</code><br>表中插入一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (order_id, customer_id, amount) <span class="keyword">VALUES</span> (<span class="number">1001</span>, <span class="number">2001</span>, <span class="number">100</span>), (<span class="number">1002</span>, <span class="number">2002</span>, <span class="number">200</span>), (<span class="number">1003</span>, <span class="number">2003</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><p>接下来，我们可以使用以下语句获取订单号为 1001 的订单信息，并获取排它锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_id <span class="operator">=</span> <span class="number">1001</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> orders <span class="keyword">SET</span> amount <span class="operator">=</span> amount <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> order_id <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>这个语句会锁定 <code>orders</code> 表中订单号为 1001<br>的行，并在事务提交或回滚之前一直持有排它锁。其他事务不能读取或修改该行的数据，直到排它锁被释放。在事务内部，可以对该行的数据进行修改操作。</p><p>需要注意的是，在使用排它锁时需要注意并发控制的问题，避免死锁的发生。如果多个事务同时获取排它锁并且相互等待，可能会导致死锁的发生。因此，在使用排它锁时需要注意死锁的问题，并实现合理的并发控制。</p><h1 id="MySQL锁-表级锁"><a href="#MySQL锁-表级锁" class="headerlink" title="MySQL锁-表级锁"></a>MySQL锁-表级锁</h1><p>MySQL<br>表级锁是最简单的锁类型，它可以锁定整张表。当一个事务对表进行更新操作时，MySQL<br>会自动给表加上排它锁，防止其他事务修改表中的数据。其他事务也可以对该表加上共享锁，防止该表被删除。表级锁适用于大批量数据的批处理操作，但它的缺点是会导致大量的锁冲突，降低系统的并发能力。</p><p>在 MySQL 中，可以使用以下语句对表加锁：</p><ul><li><code>LOCK TABLES table_name [AS alias] lock_type</code>: 对指定的表加锁，其中<br><code>table_name</code> 是要加锁的表名，<code>lock_type</code> 是锁的类型，可以是<br><code>READ</code>（共享锁）或 <code>WRITE</code>（排它锁）。</li><li><code>UNLOCK TABLES</code>: 解除对表的锁定。</li></ul><p>需要注意的是，对表加锁会影响整个表的读写操作，会导致其他事务的读写操作受到阻塞。因此，在使用表级锁时需要注意锁的粒度和并发控制的问题，避免锁冲突和死锁的发生。</p><p>以下是一个使用表级锁的示例：</p><p>假设有一个 <code>accounts</code> 表，包含用户账户信息，其中包含字段 <code>id</code>、<code>name</code> 和<br><code>balance</code>。现在需要将 <code>accounts</code> 表加上排它锁，并更新用户编号为 1001<br>的账户余额，完成之后再解除表的锁定。可以使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOCK TABLES accounts WRITE;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><p>这个语句会对 <code>accounts</code><br>表加上排它锁，其他事务无法对该表进行读写操作，直到解除表的锁定。在事务内部，可以对该表的数据进行修改操作。需要注意的是，在使用表级锁时需要注意并发控制的问题，避免锁冲突和死锁的发生。</p><h2 id="实例-27"><a href="#实例-27" class="headerlink" title="实例"></a>实例</h2><p>下面是一个演示表级锁的例子，包括建表和插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    total_amount <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    created_at datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    updated_at datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (name, total_amount) <span class="keyword">VALUES</span> (<span class="string">&#x27;Order 1&#x27;</span>, <span class="number">100.00</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (name, total_amount) <span class="keyword">VALUES</span> (<span class="string">&#x27;Order 2&#x27;</span>, <span class="number">200.00</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (name, total_amount) <span class="keyword">VALUES</span> (<span class="string">&#x27;Order 3&#x27;</span>, <span class="number">300.00</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，我们创建了一个 <code>orders</code> 表，并向其中插入了三条数据。</p><p>接下来，我们可以使用 <code>SELECT</code> 语句来查询这个表，并加上 <code>FOR UPDATE</code><br>关键字来获取表级排它锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在一个终端窗口中执行以下语句获取锁</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="comment">-- 此时可以在另一个终端窗口中尝试执行类似的语句，但会被阻塞等待当前锁的释放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在另一个终端窗口中执行以下语句，会被阻塞等待锁的释放</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>这里我们在一个终端窗口中获取了 <code>id</code> 为 1<br>的订单记录的排它锁，然后在另一个终端窗口中尝试获取 <code>id</code> 为 2<br>的订单记录的排它锁，此时该语句会被阻塞等待第一个终端窗口中的锁释放。</p><h1 id="MySQL锁-页面级锁"><a href="#MySQL锁-页面级锁" class="headerlink" title="MySQL锁-页面级锁"></a>MySQL锁-页面级锁</h1><p>MySQL的页级锁是一种介于行级锁和表级锁之间的锁机制。页级锁是指对表中的某一页进行加锁，MySQL中每一页的大小是固定的，一般为4KB。</p><p>在MySQL中，使用InnoDB存储引擎时，如果开启了事务，则在执行语句时会自动加上行级锁，以保证数据的一致性。但是如果表的并发性非常高，行级锁的争用会非常激烈，导致系统性能下降，此时可以考虑使用页级锁。</p><p>使用页级锁的情况下，当多个事务同时访问同一个页时，MySQL会将页进行加锁，以保证多个事务的操作不会相互干扰。而其他页仍然可以被其他事务访问，这就保证了整个表的并发性能。</p><p>需要注意的是，页级锁虽然可以提高并发性能，但是也有一些缺点。例如，当某个事务需要更新或者插入数据时，它会占用整个页，这会导致其他事务无法访问该页，从而降低了并发性能。此外，页级锁还可能导致死锁问题，因此在使用页级锁时需要谨慎处理。</p><h2 id="实例-28"><a href="#实例-28" class="headerlink" title="实例"></a>实例</h2><p>为了演示页面级锁，请按照以下步骤操作：</p><ol><li>创建一个包含多个页面的表，例如包含100个页面的表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_table (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    some_data <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB ROW_FORMAT<span class="operator">=</span>COMPRESSED;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_table (id, some_data)</span><br><span class="line"><span class="keyword">SELECT</span> x, CONCAT(<span class="string">&#x27;Some data for id=&#x27;</span>, x)</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">AS</span> x</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> x <span class="operator">+</span> <span class="number">1</span> <span class="keyword">FROM</span> my_table LIMIT <span class="number">99</span></span><br><span class="line">) t;</span><br></pre></td></tr></table></figure><ol><li>在一个事务中锁定表的一部分页面，例如，锁定前10个页面：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table <span class="keyword">WHERE</span> id <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">AND</span> id <span class="operator">&lt;=</span> <span class="number">100</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><ol><li>在另一个事务中尝试锁定同一部分页面：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table <span class="keyword">WHERE</span> id <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">AND</span> id <span class="operator">&lt;=</span> <span class="number">100</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>这将导致第二个事务被阻塞，直到第一个事务释放锁定。</p><ol><li>在第一个事务中释放锁定：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ol><li>在第二个事务中继续操作：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>这样就演示了页面级锁。</p><h1 id="MySQL日志简介"><a href="#MySQL日志简介" class="headerlink" title="MySQL日志简介"></a>MySQL日志简介</h1><p>MySQL的日志主要有以下几种：</p><ol><li>错误日志（Error<br>Log）：记录MySQL服务启动、运行、停止等过程中出现的错误信息，如MySQL无法启动、停止异常等。错误日志非常重要，可以帮助管理员快速排查问题。</li><li>慢查询日志（Slow Query<br>Log）：记录MySQL中执行时间超过指定阈值的查询语句，可以用来定位查询慢的原因，优化查询语句。</li><li>查询日志（General Query<br>Log）：记录所有连接到MySQL服务器的用户发出的查询语句，包括查询内容、执行时间、执行结果等信息。查询日志非常耗费系统资源，不应该一直开启，可以在需要排查问题的时候打开。</li><li>二进制日志（Binary<br>Log）：记录MySQL的所有数据修改操作，包括增、删、改等操作，以二进制格式保存。二进制日志是MySQL实现数据复制和数据恢复的重要基础，它可以用来做主从复制、故障恢复、数据备份等。</li><li>中继日志（Relay<br>Log）：用于MySQL主从复制，记录从服务器从主服务器复制二进制日志的过程。</li><li>事务日志（Transaction<br>Log）：记录MySQL中的事务操作，用于实现事务的ACID特性，包括Undo<br>Log和Redo Log。</li></ol><p>管理员可以根据需要配置各种日志，并在需要排查问题时查看相应的日志文件，以帮助快速定位和解决问题。</p><h1 id="MySQL错误日志的配置和管理"><a href="#MySQL错误日志的配置和管理" class="headerlink" title="MySQL错误日志的配置和管理"></a>MySQL错误日志的配置和管理</h1><p>MySQL 的错误日志（Error Log）是用来记录 MySQL<br>在运行过程中发生错误的详细信息的日志文件。在排查 MySQL<br>运行过程中的错误时，错误日志是非常有用的。本回答将介绍 MySQL<br>错误日志的配置和管理。</p><h3 id="配置-MySQL-错误日志"><a href="#配置-MySQL-错误日志" class="headerlink" title="配置 MySQL 错误日志"></a>配置 MySQL 错误日志</h3><p>MySQL 错误日志的配置参数为 <code>log_error</code>，该参数可以通过 MySQL 配置文件<br><code>my.cnf</code> 或 <code>my.ini</code> 进行配置。可以通过以下步骤进行配置：</p><ol><li><p>打开 MySQL 的配置文件，可以通过以下命令打开：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure></li><li><p>找到 <code>[mysqld]</code> 段，在该段下添加以下配置：</p><pre><code>log_error=/var/log/mysql/mysql_error.log</code></pre><p>其中 <code>/var/log/mysql/mysql_error.log</code><br>为错误日志文件的路径，可以根据需要修改。</p></li><li><p>保存配置文件，并重启 MySQL 使配置生效。</p></li></ol><h3 id="查看-MySQL-错误日志"><a href="#查看-MySQL-错误日志" class="headerlink" title="查看 MySQL 错误日志"></a>查看 MySQL 错误日志</h3><p>MySQL 错误日志默认情况下会记录到 <code>datadir</code> 目录下的 <code>hostname.err</code><br>文件中，其中 <code>datadir</code> 是 MySQL 数据文件的存放目录，<code>hostname</code> 是运行<br>MySQL 的主机名。</p><p>可以通过以下命令查看 MySQL 错误日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tail -f /var/log/mysql/mysql_error.log</span><br></pre></td></tr></table></figure><p>其中 <code>-f</code> 参数表示实时查看日志文件的内容。</p><h3 id="管理-MySQL-错误日志"><a href="#管理-MySQL-错误日志" class="headerlink" title="管理 MySQL 错误日志"></a>管理 MySQL 错误日志</h3><p>MySQL<br>错误日志是一个文本文件，可以使用常规的文件操作命令对其进行管理，例如：</p><ul><li>查看错误日志的内容：<code>cat /var/log/mysql/mysql_error.log</code></li><li>清空错误日志：<code>echo &quot;&quot; &gt; /var/log/mysql/mysql_error.log</code></li><li>压缩错误日志：<code>gzip /var/log/mysql/mysql_error.log</code></li></ul><p>需要注意的是，清空错误日志文件并不会停止 MySQL<br>继续往该文件中写入错误日志。如果需要停止 MySQL<br>写入错误日志，可以通过以下步骤：</p><ol><li><p>打开 MySQL 的配置文件，可以通过以下命令打开：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure></li><li><p>找到 <code>[mysqld]</code> 段，在该段下添加以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_error_verbosity=2</span><br><span class="line">silent=1</span><br></pre></td></tr></table></figure><p>其中 <code>log_error_verbosity</code> 参数指定错误日志的详细程度，<code>silent</code><br>参数用来关闭所有日志输出，包括错误日志、一般日志等。</p></li><li><p>保存配置文件，并重启 MySQL 使配置生效。</p></li></ol><h1 id="MySQL慢查询日志的配置和管理-1"><a href="#MySQL慢查询日志的配置和管理-1" class="headerlink" title="MySQL慢查询日志的配置和管理"></a>MySQL慢查询日志的配置和管理</h1><p>MySQL慢查询日志记录了执行时间超过指定阈值的SQL语句，可以用于优化查询和发现潜在的性能问题。在本次回答中，我们将介绍如何配置和管理MySQL慢查询日志。</p><h3 id="配置慢查询日志-1"><a href="#配置慢查询日志-1" class="headerlink" title="配置慢查询日志"></a>配置慢查询日志</h3><ol><li><p>打开MySQL配置文件<code>my.cnf</code>，通常在<code>/etc/mysql</code>目录下。如果不存在该文件，可以创建一个。</p></li><li><p>找到<code>[mysqld]</code>节点，在其中添加如下配置项：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log <span class="operator">=</span> <span class="number">1</span>    # 开启慢查询日志</span><br><span class="line">slow_query_log_file <span class="operator">=</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>mysql<span class="operator">-</span>slow.log  # 慢查询日志文件路径</span><br><span class="line">long_query_time <span class="operator">=</span> <span class="number">2</span>   # 定义慢查询阈值，单位为秒</span><br></pre></td></tr></table></figure><p>上述配置的含义如下：</p><ul><li><code>slow_query_log</code>：设置是否开启慢查询日志，0表示关闭，1表示开启，默认为0。</li><li><code>slow_query_log_file</code>：指定慢查询日志文件路径和文件名。</li><li><code>long_query_time</code>：定义慢查询阈值，超过该阈值的SQL语句将被记录到慢查询日志中。默认为10秒。</li></ul></li><li><p>保存修改后的配置文件并重启MySQL服务。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mysql restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="查看慢查询日志-1"><a href="#查看慢查询日志-1" class="headerlink" title="查看慢查询日志"></a>查看慢查询日志</h3><ol><li><p>登录MySQL命令行客户端。</p></li><li><p>执行以下命令，打开慢查询日志：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行一些查询语句，让MySQL记录慢查询日志。</p></li><li><p>执行以下命令，查看最近一次慢查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.slow_log <span class="keyword">ORDER</span> <span class="keyword">BY</span> start_time <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>该命令将显示最近一次慢查询的详细信息，包括查询语句、执行时间、扫描行数等。</p></li></ol><h3 id="管理慢查询日志-1"><a href="#管理慢查询日志-1" class="headerlink" title="管理慢查询日志"></a>管理慢查询日志</h3><ol><li><p>关闭慢查询日志：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;OFF&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>清空慢查询日志：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file <span class="operator">=</span> <span class="string">&#x27;/dev/null&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意：将慢查询日志文件路径设置为<code>/dev/null</code>将日志输出到系统黑洞中，实际上并不会清空日志文件，需要手动删除。</p></li><li><p>修改慢查询阈值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>该命令将慢查询阈值修改为5秒。</p></li><li><p>查看慢查询日志路径：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;slow_query_log_file&#x27;</span>;</span><br></pre></td></tr></table></figure><p>该命令将显示慢查询日志文件路径。</p></li></ol><p>总之，MySQL慢查询日志对于排查性能问题和优化查询语句非常有用。配置和管理慢查询日志需要一些经验和技巧。</p><h1 id="MySQL二进制日志的配置和管理"><a href="#MySQL二进制日志的配置和管理" class="headerlink" title="MySQL二进制日志的配置和管理"></a>MySQL二进制日志的配置和管理</h1><p>MySQL二进制日志是一种记录数据库所有修改操作的日志文件。它可以用于数据恢复、复制和数据审计等方面。在MySQL中，二进制日志是开启和关闭的，可以根据需要进行配置。</p><p>以下是配置和管理MySQL二进制日志的步骤：</p><ol><li>开启二进制日志</li></ol><p>要开启MySQL二进制日志，需要在MySQL配置文件中添加以下内容：</p><pre><code>log-bin=mysql-bin</code></pre><p>这会将二进制日志文件写入名为mysql-bin的文件中。此外，还可以设置以下参数：</p><pre><code>expire_logs_days=N</code></pre><p>这将设置二进制日志文件的保留时间（以天为单位）。默认值为0，表示不删除任何日志文件。</p><ol><li>查询二进制日志</li></ol><p>可以使用以下命令查询当前的二进制日志文件名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure><p>这将返回一个结果集，包含当前的二进制日志文件名和位置。</p><ol><li>关闭二进制日志</li></ol><p>可以使用以下命令关闭二进制日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET sql_log_bin=0;</span><br></pre></td></tr></table></figure><p>这将关闭二进制日志功能。如果需要重新开启二进制日志，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET sql_log_bin=1;</span><br></pre></td></tr></table></figure><ol><li>清理二进制日志</li></ol><p>可以使用以下命令手动清理二进制日志文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PURGE BINARY LOGS TO &#x27;mysql-bin.XXXXXX&#x27;;</span><br></pre></td></tr></table></figure><p>其中，XXXXXX是二进制日志文件名的一部分。这将删除该文件以及其之前的所有文件。</p><ol><li>备份和恢复</li></ol><p>要备份和恢复MySQL二进制日志，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份</span></span><br><span class="line">mysqlbinlog mysql-bin.00000X &gt; binlog.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复</span></span><br><span class="line">mysqlbinlog binlog.sql | mysql -u root -p</span><br></pre></td></tr></table></figure><p>这将将二进制日志文件转换为SQL语句，可以用于备份和恢复数据。</p><p>总之，MySQL二进制日志是一个非常有用的功能，可用于许多方面，包括数据恢复、复制和审计。熟练掌握配置和管理MySQL二进制日志的技巧，对于MySQL运维管理员来说非常重要。</p><h1 id="MySQL中继日志（Relay-Log）的配置和管理"><a href="#MySQL中继日志（Relay-Log）的配置和管理" class="headerlink" title="MySQL中继日志（Relay Log）的配置和管理"></a>MySQL中继日志（Relay Log）的配置和管理</h1><p>MySQL中继日志（Relay<br>Log）是一种特殊的二进制日志文件，用于存储复制从服务器接收的二进制日志事件。中继日志在主从复制过程中发挥了关键作用，它记录了从主服务器复制到从服务器的二进制日志，这样从服务器可以在本地重放二进制日志事件，以便实现主从同步。</p><p>中继日志的配置和管理包括以下几个方面：</p><ol><li>配置中继日志文件的存储路径和文件名：可以在从服务器的my.cnf配置文件中配置，通过设置relay_log和relay_log_index参数来指定中继日志文件的存储路径和文件名。</li><li>监控中继日志文件的增长和使用情况：可以使用MySQL自带的工具或者第三方工具，如pt-heartbeat，来监控中继日志文件的增长和使用情况。</li><li>定期清理中继日志文件：中继日志文件会不断增长，占用磁盘空间。为避免磁盘空间耗尽，需要定期清理中继日志文件。可以通过设置max_relay_log_size参数来限制中继日志文件的大小，或者通过使用PURGE<br>BINARY LOGS命令手动清理中继日志文件。</li><li>处理中继日志文件异常情况：如果中继日志文件出现损坏或者丢失，从服务器将无法重放二进制日志事件，导致主从复制中断。此时需要及时处理中继日志文件异常情况，可以通过清空中继日志文件或者重新启动从服务器来解决问题。同时，需要排查原因，避免类似问题再次发生。</li></ol><p>综上所述，中继日志的配置和管理是MySQL主从复制过程中非常重要的一部分，需要管理员仔细设置和监控，以确保主从同步的可靠性和稳定性。</p><h1 id="MySQL事务日志的配置和管理"><a href="#MySQL事务日志的配置和管理" class="headerlink" title="MySQL事务日志的配置和管理"></a>MySQL事务日志的配置和管理</h1><p>MySQL的事务日志（Transaction Log），也称为redo<br>log，记录了MySQL在执行事务期间所做的修改，用于在MySQL崩溃后重放事务修改。事务日志是MySQL的关键组件之一，对于数据库的性能和可靠性都有着重要的影响。</p><p>下面是MySQL事务日志的配置和管理：</p><ol><li>配置事务日志文件的数量和大小</li></ol><p>MySQL事务日志被存储在多个文件中，可以通过以下配置参数指定事务日志文件的数量和大小：</p><ul><li><code>innodb_log_files_in_group</code>:<br>指定事务日志文件组中文件的数量，默认值为2，最小值为2。</li><li><code>innodb_log_file_size</code>:<br>指定每个事务日志文件的大小，默认值为48MB，最小值为1MB，最大值为4GB。</li></ul><p>当需要修改这些参数时，需要在MySQL配置文件中修改后重启MySQL服务才能生效。</p><ol><li>查看事务日志文件的状态</li></ol><p>可以使用以下命令查看当前事务日志文件的状态：</p><pre><code>SHOW VARIABLES LIKE &#39;innodb_log%&#39;;</code></pre><p>该命令将输出事务日志文件的当前状态，包括文件数量、文件大小、已用空间和剩余空间等信息。</p><ol><li>删除过期的事务日志文件</li></ol><p>为避免事务日志文件占用过多磁盘空间，可以定期删除过期的事务日志文件。过期的事务日志文件是指已经被MySQL使用并且不再需要的文件。可以使用以下命令手动删除过期的事务日志文件：</p><pre><code>PURGE BINARY LOGS BEFORE &#39;yyyy-mm-dd hh:mm:ss&#39;;</code></pre><p>该命令将删除指定日期之前的所有事务日志文件。当然，也可以使用计划任务等工具定期自动删除过期的事务日志文件。</p><ol><li>使用GTID实现事务日志复制</li></ol><p>GTID（Global Transaction Identifier）是MySQL<br>5.6及以上版本中引入的一种用于跟踪复制事务的机制。在使用GTID时，MySQL会为每个事务分配一个唯一的全局事务ID，从而使得复制过程更加可靠和简单。在启用GTID后，可以使用以下命令查看GTID的状态：</p><pre><code>SHOW MASTER STATUS;SHOW SLAVE STATUS;</code></pre><p>以上命令将输出主服务器和从服务器的GTID状态信息。需要注意的是，在使用GTID时，无法手动删除过期的事务日志文件，因为从服务器需要保留所有的事务日志文件以便复制所有的事务。</p><h1 id="MySQL集群"><a href="#MySQL集群" class="headerlink" title="MySQL集群"></a>MySQL集群</h1><p>MySQL<br>集群主要是为了提高系统的可用性和性能，以及容错性，可以通过多种技术实现，比如主从复制、MHA、Galera<br>Cluster、MySQL Cluster 等。</p><p>下面简要介绍一下使用 MySQL 主从复制实现集群的基本步骤：</p><ol><li>配置主服务器：在 my.cnf<br>配置文件中，开启二进制日志（binlog），并配置唯一的服务器 ID。</li><li>配置从服务器：在 my.cnf 配置文件中，配置服务器<br>ID，设置复制用的账户和密码，指定主服务器的 IP<br>地址和端口号，以及设置中继日志（relay log）的存放路径。</li><li>启动主服务器：启动主服务器并开启二进制日志。</li><li>启动从服务器：启动从服务器并配置复制。</li><li>验证主从同步：在主服务器上插入一条数据，然后在从服务器上查询是否能够查询到这条数据。</li><li>处理主从同步错误：如果出现同步错误，需要检查错误信息，然后对症下药解决问题。</li><li>监控和管理：定期检查主从同步状态，处理同步错误，管理备份和恢复，以及优化集群性能。</li></ol><p>需要注意的是，MySQL<br>主从复制有一些限制，比如主服务器和从服务器的数据不能完全实时同步，而且当主服务器发生故障时，需要手动切换到从服务器。因此，为了进一步提高可用性和性能，可以考虑使用其他的技术实现<br>MySQL 集群。</p><h1 id="MySQL集群实现主从复制"><a href="#MySQL集群实现主从复制" class="headerlink" title="MySQL集群实现主从复制"></a>MySQL集群实现主从复制</h1><p>在 CentOS 操作系统上安装 MySQL 并实现主从复制集群的基本步骤如下：</p><ol><li>在主节点和从节点上安装 MySQL。</li></ol><p>在 CentOS 操作系统上安装 MySQL 可以使用 yum 包管理器进行安装：</p><pre><code>sudo yum updatesudo yum install mysql-server</code></pre><ol><li>配置主节点和从节点的 MySQL 配置文件。</li></ol><p>主节点和从节点的 MySQL 配置文件需要配置以下几个参数：</p><pre><code>server-id          = 1  # 主节点设置为1，从节点需要设置为不同的值log_bin            = /var/log/mysql/mysql-bin.log  # 启用二进制日志binlog_do_db       = mydb  # 指定需要复制的数据库expire_logs_days   = 10  # 保存的二进制日志文件的最长时间max_binlog_size    = 100M  # 每个二进制日志文件的最大大小</code></pre><p>在主节点上还需要配置一个名为 <code>replication</code> 的 MySQL<br>用户，用于从节点连接主节点进行复制。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;replication&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;replication&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>在主节点上创建一个数据备份。</li></ol><p>使用 <code>mysqldump</code><br>工具创建一个数据备份文件，并将其复制到从节点上，用于从节点的初始化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p mydb &gt; /root/mydb.sql</span><br></pre></td></tr></table></figure><ol><li>在从节点上导入数据备份文件。</li></ol><p>将主节点的数据备份文件复制到从节点上，并导入数据。</p><pre><code>mysql -u root -p mydb &lt; /root/mydb.sql</code></pre><ol><li>在从节点上配置从节点连接主节点的信息。</li></ol><p>从节点需要配置以下几个参数：</p><pre><code>server-id          = 2  # 从节点设置为不同于主节点的值relay_log          = /var/log/mysql/mysql-relay-bin.log  # 启用中继日志read_only          = 1  # 设置只读模式log_slave_updates  = 1  # 启用从节点对其它从节点的日志复制</code></pre><p>在从节点上使用 <code>CHANGE MASTER TO</code> 命令连接主节点进行复制。</p><pre><code>CHANGE MASTER TOMASTER_HOST=&#39;192.168.1.101&#39;,MASTER_USER=&#39;replication&#39;,MASTER_PASSWORD=&#39;password&#39;,MASTER_LOG_FILE=&#39;mysql-bin.000001&#39;,  # 主节点当前正在写入的二进制日志文件MASTER_LOG_POS=107  # 主节点当前正在写入的二进制日志文件的偏移量</code></pre><ol><li>在从节点上启动从节点复制进程。</li></ol><p>在从节点上执行 <code>START SLAVE</code> 命令启动从节点复制进程。</p><pre><code>START SLAVE;</code></pre><ol><li>测试主从复制集群。</li></ol><p>在主节点上插入一些数据，然后在从节点上查询是否复制成功。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable (col1, col2) <span class="keyword">VALUES</span> (<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure><p>以上是在 CentOS 操作系统上安装 MySQL 并实现主从复制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库简介&quot;&gt;&lt;a href=&quot;#数据库简介&quot; class=&quot;headerlink&quot; title=&quot;数据库简介&quot;&gt;&lt;/a&gt;数据库简介&lt;/h1&gt;&lt;h2 id=&quot;数据库管理系统&quot;&gt;&lt;a href=&quot;#数据库管理系统&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://ryanchou612.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记｜Linux</title>
    <link href="https://ryanchou612.github.io/posts/10ebb886.html"/>
    <id>https://ryanchou612.github.io/posts/10ebb886.html</id>
    <published>2023-06-09T04:51:19.000Z</published>
    <updated>2023-07-15T03:27:37.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h1><h2 id="Linux是什么"><a href="#Linux是什么" class="headerlink" title="Linux是什么"></a>Linux是什么</h2><ul><li>Linux是一个操作系统(os)，就像Windows<br>或者MacOS一样，主要应用在企业服务器领域。</li><li>Linux (lɪnəks)内核，最初只是由芬兰人 李纳斯·托瓦兹（Linus<br>Torvalds），在赫尔辛基大学上学时，出于个人爱好而编写的。</li></ul><p><img src="https://ryanchou612.github.io/storage/thumbnails/_signature/NLTM3DMSI4PHJ439POQC449PF.png" alt="LinusTorvalds"></p><ul><li>Linux是一套<strong>免费</strong>使用和自由传播的类Unix操作系统，是一个基于POSIX，可移植操作系统接口（英语：Portable<br>Operating System<br>Interface，缩写为POSIX）和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。</li><li>Linux能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。</li><li>Linux继承了Unix以<strong>网络</strong>为核心的设计思想，是一个<strong>性能稳定</strong>的多用户网络操作系统。</li></ul><h2 id="Linux的发行版"><a href="#Linux的发行版" class="headerlink" title="Linux的发行版"></a>Linux的发行版</h2><ul><li>Linux的发行版说简单点就是将Linux内核与应用软件做一个打包。</li><li>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、TurboLinux等。</li></ul><h2 id="Linux应用领域"><a href="#Linux应用领域" class="headerlink" title="Linux应用领域"></a>Linux应用领域</h2><ol><li>嵌入式系统。</li><li>手机操作系统内核。</li><li>服务器</li><li>个人办公</li></ol><h2 id="Linux的特点"><a href="#Linux的特点" class="headerlink" title="Linux的特点"></a>Linux的特点</h2><ol><li>免费开源</li><li>多用户，多任务</li><li>支持多种平台，例如：ARM架构和X86架构</li><li>安全病毒少</li><li>性能稳定</li></ol><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p>当我们使用 <code>ls /</code>查看linux根目录时，结构如下图所示：</p><p><img src="https://ryanchou612.github.io/storage/thumbnails/_signature/F4MBAOVP28KN54LBTAMKUI7LP.png" alt="Linux-Directory-Structure"></p><p>这些目录有一定的含义，分别存放了不同的程序，下面分别介绍这些目录</p><h3 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h3><p>根目录，一般根目录下只存放目录，不要存放文件，&#x2F;etc、&#x2F;bin、&#x2F;dev、&#x2F;lib、&#x2F;sbin应该和根目录放置在一个分区中</p><h3 id="bin-usr-bin"><a href="#bin-usr-bin" class="headerlink" title="/bin:/usr/bin"></a><code>/bin:/usr/bin</code></h3><p>可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等</p><h3 id="boot"><a href="#boot" class="headerlink" title="/boot"></a><code>/boot</code></h3><p>放置linux系统启动时用到的一些文件。<code>/boot/vmlinuz</code>为linux的内核文件，以及<code>/boot/gurb</code></p><h3 id="dev"><a href="#dev" class="headerlink" title="/dev"></a><code>/dev</code></h3><p>存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备。</p><h3 id="etc"><a href="#etc" class="headerlink" title="/etc"></a><code>/etc</code></h3><p>系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有<code>/etc/inittab</code>、<code>/etc/fstab</code>、<code>/etc/init.d</code>、<code>/etc/X11</code>、<code>/etc/sysconfig</code>、<code>/etc/xinetd.d</code>修改配置文件之前记得备份。</p><h3 id="home"><a href="#home" class="headerlink" title="/home"></a><code>/home</code></h3><p>系统默认的用户home家目录，新增用户账号时，用户的家目录都存放在此目录下，<code>~</code>表示当前用户的家目录，<code>~test</code>表示用户test的家目录。</p><h3 id="lib-usr-lib-usr-local-lib："><a href="#lib-usr-lib-usr-local-lib：" class="headerlink" title="/lib: /usr/lib: /usr/local/lib："></a><code>/lib:</code> <code>/usr/lib:</code> <code>/usr/local/lib：</code></h3><p>系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为<code>/lib/modules</code>。</p><h3 id="lost-fount"><a href="#lost-fount" class="headerlink" title="/lost+fount"></a><code>/lost+fount</code></h3><p>系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于&#x2F;disk<br>中，此目录下就会自动产生目录&#x2F;disk&#x2F;lost+found</p><h3 id="mnt-media："><a href="#mnt-media：" class="headerlink" title="/mnt:/media："></a><code>/mnt:/media：</code></h3><p>光盘默认挂载点，通常光盘挂载于&#x2F;mnt&#x2F;cdrom下，也不一定，可以选择任意位置进行挂载。</p><h3 id="opt："><a href="#opt：" class="headerlink" title="/opt："></a><code>/opt：</code></h3><p>给主机额外安装软件所摆放的目录。如：FC4使用的Fedora<br>社群开发软件，如果想要自行安装新的KDE<br>桌面软件，可以将该软件安装在该目录下。以前的 Linux 系统中，习惯放置在<br><code>/usr/local</code> 目录下</p><h3 id="proc："><a href="#proc：" class="headerlink" title="/proc："></a><code>/proc：</code></h3><p>此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有<code>/proc/cpuinfo</code>、<code>/proc/interrupts</code>、<code>/proc/dma</code>、<code>/proc/ioports</code>、<code>/proc/net/</code>等</p><h3 id="root："><a href="#root：" class="headerlink" title="/root："></a><code>/root：</code></h3><p>系统管理员root的家目录，系统第一个启动的分区为&#x2F;，所以最好将&#x2F;root和&#x2F;放置在一个分区下。</p><h3 id="sbin-usr-sbin-usr-local-sbin："><a href="#sbin-usr-sbin-usr-local-sbin：" class="headerlink" title="/sbin: /usr/sbin: /usr/local/sbin："></a><code>/sbin:</code> <code>/usr/sbin:</code> <code>/usr/local/sbin：</code></h3><p>放置系统管理员使用的可执行命令，如<code>fdisk</code>、<code>shutdown</code>、<code>mount</code>等。与<code>/bin</code>不同的是，这几个目录是给系统管理员<code>root</code>使用的命令，一般用户只能<strong>查看</strong>而不能设置和使用。</p><h3 id="tmp："><a href="#tmp：" class="headerlink" title="/tmp："></a><code>/tmp：</code></h3><p>一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下</p><h3 id="srv："><a href="#srv：" class="headerlink" title="/srv："></a><code>/srv：</code></h3><p>服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在<code>/srv/www</code>内</p><h3 id="usr："><a href="#usr：" class="headerlink" title="/usr："></a><code>/usr：</code></h3><p>应用程序存放目录 <code>/usr/bin</code> 存放应用程序 <code>/usr/share</code>存放共享数据，<br><code>/usr/lib</code> 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。<br><code>/usr/local:</code> 存放软件升级包。 <code>/usr/share/doc:</code> 系统说明文件存放目录。<br><code>/usr/share/man:</code> 程序说明文件存放目录。</p><h3 id="var："><a href="#var：" class="headerlink" title="/var："></a><code>/var：</code></h3><p>放置系统执行过程中经常变化的文件 如随时更改的日志文件<code>/var/log</code><br><code>/var/log/message</code>：所有的登录文件存放目录，<br><code>/var/spool/mail</code>：邮件存放的目录， <code>/var/run</code>:<br>程序或服务启动后，其PID存放在该目录下。</p><h2 id="FHS"><a href="#FHS" class="headerlink" title="FHS"></a>FHS</h2><p>由于linux是开放源代码，各大公司和团体根据linux的核心代码做各自的操作，编程。这样就造成在根下的目录的不同。这样就造成个人不能使用他人的linux系统的PC。因为你根本不知道一些基本的配置，文件在哪里，这就造成了混乱。这就是FHS（Filesystem<br>Hierarchy Standard<br>）机构诞生的原因。该机构是linux爱好者自发的组成的一个团体，主要是是对linux做一些基本的要求（<strong>约定</strong>），不至于是操作者换一台主机就成了linux的<strong>文盲</strong>。</p><p>根据FHS(<a href="http://www.pathname.com/fhs/)%E7%9A%84%E5%AE%98%E6%96%B9%E6%96%87%E4%BB%B6%E6%8C%87%E5%87%BA%EF%BC%8C">http://www.pathname.com/fhs/)的官方文件指出，</a><br>他们的主要目的是希望让使用者可以了解到已安装软件通常放置于那个目录下，<br>所以他们希望独立的软件开发商、操作系统制作者、以及想要维护系统的用户，都能够遵循FHS的标准。<br>也就是说，FHS的重点在于规范每个特定的目录下应该要放置什么样子的数据而已。<br>这样做好处非常多，因为Linux操作系统就能够在既有的面貌下(目录架构不变)发展出开发者想要的独特风格。</p><p>事实上，FHS是根据过去的经验一直再持续的改版的，FHS依据文件系统使用的频繁与否与是否允许使用者随意更动，<br>而将目录定义成为四种交互作用的形态，用表格来说有点像底下这样：</p><p><img src="https://ryanchou612.github.io/storage/thumbnails/_signature/3IG5A5R3GBG36CE0G4JBVK7DVQ.png" alt="fhs"></p><h2 id="从Linux获得帮助"><a href="#从Linux获得帮助" class="headerlink" title="从Linux获得帮助"></a>从Linux获得帮助</h2><h3 id="内部命令与外部命令"><a href="#内部命令与外部命令" class="headerlink" title="内部命令与外部命令"></a>内部命令与外部命令</h3><ul><li>简单来说，在linux系统中有存储位置的命令为外部命令；</li><li>没有存储位置的为内部命令，可以理解为内部命令嵌入在linux的shell中，所以看不到。</li><li><code>type</code>来判断到底为内部命令还是内部命令</li></ul><p><strong>实例</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># type help</span></span><br><span class="line"><span class="built_in">help</span> is a shell <span class="built_in">builtin</span></span><br><span class="line">[root@master ~]<span class="comment"># type cd</span></span><br><span class="line"><span class="built_in">cd</span> is a shell <span class="built_in">builtin</span></span><br><span class="line">[root@master ~]<span class="comment"># type useradd</span></span><br><span class="line">useradd is /usr/sbin/useradd</span><br><span class="line">[root@master ~]<span class="comment"># type passwd</span></span><br><span class="line">passwd is /usr/bin/passwd</span><br></pre></td></tr></table></figure><h3 id="help命令"><a href="#help命令" class="headerlink" title="help命令"></a><code>help</code>命令</h3><p>内部命令的帮助文档 。使用help的格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>  命令</span><br><span class="line"><span class="built_in">help</span> <span class="built_in">cd</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h3 id="help选项"><a href="#help选项" class="headerlink" title="--help选项"></a><code>--help</code>选项</h3><p>大多数外部命令都可以使用<code>--help</code>来获取帮助，格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令 --<span class="built_in">help</span></span><br><span class="line"><span class="built_in">ls</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="man命令"><a href="#man命令" class="headerlink" title="man命令"></a><code>man</code>命令</h3><p>以全屏显示在线帮助，按<code>q</code>退出，上下键移动，格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man 命令</span><br><span class="line">man <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><ol><li><p>输入 <code>?</code> 键，向前查找，如 <code>?-h</code> ，将会搜索含有<code>-h</code>的行</p></li><li><p>输入 <code>/</code> 键，向后查找，如 <code>/-k</code> ，将会向后搜索<code>-k</code>的行</p></li><li><p>按 <code>N</code>或者<code>n</code>(下一个)来进行上一个下一个相关匹配项查看。</p></li><li><p>man手册存放的位置 可以通过<code>manpath</code>命令来查看manpage的位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man <span class="built_in">ls</span></span><br><span class="line">/ -a</span><br></pre></td></tr></table></figure></li><li><p>man 手册分册（分区段）</p><table><thead><tr><th align="left">section序号</th><th align="left">section的含义</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">可执行文件或者<code>shell</code>命令</td></tr><tr><td align="left">2</td><td align="left">系统调用（内核提供的函数）</td></tr><tr><td align="left">3</td><td align="left">库函数</td></tr><tr><td align="left">4</td><td align="left">特别的文件（通常在<code>/dev</code>）</td></tr><tr><td align="left">5</td><td align="left">文件格式，如<code>/etc/passwd</code></td></tr><tr><td align="left">6</td><td align="left">游戏</td></tr><tr><td align="left">7</td><td align="left">杂项（包括宏包）</td></tr><tr><td align="left">8</td><td align="left">系统管理员命令（通常给<code>root</code>用户使用）</td></tr><tr><td align="left">9</td><td align="left">内核例程（非标准例程）</td></tr></tbody></table><p>使用下面命令可以查看，就是man自己：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man man</span><br><span class="line">man 1 passwd</span><br><span class="line">man 5 passwd</span><br></pre></td></tr></table></figure><blockquote><p>如果没有指定man在哪个板块中寻找，将会按照默认的顺序查找这些板块中的命令，只返回含有该命令的第一个文档，如果指定板块，则只会在指定板块中寻找该命令，所以有时候直接man而不指定板块则可能不会找到自己想要的文档。</p></blockquote><p>可以通过<code>whatis</code>查看一下该命令在man帮助文档中的入口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatis passwd</span><br></pre></td></tr></table></figure></li></ol><h3 id="info命令"><a href="#info命令" class="headerlink" title="info命令"></a>info命令</h3><p>另一种在线帮助，和<code>man</code>功能类似，更加详细，格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info <span class="built_in">ls</span></span><br><span class="line">info <span class="built_in">cd</span></span><br></pre></td></tr></table></figure><blockquote><p>一般用<code>help</code> ,<code>--help</code>足够，<code>man</code>来补充，<code>info</code>用的很少</p></blockquote><h1 id="Linux文件和目录管理"><a href="#Linux文件和目录管理" class="headerlink" title="Linux文件和目录管理"></a>Linux文件和目录管理</h1><h2 id="ls-列出目标目录"><a href="#ls-列出目标目录" class="headerlink" title="ls 列出目标目录"></a><code>ls</code> 列出目标目录</h2><h3 id="ls简介"><a href="#ls简介" class="headerlink" title="ls简介"></a><code>ls</code>简介</h3><ul><li><code>ls</code>命令用来列出目标目录（<strong>缺省为当前目录</strong>）中所有的子目录和文件。指令英文原义：list</li><li>指令所在路径：<code>/bin/ls</code></li><li>执行权限：<code>All User</code></li></ul><h3 id="ls语法"><a href="#ls语法" class="headerlink" title="ls语法"></a><code>ls</code>语法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [OPTION]... [FILE]...</span><br><span class="line"><span class="built_in">ls</span> 选项[-alFR...]..... [目录]</span><br></pre></td></tr></table></figure><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul><li><p>默认显示当前目录下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li><li><p>显示指定目录下面的内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /root</span><br></pre></td></tr></table></figure></li><li><p>逆序输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -r</span><br></pre></td></tr></table></figure></li></ul><h3 id="显示隐藏文件"><a href="#显示隐藏文件" class="headerlink" title="显示隐藏文件"></a>显示隐藏文件</h3><p>在 Linux 中以 <code>.</code> 号(dot)开头的目录和文件被理解为隐藏文件。<code>ls</code><br>命令默认不会列出这些文件，除非你指定了 -a 选项。<code>-a</code><br>选项其实是显示所有的文件，包含隐藏的文件和目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><h3 id="使用长格式显示更多信息"><a href="#使用长格式显示更多信息" class="headerlink" title="使用长格式显示更多信息"></a>使用长格式显示更多信息</h3><p>长格式能够提供更多的信息，比如文件和目录的大小，最后更新的时间，所有者及其权限。使用<br>-l (小写的字母L) 选项可以输出长格式的信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@master /]<span class="comment"># ls -l</span></span><br><span class="line">total 28</span><br><span class="line">lrwxrwxrwx.   1 root root    7 Apr 26 22:43 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   5 root root 4096 Apr 26 22:59 boot</span><br><span class="line">drwxr-xr-x   19 root root 3280 Apr 27 17:01 dev</span><br><span class="line">drwxr-xr-x. 145 root root 8192 Apr 27 17:01 etc</span><br><span class="line">drwxr-xr-x.   3 root root   17 Apr 26 22:58 home</span><br><span class="line">lrwxrwxrwx.   1 root root    7 Apr 26 22:43 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root    9 Apr 26 22:43 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x.   2 root root    6 Apr 10  2018 media</span><br><span class="line">drwxr-xr-x.   2 root root    6 Apr 10  2018 mnt</span><br><span class="line">drwxr-xr-x.   3 root root   16 Apr 26 22:50 opt</span><br><span class="line">dr-xr-xr-x  228 root root    0 Apr 27 17:01 proc</span><br><span class="line">dr-xr-x---.  14 root root 4096 Apr 27 17:49 root</span><br><span class="line">drwxr-xr-x   42 root root 1240 Apr 27 18:18 run</span><br><span class="line">lrwxrwxrwx.   1 root root    8 Apr 26 22:43 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root    6 Apr 10  2018 srv</span><br><span class="line">dr-xr-xr-x   13 root root    0 Apr 27 18:17 sys</span><br><span class="line">drwxrwxrwt.  32 root root 4096 Apr 27 18:18 tmp</span><br><span class="line">drwxr-xr-x.  13 root root  155 Apr 26 22:43 usr</span><br><span class="line">drwxr-xr-x.  22 root root 4096 Apr 27 01:13 var</span><br></pre></td></tr></table></figure><p><strong>第1字段: 文件属性字段</strong></p><p>文件属性字段总共有10个字母组成,第一个字符表示文件类型</p><p>字母<code>-</code>表示该文件是一个普通文件</p><p>字母<code>d</code>表示该文件是一个目录</p><p>字母<code>l</code>表示该文件是一个链接文件</p><p>字母<code>b</code>表示该文件是块设备文件(block)，一般置于<code>/dev</code>目录下，设备文件是普通文件和程序访问硬件设备的入口，一类特殊文件。</p><p>字母<code>c</code>表示该文件是一个字符设备文件(character)</p><p>字母<code>p</code>表示该文件为命令管道文件。与shell编程有关的文件。</p><p>字母<code>s</code>表示该文件为sock文件。与shell编程有关的文件。</p><p>第1字符的后面9个字母表示该文件或目录的权限位。其中前三个表示<strong>文件拥有者</strong>的权限，中间三个表示<strong>文件所属组</strong>拥有的权限，最后三个表示<strong>其他用户</strong>拥有的权限</p><p><code>r</code>表是读 (Read) 、<code>w</code>表示写 (Write) 、<code>x</code>表示执行 (eXecute)</p><p><strong>第2字段：文件硬链接数</strong></p><p>如果一个文件不是目录，此时这一字段表示这个文件所具有的硬链接数</p><p><strong>第3字段：文件（目录）拥有者</strong></p><p><strong>第4字段：文件（目录）拥有者所在的组</strong></p><p><strong>第5字段: 文件所占用的空间(以字节为单位)</strong></p><p><strong>第6字段：文件（目录）最近访问（修改）时间</strong></p><p><strong>第7字段：文件名</strong></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>ls 命令的输出默认是以字母序排列的，只是隐藏文件的 .<br>号没有参与排序规则。除了字母序，我们还能以文件的大小或最后修改时间为排序条件.</p><h3 id="以文件的大小排序"><a href="#以文件的大小排序" class="headerlink" title="以文件的大小排序"></a>以文件的大小排序</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lS</span><br></pre></td></tr></table></figure><h3 id="最后修改时间排序"><a href="#最后修改时间排序" class="headerlink" title="最后修改时间排序"></a>最后修改时间排序</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lt</span><br></pre></td></tr></table></figure><h2 id="cd-pwd-切换显示目录"><a href="#cd-pwd-切换显示目录" class="headerlink" title="cd pwd 切换显示目录"></a>cd pwd 切换显示目录</h2><h3 id="pwd显示当前目录"><a href="#pwd显示当前目录" class="headerlink" title="pwd显示当前目录"></a>pwd显示当前目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><blockquote><p>print working directory</p></blockquote><h3 id="cd命令简介"><a href="#cd命令简介" class="headerlink" title="cd命令简介"></a><code>cd</code>命令简介</h3><p>该命令用来切换当前目录。<code>cd</code> 是change directory 的缩写。</p><h3 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [-L|-P] [<span class="built_in">dir</span>]</span><br></pre></td></tr></table></figure><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="built_in">cd</span> /etc</span><br></pre></td></tr></table></figure><h3 id="特殊用法"><a href="#特殊用法" class="headerlink" title="特殊用法"></a>特殊用法</h3><h3 id="切换到父目录"><a href="#切换到父目录" class="headerlink" title="切换到父目录"></a>切换到父目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure><blockquote><p>点（<code>.</code>）代表当前目录，两个点（<code>..</code>）代表父目录</p></blockquote><h3 id="切换到home目录"><a href="#切换到home目录" class="headerlink" title="切换到home目录"></a>切换到home目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><blockquote><p><code>~</code>表示home目录</p></blockquote><h3 id="返回之前的目录"><a href="#返回之前的目录" class="headerlink" title="返回之前的目录"></a>返回之前的目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure><h2 id="Linux创建删除目录"><a href="#Linux创建删除目录" class="headerlink" title="Linux创建删除目录"></a>Linux创建删除目录</h2><h3 id="创建目录mkdir"><a href="#创建目录mkdir" class="headerlink" title="创建目录mkdir"></a>创建目录<code>mkdir</code></h3><p>linux <code>mkdir</code><br>命令用来创建指定的名称的目录，要求创建目录的用户在当前目录中具有<strong>写权限</strong>，并且指定的目录名不能是当前目录中<strong>已有的目录</strong>。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [选项] 目录...</span><br></pre></td></tr></table></figure><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p><code>-m</code>, –mode&#x3D;模式，设定权限模式 (类似 <code>chmod</code>)</p><p><code>-p</code>, –parents 可以创建一个多级目录</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span>           <span class="comment">#创建test目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p test1/test2 <span class="comment">#创建多级目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -m 777 test3   <span class="comment">#创建权限为777的目录</span></span><br></pre></td></tr></table></figure><h2 id="删除目录rmdir"><a href="#删除目录rmdir" class="headerlink" title="删除目录rmdir"></a>删除目录<code>rmdir</code></h2><p><code>rmdir</code>是常用的命令，该命令的功能是删除空目录，一个目录被删除之前必须是空的。删除某目录时也必须具有对父目录的写权限。</p><blockquote><p>注意: <code>rm - r dir</code>命令可代替<code>rmdir</code>，但是有很大危险性。</p><p>rm -rf dir</p><p>r递归删除，f强制删除</p></blockquote><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h1 id="Linux创建文件"><a href="#Linux创建文件" class="headerlink" title="Linux创建文件"></a>Linux创建文件</h1><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h3><p>linux的<code>touch</code>命令不常用，一般在使用<code>make</code>的时候可能会用到，用来修改文件时间戳，或者新建一个不存在的文件。</p><h3 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> [选项]... 文件...</span><br></pre></td></tr></table></figure><h3 id="命令参数-1"><a href="#命令参数-1" class="headerlink" title="命令参数"></a>命令参数</h3><p><code>-a</code> 或–time&#x3D;atime或–time&#x3D;access或–time&#x3D;use 只更改存取时间。</p><p><code>-c</code> 或–no-create 不建立任何文档。</p><p><code>-d</code> 使用指定的日期时间，而非现在的时间。</p><p><code>-f</code> 此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题。</p><p><code>-m</code> 或–time&#x3D;mtime或–time&#x3D;modify 只更改变动时间。</p><p><code>-r</code><br>把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。</p><p><code>-t</code> 使用指定的日期时间，而非现在的时间。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> test1.log test2.log          <span class="comment"># 创建不存在的文件</span></span><br><span class="line"><span class="built_in">touch</span> -r test1.log test2.log       <span class="comment"># 更新test1.log的时间和test2.log时间戳相同</span></span><br><span class="line"><span class="built_in">touch</span> -t 202211142234.50 test1.log <span class="comment">#设定文件的时间戳</span></span><br></pre></td></tr></table></figure><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a><code>vim</code></h3><p>使用vim也可以创建一个文件，详细内容见vim章节</p><h1 id="Linux删除文件和目录"><a href="#Linux删除文件和目录" class="headerlink" title="Linux删除文件和目录"></a>Linux删除文件和目录</h1><h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a><code>rm</code>命令</h3><p><code>rm</code>是常用的命令，该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变。</p><h3 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [选项] 文件… </span><br></pre></td></tr></table></figure><h3 id="命令参数-2"><a href="#命令参数-2" class="headerlink" title="命令参数"></a>命令参数</h3><p><code>-f</code>, –force 忽略不存在的文件，从不给出提示。</p><p><code>-i</code>, –interactive 进行交互式删除</p><p><code>-r</code>, -R, –recursive<br>指示<code>rm</code>将参数中列出的全部目录和子目录均递归地删除。</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> test.txt <span class="comment"># 删除文件，系统会询问</span></span><br><span class="line"><span class="built_in">rm</span> -f test.txt <span class="comment"># 强制删除，不询问</span></span><br><span class="line"><span class="built_in">rm</span> <span class="built_in">test</span>/    <span class="comment"># 删除目录，系统会询问</span></span><br><span class="line"><span class="built_in">rm</span> -f <span class="built_in">test</span>/ <span class="comment"># 删除目录，不询问</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="built_in">test</span>/ <span class="comment"># 递归删除目录及下面文件，不询问</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="built_in">test</span>* <span class="comment"># 删除以test开头的文件，不询问</span></span><br><span class="line"><span class="built_in">rm</span> -rf *.txt *.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h1 id="Linux移动文件和目录"><a href="#Linux移动文件和目录" class="headerlink" title="Linux移动文件和目录"></a>Linux移动文件和目录</h1><h3 id="移动文件和目录mv"><a href="#移动文件和目录mv" class="headerlink" title="移动文件和目录mv"></a>移动文件和目录<code>mv</code></h3><p><code>mv</code>命令是move的缩写，可以用来移动文件或者将文件<strong>改名</strong>（move (rename)<br>files），是Linux系统下常用的命令，经常用来<strong>备份</strong>文件或者目录。</p><h3 id="命令格式-3"><a href="#命令格式-3" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> [选项] 源文件或目录 目标文件或目录</span><br></pre></td></tr></table></figure><h3 id="命令参数-3"><a href="#命令参数-3" class="headerlink" title="命令参数"></a>命令参数</h3><p><code>-b</code> ：若需覆盖文件，则覆盖前先行备份。</p><p><code>-f</code> ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</p><p><code>-i</code> ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</p><p><code>-u</code> ：若目标文件已经存在，且 source 比较新，才会更新(update)</p><p><code>-t</code> ：<br>即指定<code>mv</code>的目标目录，该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后。</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> test1.txt test2.txt <span class="comment"># 重命名</span></span><br><span class="line"><span class="built_in">mv</span> test1.txt test2.txt <span class="built_in">test</span>      <span class="comment"># 移动文件</span></span><br><span class="line"><span class="built_in">mv</span> -t <span class="built_in">test</span> test1.txt test2.txt   <span class="comment"># 移动文件</span></span><br><span class="line"><span class="built_in">mv</span> <span class="built_in">test</span>* <span class="built_in">test</span>                    <span class="comment"># 使用通配符</span></span><br><span class="line"><span class="built_in">mv</span> -i test1.txt test2.txt        <span class="comment"># 将文件file1改名为file2，如果file2已经存在，则询问是否覆盖</span></span><br><span class="line"><span class="built_in">mv</span> -f test1.txt test2.txt        <span class="comment"># 将文件file1改名为file2，即使file2存在，也是直接覆盖掉。</span></span><br><span class="line"><span class="built_in">mv</span> test1 test2                   <span class="comment"># 移动目录</span></span><br><span class="line"><span class="built_in">mv</span> * ../                         <span class="comment"># 移动当前文件夹下的所有文件到上一级目录</span></span><br><span class="line"><span class="built_in">mv</span> test3/*.txt test5             <span class="comment"># 把当前目录的一个子目录里的文件移动到另一个子目录里</span></span><br></pre></td></tr></table></figure><h1 id="Linux拷贝文件和目录"><a href="#Linux拷贝文件和目录" class="headerlink" title="Linux拷贝文件和目录"></a>Linux拷贝文件和目录</h1><h3 id="cp命令拷贝文件和目录"><a href="#cp命令拷贝文件和目录" class="headerlink" title="cp命令拷贝文件和目录"></a><code>cp</code>命令拷贝文件和目录</h3><p><code>cp</code>命令用来复制文件或者目录，是Linux系统中最常用的命令之一</p><h2 id="命令格式-4"><a href="#命令格式-4" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [选项]... [-T] 源 目的</span><br><span class="line">或：<span class="built_in">cp</span> [选项]... 源... 目录</span><br><span class="line">或：<span class="built_in">cp</span> [选项]... -t 目录 源...</span><br></pre></td></tr></table></figure><h3 id="命令参数-4"><a href="#命令参数-4" class="headerlink" title="命令参数"></a>命令参数</h3><hr><p>  参数   长参数   描叙</p><hr><p>  -a              等同于-dR</p><p>  -b              若删除或者覆盖目标文件，将对目标文件进行备份，备份文件以备份的字符串结尾 .bak</p><p>  -d              复制符号链接</p><p>  -f              强制复制</p><p>  -h              强制cp命令复制符号链接。缺省值是跟随符号链接，也就是将文件复制到符号链接指向处。</p><p>  -i              交互式模式。覆盖目标文件之前先要进行询问</p><p>  -l              建立硬链接，而非复制</p><p>  -p              源目录或者文件的属性保留(修改日期、时间和访问控制列表等)</p><p>  -P              源目录或者文件的路劲保留</p><h2 id="r-x2F-R-处理指定目录以及子目录"><a href="#r-x2F-R-处理指定目录以及子目录" class="headerlink" title="  -r&#x2F;R            处理指定目录以及子目录"></a>  -r&#x2F;R            处理指定目录以及子目录</h2><h2 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> t1.txt <span class="built_in">test</span>         <span class="comment"># 复制单个文件到目标目录，目标文件存在时，会询问是否覆盖</span></span><br><span class="line"><span class="built_in">cp</span> -r test1 test2      <span class="comment"># 复制目录需要加-r参数</span></span><br><span class="line"><span class="built_in">cp</span> -rf test1/* test2   <span class="comment"># 强制递归复制test1下面的所有内容到test2，不提示</span></span><br><span class="line"><span class="built_in">cp</span> * ../               <span class="comment"># 复制当前目录下面的文件到父母录</span></span><br><span class="line"><span class="built_in">cp</span> -rf * ../           <span class="comment"># 复制文件和目录到父目录</span></span><br></pre></td></tr></table></figure><h1 id="Linux显示合并文件"><a href="#Linux显示合并文件" class="headerlink" title="Linux显示合并文件"></a>Linux显示合并文件</h1><h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a><code>cat</code>命令</h3><p>cat命令的用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。</p><h3 id="命令格式-5"><a href="#命令格式-5" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [选项] [文件]...</span><br></pre></td></tr></table></figure><h3 id="三大功能"><a href="#三大功能" class="headerlink" title="三大功能"></a>三大功能</h3><ol><li>一次显示整个文件:<code>cat filename</code></li><li>从键盘创建一个文件:<code>cat &gt; filename</code><br>只能创建新文件，不能编辑已有文件.</li><li>将几个文件合并为一个文件:<code>cat file1 file2 &gt; file</code></li></ol><h3 id="命令参数-5"><a href="#命令参数-5" class="headerlink" title="命令参数"></a>命令参数</h3><p>-A, –show-all 等价于 -vET</p><p>-b, –number-nonblank 对非空输出行编号</p><p>-e 等价于 -vE</p><p>-E, –show-ends 在每行结束处显示 $</p><p>-n, –number 对输出的所有行编号,由1开始对所有输出的行数编号</p><p>-s, –squeeze-blank 有连续两行以上的空白行，就代换为一行的空白行</p><p>-t 与 -vT 等价</p><p>-T, –show-tabs 将跳格字符显示为 ^I</p><p>-u (被忽略)</p><p>-v, –show-nonprinting 使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外</p><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">cat</span> test.txt               <span class="comment"># 显示test.txt文件内容</span></span><br><span class="line"> <span class="built_in">cat</span> test1.txt test2.txt    <span class="comment"># 同时显示这两个文件内容</span></span><br><span class="line"> <span class="built_in">cat</span> &gt; t1.txt               <span class="comment"># 从键盘输入内容到t1.txt ctrl+d 结束</span></span><br><span class="line"> <span class="built_in">cat</span> &gt; test2.txt &lt;&lt; <span class="string">EOF     # 从键盘输入内容到t1.txt使用EOF</span>作为文件结束</span><br><span class="line"> &gt; test1</span><br><span class="line"> &gt; test2</span><br><span class="line"> &gt; EOF</span><br><span class="line"> <span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; test2.txt      # 从键盘输入内容到t1.txt使用EOF</span>作为文件结束（也可以放在前面）</span><br><span class="line"> <span class="built_in">cat</span> t1.txt t2.txt &gt; t3.txt  <span class="comment"># 将t1 t2合并到t3 覆盖</span></span><br><span class="line"> <span class="built_in">cat</span> t1.txt t2.txt &gt;&gt; t3.txt  <span class="comment"># 将t1 t2合并到t3 追加不是覆盖</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 快速编辑一个文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.18.128 node01</span></span><br><span class="line"><span class="string">192.168.18.138 node02</span></span><br><span class="line"><span class="string">192.168.18.148 node03</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h1 id="Linux系统结构"><a href="#Linux系统结构" class="headerlink" title="Linux系统结构"></a>Linux系统结构</h1><p>操作系统是软件的集合，每个软件都是为特定功能而设计的。</p><p>Linux OS具有以下组件：</p><h2 id="1）内核"><a href="#1）内核" class="headerlink" title="1）内核"></a>1）内核</h2><p>Linux内核是操作系统的核心部分。它在设备和软件之间建立通信。而且，它管理系统资源。它有四个职责：</p><ul><li><strong>设备管理：</strong><br>系统上连接了许多设备，例如CPU，存储设备，声卡，显卡等。内核将所有与所有设备相关的数据存储在设备驱动程序中（如果没有该内核，将无法以控制设备）。因此内核知道设备可以做什么以及如何操纵设备以发挥最佳性能。它还管理所有设备之间的通信。内核具有所有设备必须遵循的某些规则。</li><li><strong>内存管理：</strong><br>内核必须管理的另一个功能是内存管理。内核跟踪已使用和未使用的内存，并确保进程不应使用虚拟内存地址来操纵彼此的数据。</li><li><strong>进程管理：</strong><br>在进程中，管理内核会分配足够的时间并为进程分配优先级，然后再将CPU处理给其他进程。它还处理安全性和所有权信息。</li><li><strong>处理系统调用：</strong><br>处理系统调用意味着程序员可以编写查询或要求内核执行任务。</li></ul><h2 id="2）系统库"><a href="#2）系统库" class="headerlink" title="2）系统库"></a>2）系统库</h2><p>系统库是帮助访问内核功能的特殊程序。必须触发内核才能执行任务，并且该触发操作由应用程序完成。但是应用程序必须知道如何进行系统调用，因为每个内核都有一组不同的系统调用。程序员已经开发了一个标准的程序库来与内核进行通信。每个操作系统都支持这些标准，然后将这些标准转移到该操作系统的系统调用中。</p><p>Linux最著名的系统库是Glibc（GNU C库）。</p><h2 id="3）系统工具"><a href="#3）系统工具" class="headerlink" title="3）系统工具"></a>3）系统工具</h2><p>Linux<br>OS具有一组实用程序工具，通常是简单的命令。它是GNU项目在其开放源代码许可下编写和发布的软件，因此每个人都可以免费使用该软件。</p><p>借助命令，你可以访问文件，编辑和操作目录或文件中的数据，更改文件的位置或任何其他内容。</p><h2 id="4）开发工具"><a href="#4）开发工具" class="headerlink" title="4）开发工具"></a>4）开发工具</h2><p>通过以上三个组件，操作系统正在运行并正常工作。但是要更新系统，需要其他工具和库。这些额外的工具和库由程序员编写，称为工具链。工具链是开发人员用来生成有效应用程序的重要开发工具。</p><h2 id="5）最终用户工具"><a href="#5）最终用户工具" class="headerlink" title="5）最终用户工具"></a>5）最终用户工具</h2><p>这些最终工具使系统对于用户而言是唯一的。终端工具对于操作系统不是必需的，但对于用户而言则是必需的。</p><p>最终工具的一些示例是图形设计工具，办公套件，浏览器，多媒体播放器等。app</p><h1 id="Linux输入输出重定向"><a href="#Linux输入输出重定向" class="headerlink" title="Linux输入输出重定向"></a>Linux输入输出重定向</h1><h2 id="什么重定向"><a href="#什么重定向" class="headerlink" title="什么重定向"></a>什么重定向</h2><p>所谓的重定向，就是重新定义输入和输出的方向，例如：本来我们要将一个命令输出在标准输出（终端显示），但是我们把它重定向到了一个文件里面（写入一个文件里面了）这就是重定向。</p><h2 id="Linux-文件描述符"><a href="#Linux-文件描述符" class="headerlink" title="Linux 文件描述符"></a>Linux 文件描述符</h2><p>文件描述符可以理解为 Linux 系统为文件分配的一个数字，范围是 0-3 。</p><table><thead><tr><th align="left">名称</th><th align="left">类型</th><th align="left">文件描述符</th><th align="left">操作</th></tr></thead><tbody><tr><td align="left">标准输入</td><td align="left">standard input</td><td align="left">0</td><td align="left">&lt;,&lt;&lt;</td></tr><tr><td align="left">标准输出</td><td align="left">standard output</td><td align="left">1</td><td align="left">&gt;,&gt;&gt;</td></tr><tr><td align="left">标准错误输出</td><td align="left">standard error output</td><td align="left">2</td><td align="left">2&gt;,2&gt;&gt;</td></tr></tbody></table><blockquote><p><code>&lt;</code> <code>&gt;</code>覆盖</p><p><code>&gt;&gt;</code> <code>&lt;&lt;</code> 追加</p></blockquote><h2 id="Linux-命令执行过程"><a href="#Linux-命令执行过程" class="headerlink" title="Linux 命令执行过程"></a>Linux 命令执行过程</h2><p>对于一条 Linux 的命令执行的过程如下</p><p>![image-20230715112423047](&#x2F;Users&#x2F;pacozhou&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230715112423047.png)</p><ol><li>用户开始从键盘（键盘在 Linux<br>上属于文件）输入数据，也就是系统从文件中读取数据的时候</li><li>shell 将接受到的数据（标准输入）传递给相应的命令开始执行</li><li>(yes)执行成功后，即可获得标准正确输出。(no)执行失败后，获得标准错误输出</li><li>在默认情况下，标准正确输出的结果与标准错误输出的缺省输出都为当前用户执行的终端</li></ol><p>一个命令执行以前，会准备好所有的输入输出，默认分别绑定<br><code>stdin</code>(0)，<code>stdout</code>(1)，<code>stderr</code>(2)。如果在准备命令的时候出现错误，那么这个命令将不会执行。</p><h2 id="能够使用Linux重定向的命令"><a href="#能够使用Linux重定向的命令" class="headerlink" title="能够使用Linux重定向的命令"></a>能够使用Linux重定向的命令</h2><p>重定向能够实现Linux命令的输入输出与文件之间重定向，以及实现将多个命令组合起来实现更加强大的命令。这部分涉及到的比较多的命令主要有：</p><ul><li><code>cat</code>：连接文件</li><li><code>sort</code>：排序文本行</li><li><code>uniq</code>：忽略或者报告重复行</li><li><code>wc</code>：统计文件的行数、词数、字节数</li><li><code>grep</code>：打印匹配制定模式的行</li><li><code>head</code>：输出文件的头部</li><li><code>tail</code>：输出文件的尾部</li><li><code>tee</code>：从标准输入读，并往标准输出或者文件写</li></ul><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command-line1 [1-n] &gt; file或文件操作符或设备</span><br></pre></td></tr></table></figure><blockquote><p>上面命令意思是：将一条命令执行结果（标准输出，或者错误输出，本来都要打印到屏幕上面的）<br>重定向其它输出设备（文件，打开文件操作符，或打印机等等）1,2分别是标准输出，错误输出。</p></blockquote><p><strong>实例</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> &gt; test.txt    <span class="comment">#标准输出重定向到test.txt，文件不存在就创建，覆盖</span></span><br><span class="line"><span class="built_in">ls</span> &gt;&gt; test.txt   <span class="comment">#追加</span></span><br><span class="line"><span class="built_in">ls</span> test.txt test1.txt 1&gt;suc.txt 2&gt;err.txt <span class="comment"># 正确输出到suc.txt 错误输出到err.txt(text1.txt不存在)</span></span><br></pre></td></tr></table></figure><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command-line [n] &lt;file或文件描述符&amp;设备</span><br></pre></td></tr></table></figure><p>命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入。执行这个命令，将标准输入0，与文件或设备绑定。将由它进行输入。</p><p><strong>实例</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># cat &gt;  test.txt</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="comment">#按下 [ctrl]+d 离开 在linux按ctrl-d就代表EOF。</span></span><br><span class="line"><span class="comment">#从标准输入【键盘】获得数据，然后输出给test.txt文件</span></span><br><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># cat &gt; test1.txt &lt; test.txt</span></span><br><span class="line"><span class="comment">#cat 从test.txt 获得输入数据，然后输出给文件test1.txt</span></span><br></pre></td></tr></table></figure><p>执行脚本的时候，需要往一个文件里自动输入N行内容。如果是少数的几行内容，还可以用echo追加方式，但如果是很多行，那么单纯用echo追加的方式就显得很低效了！</p><p>这个时候，就可以使用<code>EOF</code>结合<code>cat</code>命令进行行内容的追加了。 EOF是END Of<br>File的缩写,表示自定义终止符.既然自定义,那么EOF就不是固定的,可以随意设置别名,在linux按<code>ctrl-d</code>就代表EOF.<br>EOF一般会配合cat能够多行文本输出. 其用法如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;<span class="string">EOF     //开始</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line"><span class="string">EOF</span>      //结束</span><br></pre></td></tr></table></figure><p>还可以自定义，比如自定义：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;<span class="string">BBB     //开始</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line"><span class="string">BBB</span>       //结束</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt; hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.18.128 node01</span></span><br><span class="line"><span class="string">192.168.18.138 node02</span></span><br><span class="line"><span class="string">192.168.18.148 node03</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h1 id="Linux-more-less查看文件"><a href="#Linux-more-less查看文件" class="headerlink" title="Linux more less查看文件"></a>Linux more less查看文件</h1><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p><code>more</code>功能类似 <code>cat</code> ，<code>cat</code>命令是整个文件的内容从上到下显示在屏幕上。<br><code>more</code>会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按<br><code>b</code> 键就会往回（back）一页显示，而且还有搜寻字串的功能<br>。<code>more</code>命令从前向后读取文件，因此在启动时就加载整个文件。</p><h3 id="命令格式-6"><a href="#命令格式-6" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more [-dlfpcsu ] [-num ] [+/ pattern] [+ linenum] [file ... ] </span><br></pre></td></tr></table></figure><h3 id="命令参数-6"><a href="#命令参数-6" class="headerlink" title="命令参数"></a>命令参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+n   从笫n行开始显示</span><br><span class="line">-n    定义屏幕大小为n行</span><br><span class="line">+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 </span><br><span class="line">-c    从顶部清屏，然后显示</span><br><span class="line">-d    提示“Press space to <span class="built_in">continue</span>，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能</span><br><span class="line">-l    忽略Ctrl+l（换页）字符</span><br><span class="line">-p    通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似</span><br><span class="line">-s    把连续的多个空行显示为一行</span><br><span class="line">-u    把文件内容中的下画线去掉</span><br></pre></td></tr></table></figure><h3 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enter  向下n行，需要定义。默认为1行</span><br><span class="line">Ctrl+F  向下滚动一屏</span><br><span class="line">空格键 向下滚动一屏</span><br><span class="line">Ctrl+B 返回上一屏</span><br><span class="line">=    输出当前行的行号</span><br><span class="line">:f   输出文件名和当前行的行号</span><br><span class="line">V   调用vi编辑器</span><br><span class="line">!命令  调用Shell，并执行命令 </span><br><span class="line">q    退出more</span><br></pre></td></tr></table></figure><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">more /etc/passwd</span><br><span class="line">more +5 /etc/passwd <span class="comment">#从第五行开始显示</span></span><br><span class="line">more -5 /etc/passwd <span class="comment">#每屏显示5行</span></span><br><span class="line">more +/sbin /etc/passwd <span class="comment"># 从文件中查找第一个出现&quot;sbin&quot;字符串的行，并从该处前两行开始显示输出</span></span><br></pre></td></tr></table></figure><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p><code>less</code> 工具也是对文件或其它输出进行分页显示的工具，功能很强大。<code>less</code><br>的用法比起 <code>more</code> 更加的有弹性。 在 <code>more</code><br>的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 <code>less</code><br>时，就可以使用 <code>[pageup]</code> <code>[pagedown]</code> 等按<br>键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在<br><code>less</code> 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p><h3 id="命令格式-7"><a href="#命令格式-7" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less [参数] 文件 </span><br></pre></td></tr></table></figure><h3 id="命令参数-7"><a href="#命令参数-7" class="headerlink" title="命令参数"></a>命令参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-b &lt;缓冲区大小&gt; 设置缓冲区的大小</span><br><span class="line">-e 当文件显示结束后，自动离开</span><br><span class="line">-f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件</span><br><span class="line">-g 只标志最后搜索的关键词</span><br><span class="line">-i 忽略搜索时的大小写</span><br><span class="line">-m 显示类似more命令的百分比</span><br><span class="line">-N 显示每行的行号</span><br><span class="line">-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</span><br><span class="line">-Q 不使用警告音</span><br><span class="line">-s 显示连续空行为一行</span><br><span class="line">-S 行过长时间将超出部分舍弃</span><br><span class="line">-x &lt;数字&gt; 将“tab”键显示为规定的数字空格</span><br><span class="line">/ 字符串：向下搜索“字符串”的功能</span><br><span class="line">? 字符串：向上搜索“字符串”的功能</span><br><span class="line">n：重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line">N：反向重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line">b 向后翻一页</span><br><span class="line">d 向后翻半页</span><br><span class="line">h 显示帮助界面</span><br><span class="line">Q 退出less 命令</span><br><span class="line">u 向前滚动半页</span><br><span class="line">y 向前滚动一行</span><br><span class="line">空格键 滚动一行</span><br><span class="line">回车键 滚动一页</span><br><span class="line">[pagedown]： 向下翻动一页</span><br><span class="line">[pageup]：  向上翻动一页</span><br></pre></td></tr></table></figure><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">less /etc/passwd    <span class="comment"># 显示结束按q退出</span></span><br><span class="line">less -e /etc/passwd <span class="comment"># 当文件显示结束后，自动离开</span></span><br><span class="line">less -m /etc/passwd <span class="comment"># 显示百分比</span></span><br><span class="line">less /etc/passwd    <span class="comment"># 输入 /root 和 ？root 查找</span></span><br></pre></td></tr></table></figure><h1 id="Linux-命令head和tail"><a href="#Linux-命令head和tail" class="headerlink" title="Linux 命令head和tail"></a>Linux 命令head和tail</h1><p><code>head</code> 与 <code>tail</code><br>就像它的名字一样的浅显易懂，它是用来显示开头或结尾某个数量的文字区块，<code>head</code><br>用来显示档案的开头至标准输出中，而 <code>tail</code> 想当然尔就是看档案的结尾。</p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><h3 id="命令格式-8"><a href="#命令格式-8" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> [参数]... [文件]... </span><br></pre></td></tr></table></figure><h3 id="命令参数-8"><a href="#命令参数-8" class="headerlink" title="命令参数"></a>命令参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-q 隐藏文件名</span><br><span class="line"></span><br><span class="line">-v 显示文件名</span><br><span class="line"></span><br><span class="line">-c&lt;字节&gt; 显示字节数</span><br><span class="line"></span><br><span class="line">-n&lt;行数&gt; 显示的行数</span><br></pre></td></tr></table></figure><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> /etc/passwd        <span class="comment"># 默认显示前10行</span></span><br><span class="line"><span class="built_in">head</span> -n 3 /etc/passwd   <span class="comment"># 显示前三行</span></span><br><span class="line"><span class="built_in">head</span> -c 20 /etc/passwd  <span class="comment"># 显示前20个字节</span></span><br><span class="line"><span class="built_in">head</span> -c -20 /etc/passwd <span class="comment"># 显示后20个字节</span></span><br></pre></td></tr></table></figure><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><h3 id="命令格式-9"><a href="#命令格式-9" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span>[必要参数][选择参数][文件]  </span><br></pre></td></tr></table></figure><h3 id="命令参数-9"><a href="#命令参数-9" class="headerlink" title="命令参数"></a>命令参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-f 循环读取</span><br><span class="line"></span><br><span class="line">-q 不显示处理信息</span><br><span class="line"></span><br><span class="line">-v 显示详细的处理信息</span><br><span class="line"></span><br><span class="line">-c&lt;数目&gt; 显示的字节数</span><br><span class="line"></span><br><span class="line">-n&lt;行数&gt; 显示行数</span><br><span class="line"></span><br><span class="line">--pid=PID 与-f合用,表示在进程ID,PID死掉之后结束. </span><br><span class="line"></span><br><span class="line">-q, --quiet, --silent 从不输出给出文件名的首部 </span><br><span class="line"></span><br><span class="line">-s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒 </span><br></pre></td></tr></table></figure><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> /etc/passwd  <span class="comment"># 默认显示末尾10行</span></span><br><span class="line"><span class="built_in">tail</span> -n 5 /etc/passwd <span class="comment"># 显示最后5行</span></span><br><span class="line">top &gt; test.txt <span class="comment"># 将top输出到test.txt 用于测试</span></span><br><span class="line"><span class="built_in">tail</span> -f test.txt <span class="comment"># 监控文件变化</span></span><br></pre></td></tr></table></figure><h1 id="Linux用户和组的基本概念"><a href="#Linux用户和组的基本概念" class="headerlink" title="Linux用户和组的基本概念"></a>Linux用户和组的基本概念</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用户和组是操作系统中一种身份认证资源。</p><p>每个用户都有用户名、用户的唯一编号<code>uid</code>(user<br>id)、所属组及其默认的shell，可能还有密码、家目录、附属组、注释信息等。</p><p>每个组也有自己的名称、组唯一编号<code>gid</code>(group<br>id)。一般来说，gid和uid是可以不相同的，但绝大多数都会让它们保持一致，大致属于约定俗成类的概念吧。</p><p>组分为主组(primary group)和辅助组(secondary<br>group)两种，用户一定会属于某个主组，也可以同时加入多个辅助组。</p><h2 id="Linux用户分类"><a href="#Linux用户分类" class="headerlink" title="Linux用户分类"></a>Linux用户分类</h2><p>在Linux中，用户分为3类：</p><h3 id="超级管理员"><a href="#超级管理员" class="headerlink" title="超级管理员"></a>超级管理员</h3><p>超级管理员是最高权限者，它的<code>uid=0</code>，默认超级管理员用户名为<code>root</code>。因为<code>uid</code>默认具有唯一性，所以超级管理员默认只能有一个(如何添加额外的超级管理员，见useradd命令)，但这一个超级管理员的名称并非一定要是root。但是没人会去改root的名称，在后续非常非常多的程序中，都认为超级管理员名称为root，这里要是一改，牵一发而动全身。</p><h3 id="系统用户"><a href="#系统用户" class="headerlink" title="系统用户"></a>系统用户</h3><p>有时候需要一类具有某些特权但又不需要登录操作系统的用户，这类用户称为系统用户。它们的<code>uid</code>范围从201到999(不包括1000)，有些老版本范围是1到499(centos<br>6)，出于安全考虑，它们一般不用来登录，所以它们的shell一般是<code>/sbin/nologin</code>，而且大多数时候它们是没有家目录的。</p><h3 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h3><p>普通用户是权限受到限制的用户，默认只能执行<code>/bin</code>、<code>/usr/bin</code>、<code>/usr/local/bin</code>和自身家目录下的命令。它们的<code>uid</code>从500开始。尽管普通用户权限收到限制，但是它对自身家目录下的文件是有所有权限的。</p><p>超级管理员和其他类型的用户，它们的命令提示符是不一样的。<code>uid=0</code>的超级管理员，命令提示符是”<code>#</code>“，其他的为”<code>$</code>“。</p><p>默认<code>root</code>用户的家目录为<code>/root</code>，其他用户的家目录一般在<code>/home</code>下以用户名命名的目录中，如<code>ghz</code>这个用户的家目录为<code>/home/ghz</code>。当然，家目录是可以自定义位置和名称的。</p><h1 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。root<br>ghz user1</li><li>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</li><li>每个用户账号都拥有一个唯一的用户名和各自的口令。</li><li>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</li></ul><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><p>选项:</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录<br>指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号<br>指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li><p>用户名:</p><p>指定新账号的登录名。</p></li></ul><p><strong>实例</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd tom</span><br><span class="line"><span class="built_in">id</span> tom</span><br></pre></td></tr></table></figure><blockquote><p>使用id tom查看用户信息，在home下查看tom 主目录 ，使用 ls -al 查看<br>&#x2F;home&#x2F;tom</p></blockquote><h2 id="为用户设置密码"><a href="#为用户设置密码" class="headerlink" title="为用户设置密码"></a>为用户设置密码</h2><p>用户管理的一项重要内容是用户口令的管理。</p><p>用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。lock</li><li>-u 口令解锁。unlock</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p><strong>实例</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passwd <span class="comment"># 默认修改当前登录用户密码</span></span><br><span class="line">passwd tom <span class="comment"># 修改tom密码</span></span><br><span class="line">passwd -l tom <span class="comment">#禁用tom账号</span></span><br><span class="line">passwd -u tom <span class="comment">#解锁tom账号</span></span><br><span class="line">passwd -d tom <span class="comment">#tom无口令</span></span><br><span class="line">passwd -f tom <span class="comment"># 强迫tom下次登录时修改口令。</span></span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>如果一个用户的账号不再使用，可以从系统中删除。</p><p>删除用户账号就是要将<code>/etc/passwd</code>等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用<code>userdel</code>命令，其格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项是 <code>-r</code>，它的作用是把用户的主目录一起删除。</p><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># userdel -r tom</span></span><br></pre></td></tr></table></figure><p>此命令删除用户tom在系统文件中（主要是<code>/etc/passwd</code>, <code>/etc/shadow</code>,<br><code>/etc/group</code>等）的记录，同时删除用户的主目录。</p><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><p>usermod修改用户基本信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod [选项] 登录名</span><br></pre></td></tr></table></figure><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><p><code>-d</code>,–home HOME_DIR 用户的新主目录</p><p><code>-g</code>,–gid GROUP 强制GROUP为新主组</p><p><code>-G</code>,–group GROUPS 新的附加组列表GROUPS（去除原有附加组）</p><p><code>-L</code>,–lock 锁定用户账户</p><p><code>-m</code>,–move-home　　将主目录位置移至新位置（仅与-d一起使用）</p><p><code>-m</code>,–move-home 将主目录内用移至新位置（仅与-d选项一起使用）</p><p><code>-s</code>,–shell SHELL 该用户账户的新登录shell</p><p><code>-u</code>,uid UID　　用户账户的新UID</p><p><code>-U</code>,–unlock 解锁用户账户</p><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># useradd kite</span></span><br><span class="line">[root@master ~]<span class="comment"># id kite</span></span><br><span class="line">uid=1002(kite) gid=1002(kite) <span class="built_in">groups</span>=1002(kite)</span><br><span class="line">[root@master ~]<span class="comment"># usermod -u 1111 kite  # 修改kite uid</span></span><br><span class="line">[root@master ~]<span class="comment"># id kite</span></span><br><span class="line">uid=1111(kite) gid=1002(kite) <span class="built_in">groups</span>=1002(kite)</span><br><span class="line"></span><br><span class="line">[root@master home]<span class="comment"># ls</span></span><br><span class="line">ghz  kite_home  tom</span><br><span class="line">[root@master home]<span class="comment"># usermod -m -d /home/kite kite  # 修改kite主目录</span></span><br><span class="line">[root@master home]<span class="comment"># ls</span></span><br><span class="line">ghz  kite  tom</span><br></pre></td></tr></table></figure><h1 id="Linux切换用户su和sudo"><a href="#Linux切换用户su和sudo" class="headerlink" title="Linux切换用户su和sudo"></a>Linux切换用户su和sudo</h1><h2 id="su"><a href="#su" class="headerlink" title="su"></a><code>su</code></h2><p>su switch user，用于切换用户用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su [选项]... [-] [用户 [参数]... ]</span><br></pre></td></tr></table></figure><blockquote><p>从普通用户切换到<code>root</code>需要密码，<code>root</code>切换到普通用户不需要密码</p></blockquote><h2 id="su-和-su-的区别"><a href="#su-和-su-的区别" class="headerlink" title="su 和 su -的区别"></a><code>su</code> 和 <code>su -</code>的区别</h2><p>单纯使用<code>su</code>切换到<code>root</code>，读取变量的方式是<code>non-login shell</code>，这样的方式下非常多的变量都不会改变。尤其是<code>PATH</code>。所以root用的非常多的命令都仅仅能用绝对路径来运行。这样的方式仅仅是切换到root的身份。</p><p>而用<code>su -</code>这样的方式的话，是<code>login shell</code>方式，它是先以root身份登录然后再运行别的操作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master /]<span class="comment"># su tom</span></span><br><span class="line">[tom@master /]$ <span class="built_in">pwd</span></span><br><span class="line">/</span><br><span class="line">[tom@master /]$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">[tom@master /]$ <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@master /]<span class="comment"># su - tom</span></span><br><span class="line">Last login: Thu May  5 18:04:44 PDT 2022 on pts/0</span><br><span class="line">[tom@master ~]$ <span class="built_in">pwd</span></span><br><span class="line">/home/tom</span><br><span class="line">[tom@master ~]$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/tom/.local/bin:/home/tom/bin</span><br><span class="line">[tom@master ~]$</span><br></pre></td></tr></table></figure><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a><code>sudo</code></h2><p>假设有非常多人管理这个主机的话，那不是非常多人都要知道root的password吗，并且可能有的人仅仅是单纯的进行一次root操作就能够了，这个时候，su方式就不是非常好，rootpassword越少人知道越好，越少人知道就越安全，这时就须要另外一种方式了。</p><p>相比于<code>su</code>切换身份须要用户的password，常常性的是须要root<br>password，<code>sudo</code>仅仅是须要自己的password，就能够以其它用户的身份来运行命令。常常是以<code>root</code>的身份运行命令。也并不是全部人都能够用sudo：</p><p>sudo是依赖于<code>/etc/sudoers</code>这个配置文件的。例如：我们以普通用户身份运行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master /]<span class="comment"># su tom</span></span><br><span class="line">[tom@master /]$ sudo <span class="built_in">cat</span> /etc/shadow</span><br><span class="line"></span><br><span class="line">We trust you have received the usual lecture from the <span class="built_in">local</span> System</span><br><span class="line">Administrator. It usually boils down to these three things:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#1) Respect the privacy of others.</span></span><br><span class="line">    <span class="comment">#2) Think before you type.</span></span><br><span class="line">    <span class="comment">#3) With great power comes great responsibility.</span></span><br><span class="line"></span><br><span class="line">[sudo] password <span class="keyword">for</span> tom:</span><br><span class="line">tom is not <span class="keyword">in</span> the sudoers file.  This incident will be reported.</span><br></pre></td></tr></table></figure><p>sudo的运行有这样一个流程：</p><ol><li>当用户运行sudo时，系统于&#x2F;etc&#x2F;sudoers文件里查找该用户是否有运行sudo的权限；</li><li>若用户具有可运行sudo的权限。那么让用户输入用户自己的password，注意这里输入的是用户自己的password。</li><li>假设password正确。变開始进行sudo后面的命令，root运行sudo是不须要输入password的，切换到的身份与运行者身份同样的时候。也不须要输入password。</li></ol><h3 id="sudoers内容"><a href="#sudoers内容" class="headerlink" title="sudoers内容"></a>sudoers内容</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Sudoers allows particular users to run various commands as</span></span><br><span class="line"><span class="comment">## the root user, without needing the root password.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Examples are provided at the bottom of the file for collections</span></span><br><span class="line"><span class="comment">## of related commands, which can then be delegated out to particular</span></span><br><span class="line"><span class="comment">## users or groups.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## This file must be edited with the &#x27;visudo&#x27; command.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Host Aliases</span></span><br><span class="line"><span class="comment">## Groups of machines. You may prefer to use hostnames (perhaps using</span></span><br><span class="line"><span class="comment">## wildcards for entire domains) or IP addresses instead.</span></span><br><span class="line"><span class="comment"># Host_Alias     FILESERVERS = fs1, fs2</span></span><br><span class="line"><span class="comment"># Host_Alias     MAILSERVERS = smtp, smtp2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## User Aliases</span></span><br><span class="line"><span class="comment">## These aren&#x27;t often necessary, as you can use regular groups</span></span><br><span class="line"><span class="comment">## (ie, from files, LDAP, NIS, etc) in this file - just use %groupname</span></span><br><span class="line"><span class="comment">## rather than USERALIAS</span></span><br><span class="line"><span class="comment"># User_Alias ADMINS = jsmith, mikem</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Command Aliases</span></span><br><span class="line"><span class="comment">## These are groups of related commands...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Networking</span></span><br><span class="line"><span class="comment"># Cmnd_Alias NETWORKING = /sbin/route, /sbin/ifconfig, /bin/ping, /sbin/dhclient, /usr/bin/net, /sbin/iptables, /usr/bin/rfcomm, /usr/bin/wvdial, /sbin/iwconfig, /sbin/mii-tool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Installation and management of software</span></span><br><span class="line"><span class="comment"># Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Services</span></span><br><span class="line"><span class="comment"># Cmnd_Alias SERVICES = /sbin/service, /sbin/chkconfig, /usr/bin/systemctl start, /usr/bin/systemctl stop, /usr/bin/systemctl reload, /usr/bin/systemctl restart, /usr/bin/systemctl status, /usr/bin/systemctl enable, /usr/bin/systemctl disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Updating the locate database</span></span><br><span class="line"><span class="comment"># Cmnd_Alias LOCATE = /usr/bin/updatedb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Storage</span></span><br><span class="line"><span class="comment"># Cmnd_Alias STORAGE = /sbin/fdisk, /sbin/sfdisk, /sbin/parted, /sbin/partprobe, /bin/mount, /bin/umount</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Delegating permissions</span></span><br><span class="line"><span class="comment"># Cmnd_Alias DELEGATING = /usr/sbin/visudo, /bin/chown, /bin/chmod, /bin/chgrp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Processes</span></span><br><span class="line"><span class="comment"># Cmnd_Alias PROCESSES = /bin/nice, /bin/kill, /usr/bin/kill, /usr/bin/killall</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Drivers</span></span><br><span class="line"><span class="comment"># Cmnd_Alias DRIVERS = /sbin/modprobe</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Defaults specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Refuse to run if unable to disable echo on the tty.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Defaults   !visiblepw</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Preserving HOME has security implications since many programs</span></span><br><span class="line"><span class="comment"># use it when searching for configuration files. Note that HOME</span></span><br><span class="line"><span class="comment"># is already set when the the env_reset option is enabled, so</span></span><br><span class="line"><span class="comment"># this option is only effective for configurations where either</span></span><br><span class="line"><span class="comment"># env_reset is disabled or HOME is present in the env_keep list.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Defaults    always_set_home</span><br><span class="line">Defaults    match_group_by_gid</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prior to version 1.8.15, groups listed in sudoers that were not</span></span><br><span class="line"><span class="comment"># found in the system group database were passed to the group</span></span><br><span class="line"><span class="comment"># plugin, if any. Starting with 1.8.15, only groups of the form</span></span><br><span class="line"><span class="comment"># %:group are resolved via the group plugin by default.</span></span><br><span class="line"><span class="comment"># We enable always_query_group_plugin to restore old behavior.</span></span><br><span class="line"><span class="comment"># Disable this option for new behavior.</span></span><br><span class="line">Defaults    always_query_group_plugin</span><br><span class="line"></span><br><span class="line">Defaults    env_reset</span><br><span class="line">Defaults    env_keep =  <span class="string">&quot;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS&quot;</span></span><br><span class="line">Defaults    env_keep += <span class="string">&quot;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;</span></span><br><span class="line">Defaults    env_keep += <span class="string">&quot;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;</span></span><br><span class="line">Defaults    env_keep += <span class="string">&quot;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;</span></span><br><span class="line">Defaults    env_keep += <span class="string">&quot;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Adding HOME to env_keep may enable a user to run unrestricted</span></span><br><span class="line"><span class="comment"># commands via sudo.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Defaults   env_keep += &quot;HOME&quot;</span></span><br><span class="line"></span><br><span class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## Next comes the main part: which users can run what software on</span></span><br><span class="line"><span class="comment">## which machines (the sudoers file can be shared between multiple</span></span><br><span class="line"><span class="comment">## systems).</span></span><br><span class="line"><span class="comment">## Syntax:</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##      user    MACHINE=COMMANDS</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## The COMMANDS section may have other options added to it.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">## Allows members of the &#x27;sys&#x27; group to run networking, software,</span></span><br><span class="line"><span class="comment">## service management apps and more.</span></span><br><span class="line"><span class="comment"># %sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Allows people in group wheel to run all commands</span></span><br><span class="line">%wheel  ALL=(ALL)       ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">## Same thing without a password</span></span><br><span class="line"><span class="comment"># %wheel        ALL=(ALL)       NOPASSWD: ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Allows members of the users group to mount and unmount the</span></span><br><span class="line"><span class="comment">## cdrom as root</span></span><br><span class="line"><span class="comment"># %users  ALL=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Allows members of the users group to shutdown this system</span></span><br><span class="line"><span class="comment"># %users  localhost=/sbin/shutdown -h now</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Read drop-in files from /etc/sudoers.d (the # here does not mean a comment)</span></span><br><span class="line"><span class="comment">#includedir /etc/sudoers.d</span></span><br></pre></td></tr></table></figure><blockquote><p>编辑该文件必须使用 <code>visudo</code>命令</p></blockquote><p>我们使用，<code>visudo -f sudoers</code>命令，在该文件中添加如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tom    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>我们再次运行下面命令，输入密码后就可以查看了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master /]<span class="comment"># su tom</span></span><br><span class="line">[tom@master /]$ sudo <span class="built_in">cat</span> /etc/shadow</span><br></pre></td></tr></table></figure><p>sudo能够更好分工，仅仅要配置好<code>/etc/sudoers</code>，这样sudo能够保护系统更安全，并且分工明白，有条不紊。</p><h1 id="Linux组管理"><a href="#Linux组管理" class="headerlink" title="Linux组管理"></a>Linux组管理</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><ul><li>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。</li><li>不同Linux<br>系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</li><li>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对<code>/etc/group</code>文件的更新。</li></ul><h2 id="增加用户组"><a href="#增加用户组" class="headerlink" title="增加用户组"></a>增加用户组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o<br>一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><h4 id="实例1："><a href="#实例1：" class="headerlink" title="实例1："></a>实例1：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupadd group1</span></span><br></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p><h4 id="实例2："><a href="#实例2：" class="headerlink" title="实例2："></a>实例2：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupadd -g 101 group2</span></span><br></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p><h3 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupdel group1</span></span><br></pre></td></tr></table></figure><p>此命令从系统中删除组group1。</p><h3 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n 新用户组 将用户组的名字改为新名字</li></ul><h4 id="实例1：-1"><a href="#实例1：-1" class="headerlink" title="实例1："></a>实例1：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupmod -g 102 group2</span></span><br></pre></td></tr></table></figure><p>此命令将组group2的组标识号修改为102。</p><h4 id="实例2：-1"><a href="#实例2：-1" class="headerlink" title="实例2："></a>实例2：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupmod –g 10000 -n group3 group2</span></span><br></pre></td></tr></table></figure><p>此命令将组group2的标识号改为10000，组名修改为group3。</p><h3 id="切换用户组"><a href="#切换用户组" class="headerlink" title="切换用户组"></a>切换用户组</h3><p>用户可以在登录后，使用命令<code>newgrp</code>切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ newgrp root</span><br></pre></td></tr></table></figure><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p><h1 id="Linux与用户和组相关的配置文件"><a href="#Linux与用户和组相关的配置文件" class="headerlink" title="Linux与用户和组相关的配置文件"></a>Linux与用户和组相关的配置文件</h1><h2 id="与用户相关的配置文件"><a href="#与用户相关的配置文件" class="headerlink" title="与用户相关的配置文件"></a>与用户相关的配置文件</h2><h3 id="用户的配置文件-etc-passwd"><a href="#用户的配置文件-etc-passwd" class="headerlink" title="用户的配置文件/etc/passwd"></a>用户的配置文件<code>/etc/passwd</code></h3><p><code>/etc/passwd</code>文件中每行定义一个用户账号，有多少行就表示多少个账号，在一行中可以清晰的看出，各内容之间又通过”:”号划分了7个字段，这7个字段分别定义了账号的不同属性，passwd文件实际内容如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 tom]<span class="comment"># head -10 /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">[root@node01 tom]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>在passwd文件中，第一行内容就是超级用户root行，可以看到它的uid和gid都为0.为了方便理解，下面是各字段的描述：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字段1：帐号名，这是用户登陆时使用的账户名称，在系统中是唯一的，不能重名</span><br><span class="line">字段2：密码占位符x；早期的unix系统中，该字段是存放账户和密码的，由于安全原因，后来把这个密码字段内容移到/etc/shadow中了。　　　　　　这里可以看到一个字母x，表示该用户的密码是/etc/shadow文件中保护的。</span><br><span class="line">字段3：UID；范围是0-65535</span><br><span class="line">字段4：GID；范围是0-65535；当添加用户时，默认情况下会同时建立一个与用户同名且UID和GID相同的组。</span><br><span class="line">字段5：用户说明；这个字段是对这个账户的说明</span><br><span class="line">字段6：宿主目录；用户登陆后首先进入的目录，一般与<span class="string">&quot;/home/用户名&quot;</span>这样的目录</span><br><span class="line">字段7：登录Shell   当前用户登陆后所使用的shell，在centos/rhel系统中，默认的shell是bash；如果不希望用户登陆系统，可以通过usermod　　　　　　或者手动修改passwd设置，将该字段设置为/sbin/nologin 即可。大多数内置系统账户都是/sbin/nologin,这表示禁止登陆系统。　　　　　　这是出于安全考虑的。</span><br></pre></td></tr></table></figure><h2 id="passwd中有关UID的限制说明"><a href="#passwd中有关UID的限制说明" class="headerlink" title="passwd中有关UID的限制说明"></a>passwd中有关UID的限制说明</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0：当用户的UID为0时，表示这个账户为超级用户；如果要增加一个系统管理员账户的话，只需将该账户的UID改为0即可。不建议</span><br><span class="line">1~999：这个范围是保留给系统用户使用的UID</span><br><span class="line">1000~65535：普通账户UID</span><br></pre></td></tr></table></figure><p>最后，来看一下&#x2F;etc&#x2F;passwd的权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Web ~]<span class="comment"># ls -l /etc/passwd</span></span><br><span class="line">-rw-r--r--. 1 root root 1665 4月  11 14:13 /etc/passwd</span><br></pre></td></tr></table></figure><p>因为每个用户登录时都需要取得UID和GID来判断权限问题，所以&#x2F;etc&#x2F;passwd的权限为644，这样一来就会带来安全问题，即所有的用户都可以读<code>/etc/passwd</code>文件，即使文件内的密码是加密的，但还是存在一定的被攻击破解的安全隐患。因此，就有了<code>/etc/shadow</code>文件。</p><h3 id="用户的影子口令文件-etc-shadow"><a href="#用户的影子口令文件-etc-shadow" class="headerlink" title="用户的影子口令文件/etc/shadow"></a>用户的影子口令文件<code>/etc/shadow</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@Web ~]<span class="comment"># ls -l /etc/shadow</span></span><br><span class="line">----------. 1 root root 1059 4月  11 14:13 /etc/shadow</span><br></pre></td></tr></table></figure><p>其文件内容为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Web ~]<span class="comment"># head -5 /etc/shadow</span></span><br><span class="line">root:$6$jmM2rFzPCFbmqBkf<span class="variable">$oz3AUooR3qaV5uXU67HcXlYiE3hNf0sSsunk1eBTDPrGUOM1xYCyesGoj</span>.ZLTIzdiXEdrnnqNyC5g8SsRnxQm.:16338:0:99999:7:::</span><br><span class="line">bin:*:15615:0:99999:7:::</span><br><span class="line">daemon:*:15615:0:99999:7:::</span><br><span class="line">adm:*:15615:0:99999:7:::</span><br><span class="line">lp:*:15615:0:99999:7:::</span><br></pre></td></tr></table></figure><p>和<code>/etc/passwd</code>一样，shadow文件的每一行内容，也是以冒号(:)作为分隔符，共9个字段，其各个字段的意义如下表：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">字段1：帐号名称</span><br><span class="line">字段2：加密的密码</span><br><span class="line">字段3：最近更改密码的时间；从1970/1/1到上次修改密码的天数</span><br><span class="line">字段4：禁止修改密码的天数；从1970/1/1开始，多少天之内不能修改密码，默认值为0</span><br><span class="line">字段5：用户必须更改口令的天数；密码的最长有效天数，默认值为99999</span><br><span class="line">字段6：警告更改密码的期限；密码过期之前警告天数，默认值为7；在用户密码过期前多少天提醒用户更改密码</span><br><span class="line">字段7：不活动时间；密码过期之后账户宽限时间 3+5；在用户密码过期之后到禁用账户的天数</span><br><span class="line">字段8：帐号失效时间，默认值为空；从1970/1/1日起，到用户被禁用的天数</span><br><span class="line">字段9：保留字段（未使用），标志</span><br></pre></td></tr></table></figure><blockquote><ul><li>密码过期：一旦超过密码过期日期，用户成功登陆，Linux会强迫用户设置一个新密码，设置完成后才开启Shell程序</li><li>账户过期：若超过账户过期日期，Linux会禁止用户登陆系统，即使输入正确密码，也无法登陆</li></ul></blockquote><h2 id="与用户组相关的配置文件"><a href="#与用户组相关的配置文件" class="headerlink" title="与用户组相关的配置文件"></a>与用户组相关的配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/group  <span class="comment">#用户组配置文件</span></span><br><span class="line">/etc/gshadow  <span class="comment">#用户组的影子文件</span></span><br></pre></td></tr></table></figure><h3 id="用户组配置文件-x2F-etc-x2F-group"><a href="#用户组配置文件-x2F-etc-x2F-group" class="headerlink" title="用户组配置文件&#x2F;etc&#x2F;group"></a>用户组配置文件&#x2F;etc&#x2F;group</h3><p><code>/etc/group</code><br>文件是用户组的配置文件，内容包括用户与用户组，并且能显示用户归属哪个用户组，因为一个用户可以归属一个或多个不同的用户组；同一用户组的用户之间具有相似的特性。如果某个用户下有对系统管理有最重要的内容，最好让用户拥有独立的用户组，或者是把用户下的文件的权限设置为完全私有；另外root用户组一般不要轻易把普通用户加入进入。</p><p><code>/etc/group</code>文件就是记录GID与用户组的文件。<code>/etc/group</code>文件同<code>/etc/passwd</code>类似，其文件权限也是644：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Web ~]<span class="comment"># ls -l /etc/group</span></span><br><span class="line">-rw-r--r--. 1 root root 832 4月  11 14:13 /etc/group</span><br></pre></td></tr></table></figure><p><code>/etc/group</code>的文件内容为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Web ~]<span class="comment"># head -5 /etc/group</span></span><br><span class="line">root:x:0:</span><br><span class="line">bin:x:1:bin,daemon</span><br><span class="line">daemon:x:2:bin,daemon</span><br><span class="line">sys:x:3:bin,adm</span><br><span class="line">adm:x:4:adm,daemon</span><br></pre></td></tr></table></figure><p>group文件各个字段的详细说明：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字段1：组账户名称</span><br><span class="line">字段2：密码占位符x；通常不需要设置该密码，由于安全原因，该密码被记录在/etc/gshadow中，因此显示为<span class="string">&#x27;x&#x27;</span>。这类似/etc/shadow</span><br><span class="line">字段3：组账户GID号,用户组ID</span><br><span class="line">字段4：本组的成员用户列表；加入这个组的所有用户账号</span><br></pre></td></tr></table></figure><h3 id="用户组的影子文件-etc-gshadow"><a href="#用户组的影子文件-etc-gshadow" class="headerlink" title="用户组的影子文件/etc/gshadow"></a>用户组的影子文件<code>/etc/gshadow</code></h3><p>&#x2F;etc&#x2F;gshaow是&#x2F;etc&#x2F;group的加密文件，比如用户组的管理密码就是存放在这个文件。&#x2F;etc&#x2F;group和&#x2F;etc&#x2F;gshadow是互补的两个文件；比如大型服务器，针对很多用户和用户组，定制一些关系结构比较复杂的权限模型，设置用户组密码是极有必要的。比如不想让一些非用户组成员永久拥有用户组的权限和特性，这时就可以通过密码验证的方式来让某些用户临时拥有一些用户组特性，这时就要用到用户组密码；&#x2F;etc&#x2F;gshadow格式如下，每个用户组独占一行；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Web ~]<span class="comment"># ls -l /etc/gshadow</span></span><br><span class="line">----------. 1 root root 682 4月  11 14:13 /etc/gshadow</span><br><span class="line">[root@Web ~]<span class="comment"># head -5 /etc/gshadow</span></span><br><span class="line">root:::</span><br><span class="line">bin:::bin,daemon</span><br><span class="line">daemon:::bin,daemon</span><br><span class="line">sys:::bin,adm</span><br><span class="line">adm:::adm,daemon</span><br></pre></td></tr></table></figure><p>gshadow文件中各个字段详细说明：</p><pre><code>字段1：组账号的名称字段2：加密后的密码字符串，这个字段可以空的或者!；如果是空的或有！，表示没有密码字段3：本组的管理员列表；这个字段也可为空；如果有多个用户组管理员，用,号分隔字段4：本组的成员列表；加入这个组的所有用户账户；列表中多个用户通过&quot;,&quot;分隔</code></pre><h1 id="Linux权限和角色"><a href="#Linux权限和角色" class="headerlink" title="Linux权限和角色"></a>Linux权限和角色</h1><p>Linux权限是操作系统用来限制对资源访问的机制，权限一般分为读、写、执行。系统中每个文件都拥有特定的权限、所属用户及所属组，通过这样的机制来限制哪些用户或用户组可以对特定文件进行相应的操作。</p><h2 id="Linux三种权限"><a href="#Linux三种权限" class="headerlink" title="Linux三种权限"></a>Linux三种权限</h2><table><thead><tr><th align="left">权限</th><th align="left">对文件的影响</th><th align="left">对目录的影响</th></tr></thead><tbody><tr><td align="left">r（读取）</td><td align="left">可读取文件内容</td><td align="left">可列出目录内容</td></tr><tr><td align="left">w（写入）</td><td align="left">可修改文件内容</td><td align="left">可在目录中创建删除内容</td></tr><tr><td align="left">x（执行）</td><td align="left">可作为命令执行</td><td align="left">可访问目录内容</td></tr></tbody></table><blockquote><p>目录必须拥有 x 权限，否则无法查看其内容</p></blockquote><h2 id="Linux三种角色"><a href="#Linux三种角色" class="headerlink" title="Linux三种角色"></a>Linux三种角色</h2><p>Linux权限授权，默认是授权给三种角色，分别是user、group、other，Linux权限与用户之间的关联如下：</p><ul><li>U代表User</li><li>G代表Group</li><li>O代表Other</li></ul><p>每个文件的权限基于UGO进行设置，权限三位一组（rwx），同时需授权给三种角色，UGO。每个文件拥有一个所属用户和所属组，对应UGO，不属于该文件所属用户或所属组使用O来表示。</p><p>使用<code>ls -l</code>命令查看文件列表：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># ls -l</span></span><br><span class="line">total 28</span><br><span class="line">drwxr-xr-x. 2 root root     6 Apr 27 00:05 Desktop</span><br><span class="line">drwxr-xr-x. 2 root root     6 Apr 27 00:05 Documents</span><br><span class="line">drwxr-xr-x. 2 root root     6 Apr 27 00:05 Downloads</span><br><span class="line">drwxr-xr-x. 2 root root     6 Apr 27 00:05 Music</span><br><span class="line">drwxr-xr-x. 2 root root     6 Apr 27 00:05 Pictures</span><br><span class="line">drwxr-xr-x. 2 root root     6 Apr 27 00:05 Public</span><br><span class="line">drwxr-xr-x. 2 root root     6 Apr 27 00:05 Templates</span><br><span class="line">-rw-r--r--  1 root root 26908 May  5 00:07 test.txt</span><br><span class="line">drwxr-xr-x. 2 root root     6 Apr 27 00:05 Videos</span><br></pre></td></tr></table></figure><p><strong>第1字段: 文件属性字段</strong></p><p>文件属性字段总共有10个字母组成,第一个字符表示文件类型</p><p>字母<code>-</code>表示该文件是一个普通文件</p><p>字母<code>d</code>表示该文件是一个目录</p><p>字母<code>l</code>表示该文件是一个链接文件</p><p>字母<code>b</code>表示该文件是块设备文件(block)，一般置于<code>/dev</code>目录下，设备文件是普通文件和程序访问硬件设备的入口，一类特殊文件。</p><p>字母<code>c</code>表示该文件是一个字符设备文件(character)</p><p>字母<code>p</code>表示该文件为命令管道文件。与shell编程有关的文件。</p><p>字母<code>s</code>表示该文件为sock文件。与shell编程有关的文件。</p><p>第1字符的后面9个字母表示该文件或目录的权限位。其中前三个表示<strong>文件拥有者</strong>的权限，中间三个表示<strong>文件所属组</strong>拥有的权限，最后三个表示<strong>其他用户</strong>拥有的权限</p><p><code>r</code>表是读 (Read) 、<code>w</code>表示写 (Write) 、<code>x</code>表示执行 (eXecute)</p><p><strong>第2字段：文件硬链接数</strong></p><p>如果一个文件不是目录，此时这一字段表示这个文件所具有的硬链接数</p><p><strong>第3字段：文件（目录）拥有者</strong></p><p><strong>第4字段：文件（目录）拥有者所在的组</strong></p><p><strong>第5字段: 文件所占用的空间(以字节为单位)</strong></p><p><strong>第6字段：文件（目录）最近访问（修改）时间</strong></p><p><strong>第7字段：文件名</strong></p><h1 id="Linux使用chmod命令修改权限"><a href="#Linux使用chmod命令修改权限" class="headerlink" title="Linux使用chmod命令修改权限"></a>Linux使用chmod命令修改权限</h1><p>修改某个用户、组对文件夹的权限，用命令<code>chmod</code>实现，其中以代指ugo，<code>+</code>、<code>-</code>、<code>=</code>代表加入、删除和等于对应权限.</p><h2 id="命令格式-10"><a href="#命令格式-10" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-cfvR] [--<span class="built_in">help</span>] [--version] mode file   </span><br></pre></td></tr></table></figure><h2 id="命令参数-10"><a href="#命令参数-10" class="headerlink" title="命令参数"></a>命令参数</h2><p><code>-c</code> 当发生改变时，报告处理信息</p><p><code>-f</code> 错误信息不输出</p><p><code>-R</code> 处理指定目录以及其子目录下的所有文件</p><p><code>-v</code> 运行时显示详细处理信息</p><h2 id="权限范围"><a href="#权限范围" class="headerlink" title="权限范围"></a>权限范围</h2><p><code>u</code> ：目录或者文件的当前的用户</p><p><code>g</code> ：目录或者文件的当前的群组</p><p><code>o</code> ：除了目录或者文件的当前用户或群组之外的用户或者群组</p><p><code>a</code> ：所有的用户及群组</p><h2 id="权限代号"><a href="#权限代号" class="headerlink" title="权限代号"></a>权限代号</h2><p><code>r</code> ：读权限，用数字<code>4</code>表示</p><p><code>w</code> ：写权限，用数字<code>2</code>表示</p><p><code>x</code> ：执行权限，用数字<code>1</code>表示</p><p><code>-</code> ：删除权限，用数字<code>0</code>表示</p><p><code>s</code> ：特殊权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;权限范围&gt;+&lt;权限设置&gt; 使权限范围内的目录或者文件具有指定的权限</span><br><span class="line">&lt;权限范围&gt;-&lt;权限设置&gt; 删除权限范围的目录或者文件的指定权限</span><br><span class="line">&lt;权限范围&gt;=&lt;权限设置&gt; 设置权限范围内的目录或者文件的权限为指定的值</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span>  –R  u+rwx  <span class="built_in">test</span> <span class="comment"># 授予用户对test目录拥有rwx权限</span></span><br></pre></td></tr></table></figure><blockquote><p>我们将<code>rwx</code>看成二进制数，如果有则用<code>1</code>表示，没有则有<code>0</code>表示，那么<code>rwx</code>则可以表示成为：<code>111</code></p></blockquote><h2 id="权限与数值"><a href="#权限与数值" class="headerlink" title="权限与数值"></a>权限与数值</h2><p>  权限          数值</p><hr><p>  rwx rwx rwx   777<br>  rwx rw- r–   764<br>  rw- r– r–   644<br>  rw- rw- r–   664</p><h3 id="文字设定法"><a href="#文字设定法" class="headerlink" title="文字设定法"></a>文字设定法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> ［<span class="built_in">who</span>］ ［+ | – | =］ ［mode］ 文件名</span><br></pre></td></tr></table></figure><p>命令中各选项的含义为：</p><p>操作对象who可是下述字母中的任一个或者它们的组合：</p><ul><li>u 表示”用户（user）”，即文件或目录的所有者。</li><li>g 表示”同组（group）用户”，即与文件属主有相同组ID的所有用户。</li><li>o 表示”其他（others）用户”。</li><li>a 表示”所有（all）用户”。它是系统默认值。</li></ul><p>操作符号可以是：</p><ul><li>+ 添加某个权限。</li><li>– 取消某个权限。</li><li>&#x3D; 赋予给定权限并取消其他所有权限（如果有的话）。</li><li>设置mode所表示的权限可用下述字母的任意组合：</li><li>r 可读。</li><li>w 可写。</li><li>x 可执行。</li><li>X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。</li><li>s<br>在文件执行时把进程的属主或组ID置为该文件的文件属主。方式”u＋s”设置文件的用户ID位，”g＋s”设置组ID位。</li><li>t 保存程序的文本到交换设备上。</li><li>u 与文件属主拥有一样的权限。</li><li>g 与和文件属主同组的用户拥有一样的权限。</li><li>o 与其他用户拥有一样的权限。</li><li>-c : 若该档案权限确实已经更改，才显示其更改动作</li><li>-f : 若该档案权限无法被更改也不要显示错误讯息</li><li>-v : 显示权限变更的详细资料</li><li>-R :<br>对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)</li><li>–help : 显示辅助说明</li><li>–version : 显示版本</li></ul><p>文件名：以空格分开的要改变权限的文件列表，支持通配符。在一个命令行中可给出多个权限方式，其间用逗号隔开。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> g+r，o+r example <span class="comment">#使同组和其他用户对文件example 有读权限。</span></span><br></pre></td></tr></table></figure><h2 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span>  –R  u+rwx  <span class="built_in">test</span> <span class="comment"># 授予用户对test目录拥有rwx权限</span></span><br><span class="line"><span class="built_in">chmod</span>  –R  g+rwx  <span class="built_in">test</span> <span class="comment"># 授予组对test目录拥有rwx权限</span></span><br><span class="line"><span class="built_in">chmod</span>  –R  u+rwx,g+rwx,o+rwx  <span class="built_in">test</span> <span class="comment"># 授予用户、组、其他人对test目录拥有rwx权限</span></span><br><span class="line"><span class="built_in">chmod</span>  –R  u-w  <span class="built_in">test</span> <span class="comment"># 撤销用户对test目录拥有w权限</span></span><br><span class="line"><span class="built_in">chmod</span>  –R  u-x,g-x,o-x <span class="built_in">test</span> <span class="comment"># 撤销用户、组、其他人对peter.net目录拥有x权限</span></span><br><span class="line"><span class="built_in">chmod</span>  –R  u=rx,g=rx,o=rx  peter.net <span class="comment"># 授予用户、组、其他人对test目录只有rx权限</span></span><br></pre></td></tr></table></figure><h2 id="数字设定法"><a href="#数字设定法" class="headerlink" title="数字设定法"></a>数字设定法</h2><p>我们必须首先了解用数字表示的属性的含义：<code>0</code>表示没有权限，<code>1</code>表示可执行权限，<code>2</code>表示可写权限，<code>4</code>表示可读权限，然后将其相加。所以数字属性的格式应为3个从0到7的八进制数，其顺序是（u）（g）（o）。</p><p>例如，如果想让某个文件的属主有”读&#x2F;写”二种权限，需要把4（可读）+2（可写）＝6（读&#x2F;写）。</p><p>数字设定法的一般形式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> ［mode］ 文件名</span><br></pre></td></tr></table></figure><h2 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 644 test.txt</span><br></pre></td></tr></table></figure><ul><li>文件属主（u）拥有读、写权限</li><li>与文件属主同组人用户（g） 拥有读权限</li><li>其他人（o） 拥有读权限</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 750 test.txt</span><br></pre></td></tr></table></figure><ul><li>文件主本人（u）可读&#x2F;可写&#x2F;可执行权</li><li>与文件主同组人（g） 可读&#x2F;可执行权</li><li>其他人（o） 没有任何权限</li></ul><h1 id="Linux修改所属组chgrp"><a href="#Linux修改所属组chgrp" class="headerlink" title="Linux修改所属组chgrp"></a>Linux修改所属组chgrp</h1><p>在lunix系统里，文件或目录的权限的掌控以拥有者及所诉群组来管理。</p><p>可以使用<code>chgrp</code>指令取变更文件与目录所属群组，这种方式采用群组名称或群组识别码都可以。</p><p><code>chgrp</code>命令就是change<br>group的缩写！要被改变的组名必须要在<code>/etc/group</code>文件内存在才行。</p><h2 id="命令格式-11"><a href="#命令格式-11" class="headerlink" title="命令格式"></a>命令格式</h2><pre><code>chgrp [选项] [组] [文件]</code></pre><h2 id="命令参数-11"><a href="#命令参数-11" class="headerlink" title="命令参数"></a>命令参数</h2><p><code>-c</code> 当发生改变时输出调试信息</p><p><code>-f</code> 不显示错误信息</p><p><code>-R</code> 处理指定目录以及其子目录下的所有文件</p><p><code>-v</code> 运行时显示详细的处理信息</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">groupadd testgrp</span><br><span class="line"><span class="built_in">chgrp</span> <span class="built_in">test</span> testgrp <span class="comment"># 修改test属于testgrp组</span></span><br><span class="line">[root@master ~]<span class="comment"># ll test </span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root testgrp 0 May  5 23:46 t1.txt</span><br><span class="line"><span class="built_in">chgrp</span> root t1.txt <span class="comment"># 修改t1.txt属于root组</span></span><br></pre></td></tr></table></figure><h1 id="Linux修改文件或者目录的拥有者chown"><a href="#Linux修改文件或者目录的拥有者chown" class="headerlink" title="Linux修改文件或者目录的拥有者chown"></a>Linux修改文件或者目录的拥有者chown</h1><p><code>chown</code>将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。</p><p>系统管理员经常使用<code>chown</code>命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。</p><h2 id="命令格式-12"><a href="#命令格式-12" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> [选项]... [所有者][:[组]] 文件...</span><br></pre></td></tr></table></figure><h2 id="命令参数-12"><a href="#命令参数-12" class="headerlink" title="命令参数"></a>命令参数</h2><p><code>-c</code> 显示更改的部分的信息</p><p><code>-f</code> 忽略错误信息</p><p><code>-h</code> 修复符号链接</p><p><code>-R</code> 处理指定目录以及其子目录下的所有文件</p><p><code>-v</code> 显示详细的处理信息</p><h2 id="实例演示-1"><a href="#实例演示-1" class="headerlink" title="实例演示"></a>实例演示</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> mail:mail test.log <span class="comment"># 改变拥有者和群组</span></span><br><span class="line">[root@master ~]<span class="comment"># ll</span></span><br><span class="line">drwxr-xr-x  2 mail mail        6 May  6 00:02 test.log</span><br><span class="line"><span class="built_in">chown</span> tom: t1.txt        <span class="comment"># 改变拥有者和群组</span></span><br><span class="line">[root@master <span class="built_in">test</span>]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 tom tom 0 May  5 23:46 t1.txt</span><br><span class="line"><span class="built_in">chown</span> :root t1.txt       <span class="comment">#  只改变群组</span></span><br><span class="line">[root@master <span class="built_in">test</span>]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 tom root 0 May  5 23:46 t1.txt</span><br><span class="line"><span class="built_in">chown</span> -R root:root <span class="built_in">test</span>  <span class="comment"># 改变指定目录以及其子目录下的所有文件的拥有者和群组 </span></span><br></pre></td></tr></table></figure><h1 id="Linux磁盘分区简介"><a href="#Linux磁盘分区简介" class="headerlink" title="Linux磁盘分区简介"></a>Linux磁盘分区简介</h1><p>Linux<br>系统中所有的硬件设备都是通过文件的方式来表现和使用的，我们将这些文件称为<strong>设备文件</strong>，硬盘对应的设备文件一般被称为块<strong>设备文件</strong>。</p><h2 id="磁盘分类"><a href="#磁盘分类" class="headerlink" title="磁盘分类"></a>磁盘分类</h2><p>比较常见的磁盘类型有消费类市场中的 SATA 硬盘和服务器中使用的 SCSI<br>硬盘、SAS 硬盘，当然还有当下大热的各种固态硬盘。</p><p><strong>SATA 硬盘</strong></p><p>SATA(Serial ATA)口的硬盘又叫串口硬盘，Serial ATA 采用串行连接方式，串行<br>ATA<br>总线使用嵌入式时钟信号，具备了更强的纠错能力，与以往相比其最大的区别在于能对传输指令(不仅仅是数据)进行检查，如果发现错误会自动矫正，这在很大程度上提高了数据传输的可靠性。串行接口还具有结构简单、支持热插拔的优点。SATA<br>硬盘主要用于消费类市场和一些低端服务器.</p><p><strong>SCSI 硬盘</strong></p><p>SCSI 硬盘即采用 SCSI<br>接口的硬盘。它由于性能好、稳定性高，因此在服务器上得到广泛应用。同时其价格也不菲，正因它的价格昂贵，所以在普通PC上很少见到它的踪迹。SCSI<br>硬盘使用 50 针接口，外观和普通硬盘接口有些相似.</p><p><strong>SAS 硬盘</strong></p><p>SAS 是 Serial Attached SCSI 的缩写，即串行连接的<br>SCSI，其目标是定义一个新的串行点对点的企业级存储设备接口。串行接口减少了线缆的尺寸，允许更快的传输速度。SAS<br>硬盘与相同转速的 SCSI 硬盘相比有相同或者更好的性能。SAS<br>硬盘一般用于比较高端的服务器。</p><p><strong>固态硬盘</strong></p><p>固态硬盘(Solid State Disk)，一般称之为 SSD<br>硬盘，固态硬盘是用固态电子存储芯片阵列而制成的硬盘，由控制单元和存储单元(FLASH芯片、DRAM芯片)组成。其主要特点是没有传统硬盘的机械结构，读写速度非常快</p><h2 id="磁盘设备在-Linux-下的表示方法"><a href="#磁盘设备在-Linux-下的表示方法" class="headerlink" title="磁盘设备在 Linux 下的表示方法"></a>磁盘设备在 Linux 下的表示方法</h2><p>在 Linux 系统中磁盘设备文件的命名规则为： <strong>主设备号 + 次设备号 +<br>磁盘分区号</strong> 对于目前常见的磁盘，一般表示为： <strong>sd[a-z]x</strong><br>主设备号代表设备的类型，相同的主设备号表示同类型的设备。当前常见磁盘的主设备号为<br>sd。 次设备号代表同类设备中的序号，用 <code>a-z</code>“表示。比如 <code>/dev/sda</code><br>表示第一块磁盘，<code>/dev/sdb</code> 表示第二块磁盘。 <code>x</code><br>表示磁盘分区编号。在每块磁盘上可能会划分多个分区，针对每个分区，Linux 用<br><code>/dev/sdbx</code> 表示，这里的 x 表示第二块磁盘的第 x 个分区。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master home]<span class="comment"># ls /dev/sd*</span></span><br><span class="line">/dev/sda  /dev/sda1  /dev/sda2  /dev/sda3</span><br></pre></td></tr></table></figure><p>该系统中一共有1块磁盘 <code>/dev/sda</code>。 <code>/dev/sda</code> 上创建了三个分区，分别是<br><code>/dev/sda1</code>，<code>/dev/sda2</code>，<code>/dev/sda3</code></p><h2 id="磁盘分区的目的"><a href="#磁盘分区的目的" class="headerlink" title="磁盘分区的目的"></a>磁盘分区的目的</h2><p>创建磁盘分区大概有下面几个目的：</p><ul><li>提升数据的安全性(一个分区的数据损坏不会影响其他分区的数据)</li><li>支持安装多个操作系统</li><li>多个小分区对比一个大分区会有性能提升</li><li>更好的组织数据</li></ul><h1 id="Linux增加磁盘分区"><a href="#Linux增加磁盘分区" class="headerlink" title="Linux增加磁盘分区"></a>Linux增加磁盘分区</h1><ol><li>虚拟机添加硬盘</li><li>分区</li><li>格式化</li><li>挂载</li><li>卸载</li></ol><h2 id="1-虚拟机添加硬盘"><a href="#1-虚拟机添加硬盘" class="headerlink" title="1.虚拟机添加硬盘"></a>1.虚拟机添加硬盘</h2><p>设置-&gt;硬盘-&gt;添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reboot <span class="comment"># 重启</span></span><br><span class="line">lsblk  <span class="comment"># 查看</span></span><br></pre></td></tr></table></figure><h2 id="2-分区"><a href="#2-分区" class="headerlink" title="2.分区"></a>2.分区</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># fdisk /dev/sdb</span></span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">使用磁盘标识符 0x5208dae7 创建新的 DOS 磁盘标签。</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：m</span><br><span class="line">命令操作</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit bsd disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line">   d   delete a partition</span><br><span class="line">   g   create a new empty GPT partition table</span><br><span class="line">   G   create an IRIX (SGI) partition table</span><br><span class="line">   l   list known partition types</span><br><span class="line">   m   <span class="built_in">print</span> this menu</span><br><span class="line">   n   add a new partition</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   p   <span class="built_in">print</span> the partition table</span><br><span class="line">   q   quit without saving changes</span><br><span class="line">   s   create a new empty Sun disklabel</span><br><span class="line">   t   change a partition<span class="string">&#x27;s system id</span></span><br><span class="line"><span class="string">   u   change display/entry units</span></span><br><span class="line"><span class="string">   v   verify the partition table</span></span><br><span class="line"><span class="string">   w   write table to disk and exit</span></span><br><span class="line"><span class="string">   x   extra functionality (experts only)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">命令(输入 m 获取帮助)：n</span></span><br><span class="line"><span class="string">Partition type:</span></span><br><span class="line"><span class="string">   p   primary (0 primary, 0 extended, 4 free)</span></span><br><span class="line"><span class="string">   e   extended</span></span><br><span class="line"><span class="string">Select (default p): p</span></span><br><span class="line"><span class="string">分区号 (1-4，默认 1)：</span></span><br><span class="line"><span class="string">起始 扇区 (2048-2097151，默认为 2048)：</span></span><br><span class="line"><span class="string">将使用默认值 2048</span></span><br><span class="line"><span class="string">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-2097151，默认为 2097151)：</span></span><br><span class="line"><span class="string">将使用默认值 2097151</span></span><br><span class="line"><span class="string">分区 1 已设置为 Linux 类型，大小设为 1023 MiB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">命令(输入 m 获取帮助)：w</span></span><br><span class="line"><span class="string">The partition table has been altered!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Calling ioctl() to re-read partition table.</span></span><br><span class="line"><span class="string">正在同步磁盘。</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：要保存分区输入<code>w</code>，要取消分区输入<code>q</code>。</p></blockquote><p>再次查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br><span class="line">[root@node01 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   20G  0 disk</span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   19G  0 part</span><br><span class="line">  ├─centos-root 253:0    0   17G  0 lvm  /</span><br><span class="line">  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]</span><br><span class="line">sdb               8:16   0    1G  0 disk</span><br><span class="line">└─sdb1            8:17   0 1023M  0 part</span><br><span class="line">sr0              11:0    1  4.3G  0 rom</span><br><span class="line">[root@node01 ~]<span class="comment"># lsblk -f</span></span><br><span class="line">NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT</span><br><span class="line">sda</span><br><span class="line">├─sda1          xfs                         368a2385-1f58-4a36-94e9-c6f3d166ac97   /boot</span><br><span class="line">└─sda2          LVM2_member                 m1Nd6N-1zfm-nn39-cSJQ-XGCn-hPam-wXqiiM</span><br><span class="line">  ├─centos-root xfs                         ef9e90fc-54b2-47c4-aeca-faff43da8e8e   /</span><br><span class="line">  └─centos-swap swap                        aaffbfb8-9bfb-4219-811c-b1193e828f5c   [SWAP]</span><br><span class="line">sdb</span><br><span class="line">└─sdb1</span><br><span class="line">sr0             iso9660     CentOS 7 x86_64 2018-11-25-23-54-16-00</span><br></pre></td></tr></table></figure><p>这里没有，UUID表示没有格式化</p><h2 id="3-格式化"><a href="#3-格式化" class="headerlink" title="3.格式化"></a>3.格式化</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs -t ext4 /dev/sdb1</span><br></pre></td></tr></table></figure><p>再次查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 dev]<span class="comment"># lsblk -f</span></span><br><span class="line">NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT</span><br><span class="line">sda</span><br><span class="line">├─sda1          xfs                         368a2385-1f58-4a36-94e9-c6f3d166ac97   /boot</span><br><span class="line">└─sda2          LVM2_member                 m1Nd6N-1zfm-nn39-cSJQ-XGCn-hPam-wXqiiM</span><br><span class="line">  ├─centos-root xfs                         ef9e90fc-54b2-47c4-aeca-faff43da8e8e   /</span><br><span class="line">  └─centos-swap swap                        aaffbfb8-9bfb-4219-811c-b1193e828f5c   [SWAP]</span><br><span class="line">sdb</span><br><span class="line">└─sdb1          ext4                        326e330f-f30a-4a2b-826a-2ffe9079b5f0</span><br><span class="line">sr0             iso9660     CentOS 7 x86_64 2018-11-25-23-54-16-00</span><br></pre></td></tr></table></figure><p>现在，有了UUID</p><h2 id="4-挂载"><a href="#4-挂载" class="headerlink" title="4.挂载"></a>4.挂载</h2><p>将一个分区和一个目录关联起来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdb1 /mnt/mydisk</span><br></pre></td></tr></table></figure><p>再次，查看发现多了挂载点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 mnt]<span class="comment"># lsblk -f</span></span><br><span class="line">NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT</span><br><span class="line">sda</span><br><span class="line">├─sda1          xfs                         368a2385-1f58-4a36-94e9-c6f3d166ac97   /boot</span><br><span class="line">└─sda2          LVM2_member                 m1Nd6N-1zfm-nn39-cSJQ-XGCn-hPam-wXqiiM</span><br><span class="line">  ├─centos-root xfs                         ef9e90fc-54b2-47c4-aeca-faff43da8e8e   /</span><br><span class="line">  └─centos-swap swap                        aaffbfb8-9bfb-4219-811c-b1193e828f5c   [SWAP]</span><br><span class="line">sdb</span><br><span class="line">└─sdb1          ext4                        326e330f-f30a-4a2b-826a-2ffe9079b5f0   /mnt/my_disk</span><br><span class="line">sr0             iso9660     CentOS 7 x86_64 2018-11-25-23-54-16-00</span><br></pre></td></tr></table></figure><blockquote><p>注意：命令行挂载重启后失效，要想重启也生效要修改fstab配置文件。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fstab</span><br></pre></td></tr></table></figure><p>增加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sdb1   /mnt/my_disk    ext4    defaults    0 0 </span><br></pre></td></tr></table></figure><h2 id="5-卸载"><a href="#5-卸载" class="headerlink" title="5.卸载"></a>5.卸载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sdb1</span><br></pre></td></tr></table></figure><p>永久卸载修改<code>fstab</code>文件</p><h1 id="Linux磁盘状况查询"><a href="#Linux磁盘状况查询" class="headerlink" title="Linux磁盘状况查询"></a>Linux磁盘状况查询</h1><ol><li><code>df</code>命令</li><li><code>du</code>命令</li></ol><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p><code>df</code><br>以磁盘分区为单位查看文件系统，可以获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><pre><code>df -h</code></pre><p>默认查询当前目录，也可以带一个目录参数，例如：</p><pre><code>df -h /root</code></pre><p>其他参数</p><pre><code>[root@node01 opt]# du --max-depth=1 -ach /opt/0       /opt/rh54M     /opt/VMwareTools-10.3.22-15902021.tar.gz161M    /opt/vmware-tools-distrib134M    /opt/jd.apk348M    /opt/348M    总用量</code></pre><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p><strong>du</strong> 的英文原义为 <strong>disk<br>usage</strong>，含义为显示磁盘空间的使用情况，用于查看当前目录的总大小。</p><p>例如查看当前目录的大小：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># du -sh</span></span><br><span class="line">605M    .</span><br></pre></td></tr></table></figure><p>显示指定文件所占空间：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># du test.txt </span></span><br><span class="line">300     test.txt</span><br></pre></td></tr></table></figure><p>方便阅读的格式显示test目录所占空间情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -h /home/</span><br><span class="line">0       /home/ghz/.mozilla/extensions</span><br><span class="line">0       /home/ghz/.mozilla/plugins</span><br><span class="line">0       /home/ghz/.mozilla</span><br><span class="line">12K     /home/ghz</span><br><span class="line">0       /home/tom/.mozilla/extensions</span><br><span class="line">0       /home/tom/.mozilla/plugins</span><br><span class="line">0       /home/tom/.mozilla</span><br><span class="line">4.0K    /home/tom/.cache/abrt</span><br><span class="line">4.0K    /home/tom/.cache</span><br><span class="line">0       /home/tom/.config/abrt</span><br><span class="line">0       /home/tom/.config</span><br><span class="line">20K     /home/tom</span><br><span class="line">0       /home/kite/.mozilla/extensions</span><br><span class="line">0       /home/kite/.mozilla/plugins</span><br><span class="line">0       /home/kite/.mozilla</span><br><span class="line">4.0K    /home/kite/.cache/abrt</span><br><span class="line">4.0K    /home/kite/.cache</span><br><span class="line">0       /home/kite/.config/abrt</span><br><span class="line">0       /home/kite/.config</span><br><span class="line">24K     /home/kite</span><br><span class="line">0       /home/zs/.mozilla/extensions</span><br><span class="line">0       /home/zs/.mozilla/plugins</span><br><span class="line">0       /home/zs/.mozilla</span><br><span class="line">4.0K    /home/zs/.cache/abrt</span><br><span class="line">4.0K    /home/zs/.cache</span><br><span class="line">0       /home/zs/.config/abrt</span><br><span class="line">0       /home/zs/.config</span><br><span class="line">28K     /home/zs</span><br><span class="line">0       /home/ls/.mozilla/extensions</span><br><span class="line">0       /home/ls/.mozilla/plugins</span><br><span class="line">0       /home/ls/.mozilla</span><br><span class="line">4.0K    /home/ls/.cache/abrt</span><br><span class="line">4.0K    /home/ls/.cache</span><br><span class="line">0       /home/ls/.config/abrt</span><br><span class="line">0       /home/ls/.config</span><br><span class="line">24K     /home/ls</span><br><span class="line">108K    /home/</span><br></pre></td></tr></table></figure><p><code>du</code> 命令相关参数：</p><ul><li><strong>-s</strong>：对每个Names参数只给出占用的数据块总数。</li><li><strong>-a</strong>：递归地显示指定目录中各文件及子目录中各文件占用的数据块数。若既不指定-s，也不指定-a，则只显示Names中的每一个目录及其中的各子目录所占的磁盘块数。</li><li><strong>-b</strong>：以字节为单位列出磁盘空间使用情况（系统默认以k字节为单位）。</li><li><strong>-k</strong>：以1024字节为单位列出磁盘空间使用情况。</li><li><strong>-c</strong>：最后再加上一个总计（系统默认设置）。</li><li><strong>-l</strong>：计算所有的文件大小，对硬链接文件，则计算多次。</li><li><strong>-x</strong>：跳过在不同文件系统上的目录不予统计。</li><li><strong>-h</strong>：以K，M，G为单位，提高信息的可读性。</li></ul><h1 id="Linux磁盘命令实例"><a href="#Linux磁盘命令实例" class="headerlink" title="Linux磁盘命令实例"></a>Linux磁盘命令实例</h1><h2 id="1-统计某文件夹下面的文件个数"><a href="#1-统计某文件夹下面的文件个数" class="headerlink" title="1. 统计某文件夹下面的文件个数"></a>1. 统计某文件夹下面的文件个数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l | grep <span class="string">&quot;^-&quot;</span> | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>ls -l 查看目录下文件信息。</li><li>grep ^- 过滤列表输出信息，只保留一般文件，如果要保留目录则为 ^d。</li><li>wc -l 统计输出信息的行数。</li></ul><h2 id="2-统计某文件夹下面的目录个数"><a href="#2-统计某文件夹下面的目录个数" class="headerlink" title="2.统计某文件夹下面的目录个数"></a>2.统计某文件夹下面的目录个数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l | grep <span class="string">&quot;^d&quot;</span> | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><h2 id="3-统计某文件夹下面的文件个数，包含子目录中的"><a href="#3-统计某文件夹下面的文件个数，包含子目录中的" class="headerlink" title="3.统计某文件夹下面的文件个数，包含子目录中的"></a>3.统计某文件夹下面的文件个数，包含子目录中的</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lR | grep <span class="string">&quot;^-&quot;</span> | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><h2 id="4-统计某文件夹下面的目录的个数，包含子目录"><a href="#4-统计某文件夹下面的目录的个数，包含子目录" class="headerlink" title="4.统计某文件夹下面的目录的个数，包含子目录"></a>4.统计某文件夹下面的目录的个数，包含子目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lR | grep <span class="string">&quot;^d&quot;</span> | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><h2 id="5-tree-命令"><a href="#5-tree-命令" class="headerlink" title="5.tree 命令"></a>5.tree 命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install tree</span><br><span class="line">tree /</span><br></pre></td></tr></table></figure><h1 id="Linux压缩和解压缩zip和unzip"><a href="#Linux压缩和解压缩zip和unzip" class="headerlink" title="Linux压缩和解压缩zip和unzip"></a>Linux压缩和解压缩zip和unzip</h1><p>这种压缩文件一般是在windows环境下面，压缩好了，上传到linux下面进行解压缩。</p><h2 id="zip命令"><a href="#zip命令" class="headerlink" title="zip命令"></a><code>zip</code>命令</h2><p>将文件或目录压缩为<code>.zip</code>格式，命令所在路径：<code>/usr/bin/zip</code>，执行权限，所有用户。</p><h3 id="命令格式-13"><a href="#命令格式-13" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip 选项[-r][压缩后文件名][文件或目录]</span><br></pre></td></tr></table></figure><blockquote><p>-r 压缩目录</p></blockquote><h3 id="实例演示-2"><a href="#实例演示-2" class="headerlink" title="实例演示"></a>实例演示</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r test.zip <span class="built_in">test</span> <span class="comment"># 将test目录压缩为test.zip文件</span></span><br></pre></td></tr></table></figure><h2 id="unzip命令"><a href="#unzip命令" class="headerlink" title="unzip命令"></a>unzip命令</h2><p>将格式为.zip的压缩文件解压，命令所在路径：<code>/usr/bin/unzip</code>，执行权限：所有用户。</p><h3 id="命令格式-14"><a href="#命令格式-14" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uzip[.zip的压缩文件名]</span><br></pre></td></tr></table></figure><h3 id="实例演示-3"><a href="#实例演示-3" class="headerlink" title="实例演示"></a>实例演示</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip test.zip <span class="comment"># 解压缩，如果test文件夹存在提示</span></span><br></pre></td></tr></table></figure><p>演示在windows下面压缩一个zip文件，上传到linux，进行解压缩。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux简介&quot;&gt;&lt;a href=&quot;#Linux简介&quot; class=&quot;headerlink&quot; title=&quot;Linux简介&quot;&gt;&lt;/a&gt;Linux简介&lt;/h1&gt;&lt;h2 id=&quot;Linux是什么&quot;&gt;&lt;a href=&quot;#Linux是什么&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://ryanchou612.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记｜Gorm框架</title>
    <link href="https://ryanchou612.github.io/posts/f95eb837.html"/>
    <id>https://ryanchou612.github.io/posts/f95eb837.html</id>
    <published>2023-05-27T08:24:31.000Z</published>
    <updated>2023-07-15T03:50:34.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gorm概述"><a href="#Gorm概述" class="headerlink" title="Gorm概述"></a>Gorm概述</h1><h2 id="ORM简介"><a href="#ORM简介" class="headerlink" title="ORM简介"></a>ORM简介</h2><p>对象关系映射（Object Relational<br>Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库（如mysql数据库）存在的互不匹配的现象的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>go get -u gorm.io/gormgo get -u gorm.io/driver/mysql</code></pre><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">    <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型 model</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model  <span class="comment">//继承</span></span><br><span class="line">    Code  <span class="type">string</span></span><br><span class="line">    Price <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建表 （迁移 schema）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line">    db.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line">    p := Product&#123;</span><br><span class="line">        Code:  <span class="string">&quot;1001&quot;</span>,</span><br><span class="line">        Price: <span class="number">100</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    db.Create(&amp;p)</span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    db.Create(&amp;Product&#123;Code: <span class="string">&quot;D42&quot;</span>, Price: <span class="number">100</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Product</span><br><span class="line">    db.First(&amp;p, <span class="number">1</span>) <span class="comment">//根据整形主键查询</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;p: %v\n&quot;</span>, p)</span><br><span class="line">    db.First(&amp;p, <span class="string">&quot;code = ?&quot;</span>, <span class="string">&quot;1001&quot;</span>) <span class="comment">//查找code字段值为1001的记录</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;p: %v\n&quot;</span>, p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Product</span><br><span class="line">    db.First(&amp;p, <span class="number">1</span>)</span><br><span class="line">    db.Model(&amp;p).Update(<span class="string">&quot;Price&quot;</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//db.Model(&amp;p).Update(Product&#123;Price: 1001, Code: &quot;1001&quot;&#125;) //仅更新非零值字段</span></span><br><span class="line">    <span class="comment">//db.Model(&amp;p).Update(map[string]interface&#123;&#125;&#123;&quot;Price&quot;: 1003, &quot;Code&quot;: &quot;1003&quot;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delete</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Product</span><br><span class="line">    db.First(&amp;p, <span class="number">1</span>)</span><br><span class="line">    db.Delete(&amp;p, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dsn := <span class="string">&quot;root:mima1234@tcp(127.0.0.1:3306)/golang_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">    db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//create(db)</span></span><br><span class="line">    <span class="comment">//insert(db)</span></span><br><span class="line">    <span class="comment">//find(db)</span></span><br><span class="line">    <span class="comment">//update(db)</span></span><br><span class="line">    <span class="comment">//delete(db)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gorm声明模型"><a href="#gorm声明模型" class="headerlink" title="gorm声明模型"></a>gorm声明模型</h1><h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h2><p>模型是标准的 struct，由 Go 的基本数据类型、实现了 Scanner 和 Valuer<br>接口的自定义类型及其指针或别名组成</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID           <span class="type">uint</span></span><br><span class="line"> Name         <span class="type">string</span></span><br><span class="line"> Email        *<span class="type">string</span></span><br><span class="line"> Age          <span class="type">uint8</span></span><br><span class="line"> Birthday     *time.Time</span><br><span class="line"> MemberNumber sql.NullString</span><br><span class="line"> ActivatedAt  sql.NullTime</span><br><span class="line"> CreatedAt    time.Time</span><br><span class="line"> UpdatedAt    time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p>GORM 倾向于约定，而不是配置。默认情况下，GORM 使用 <code>ID</code><br>作为主键，使用结构体名的 <code>蛇形复数</code> 作为表名，字段名的 <code>蛇形</code><br>作为列名，并使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 字段追踪创建、更新时间</p><p>遵循 GORM<br>已有的约定，可以减少您的配置和代码量。如果约定不符合您的需求，GORM<br>允许您自定义配置它们</p><h2 id="gorm-Model"><a href="#gorm-Model" class="headerlink" title="gorm.Model"></a>gorm.Model</h2><p>GORM 定义一个 <code>gorm.Model</code> 结构体，其包括字段<br><code>ID</code>、<code>CreatedAt</code>、<code>UpdatedAt</code>、<code>DeletedAt</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gorm.Model 的定义</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID        <span class="type">uint</span>           <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line"> CreatedAt time.Time</span><br><span class="line"> UpdatedAt time.Time</span><br><span class="line"> DeletedAt gorm.DeletedAt <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以将它嵌入到您的结构体中，以包含这几个字段，详情请参考 嵌入结构体</p><h2 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a>高级选项</h2><h3 id="字段级权限控制"><a href="#字段级权限控制" class="headerlink" title="字段级权限控制"></a>字段级权限控制</h3><p>可导出的字段在使用 GORM 进行 CRUD 时拥有全部的权限，此外，GORM<br>允许您用标签控制字段级别的权限。这样您就可以让一个字段的权限是只读、只写、只创建、只更新或者被忽略</p><blockquote><p><strong>注意：</strong> 使用 GORM Migrator 创建表时，不会创建被忽略的字段</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> Name <span class="type">string</span> <span class="string">`gorm:&quot;&lt;-:create&quot;`</span> <span class="comment">// 允许读和创建</span></span><br><span class="line"> Name <span class="type">string</span> <span class="string">`gorm:&quot;&lt;-:update&quot;`</span> <span class="comment">// 允许读和更新</span></span><br><span class="line"> Name <span class="type">string</span> <span class="string">`gorm:&quot;&lt;-&quot;`</span>        <span class="comment">// 允许读和写（创建和更新）</span></span><br><span class="line"> Name <span class="type">string</span> <span class="string">`gorm:&quot;&lt;-:false&quot;`</span>  <span class="comment">// 允许读，禁止写</span></span><br><span class="line"> Name <span class="type">string</span> <span class="string">`gorm:&quot;-&gt;&quot;`</span>        <span class="comment">// 只读（除非有自定义配置，否则禁止写）</span></span><br><span class="line"> Name <span class="type">string</span> <span class="string">`gorm:&quot;-&gt;;&lt;-:create&quot;`</span> <span class="comment">// 允许读和写</span></span><br><span class="line"> Name <span class="type">string</span> <span class="string">`gorm:&quot;-&gt;:false;&lt;-:create&quot;`</span> <span class="comment">// 仅创建（禁止从 db 读）</span></span><br><span class="line"> Name <span class="type">string</span> <span class="string">`gorm:&quot;-&quot;`</span>  <span class="comment">// 通过 struct 读写会忽略该字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-x2F-更新时间追踪（纳秒、毫秒、秒、Time）"><a href="#创建-x2F-更新时间追踪（纳秒、毫秒、秒、Time）" class="headerlink" title="创建&#x2F;更新时间追踪（纳秒、毫秒、秒、Time）"></a>创建&#x2F;更新时间追踪（纳秒、毫秒、秒、Time）</h3><p>GORM 约定使用 <code>CreatedAt</code>、<code>UpdatedAt</code><br>追踪创建&#x2F;更新时间。如果您定义了这种字段，GORM 在创建、更新时会自动填充<br>当前时间</p><p>要使用不同名称的字段，您可以配置 <code>autoCreateTime</code>、<code>autoUpdateTime</code> 标签</p><p>如果您想要保存 UNIX（毫&#x2F;纳）秒时间戳，而不是 time，您只需简单地将<br><code>time.Time</code> 修改为 <code>int</code> 即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> CreatedAt time.Time <span class="comment">// Set to current time if it is zero on creating</span></span><br><span class="line"> UpdatedAt <span class="type">int</span>       <span class="comment">// Set to current unix seconds on updating or if it is zero on creating</span></span><br><span class="line"> Updated   <span class="type">int64</span> <span class="string">`gorm:&quot;autoUpdateTime:nano&quot;`</span> <span class="comment">// Use unix nano seconds as updating time</span></span><br><span class="line"> Updated   <span class="type">int64</span> <span class="string">`gorm:&quot;autoUpdateTime:milli&quot;`</span><span class="comment">// Use unix milli seconds as updating time</span></span><br><span class="line"> Created   <span class="type">int64</span> <span class="string">`gorm:&quot;autoCreateTime&quot;`</span>      <span class="comment">// Use unix seconds as creating time</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌入结构体"><a href="#嵌入结构体" class="headerlink" title="嵌入结构体"></a>嵌入结构体</h3><p>对于匿名字段，GORM 会将其字段包含在父结构体中，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> gorm.Model</span><br><span class="line"> Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID        <span class="type">uint</span>           <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line"> CreatedAt time.Time</span><br><span class="line"> UpdatedAt time.Time</span><br><span class="line"> DeletedAt gorm.DeletedAt <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line"> Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于正常的结构体字段，你也可以通过标签 <code>embedded</code> 将其嵌入，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">   Name  <span class="type">string</span></span><br><span class="line">   Email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID      <span class="type">int</span></span><br><span class="line"> Author  Author <span class="string">`gorm:&quot;embedded&quot;`</span></span><br><span class="line"> Upvotes <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID    <span class="type">int64</span></span><br><span class="line"> Name  <span class="type">string</span></span><br><span class="line"> Email <span class="type">string</span></span><br><span class="line"> Upvotes  <span class="type">int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且，您可以使用标签 <code>embeddedPrefix</code> 来为 db 中的字段名添加前缀，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID      <span class="type">int</span></span><br><span class="line"> Author  Author <span class="string">`gorm:&quot;embedded;embeddedPrefix:author_&quot;`</span></span><br><span class="line"> Upvotes <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID          <span class="type">int64</span></span><br><span class="line">   AuthorName  <span class="type">string</span></span><br><span class="line">   AuthorEmail <span class="type">string</span></span><br><span class="line"> Upvotes     <span class="type">int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段标签"><a href="#字段标签" class="headerlink" title="字段标签"></a>字段标签</h3><p>声明 model 时，tag 是可选的，GORM 支持以下 tag：tag 名大小写不敏感，但建议使用 <code>camelCase</code> 风格</p><table><thead><tr><th align="left">标签名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">column</td><td align="left">指定 db 列名</td></tr><tr><td align="left">type</td><td align="left">列数据类型，推荐使用兼容性好的通用类型，例如：所有数据库都支持 bool、int、uint、float、string、time、bytes 并且可以和其他标签一起使用，例如：<code>not null</code>、<code>size</code>, <code>autoIncrement</code>… 像 <code>varbinary(8)</code> 这样指定数据库数据类型也是支持的。在使用指定数据库数据类型时，它需要是完整的数据库数据类型，如：<code>MEDIUMINT UNSIGNED not NULL AUTO_INCREMENT</code></td></tr><tr><td align="left">size</td><td align="left">指定列大小，例如：<code>size:256</code></td></tr><tr><td align="left">primaryKey</td><td align="left">指定列为主键</td></tr><tr><td align="left">unique</td><td align="left">指定列为唯一</td></tr><tr><td align="left">default</td><td align="left">指定列的默认值</td></tr><tr><td align="left">precision</td><td align="left">指定列的精度</td></tr><tr><td align="left">scale</td><td align="left">指定列大小</td></tr><tr><td align="left">not null</td><td align="left">指定列为 NOT NULL</td></tr><tr><td align="left">autoIncrement</td><td align="left">指定列为自动增长</td></tr><tr><td align="left">autoIncrementIncrement</td><td align="left">自动步长，控制连续记录之间的间隔</td></tr><tr><td align="left">embedded</td><td align="left">嵌套字段</td></tr><tr><td align="left">embeddedPrefix</td><td align="left">嵌入字段的列名前缀</td></tr><tr><td align="left">autoCreateTime</td><td align="left">创建时追踪当前时间，对于 <code>int</code> 字段，它会追踪秒级时间戳，您可以使用 <code>nano</code>&#x2F;<code>milli</code> 来追踪纳秒、毫秒时间戳，例如：<code>autoCreateTime:nano</code></td></tr><tr><td align="left">autoUpdateTime</td><td align="left">创建&#x2F;更新时追踪当前时间，对于 <code>int</code> 字段，它会追踪秒级时间戳，您可以使用 <code>nano</code>&#x2F;<code>milli</code> 来追踪纳秒、毫秒时间戳，例如：<code>autoUpdateTime:milli</code></td></tr><tr><td align="left">index</td><td align="left">根据参数创建索引，多个字段使用相同的名称则创建复合索引，查看 索引 获取详情</td></tr><tr><td align="left">uniqueIndex</td><td align="left">与 <code>index</code> 相同，但创建的是唯一索引</td></tr><tr><td align="left">check</td><td align="left">创建检查约 束，例如 <code>check:age &gt; 13</code>，查看 约束 获取详情</td></tr><tr><td align="left">&lt;-</td><td align="left">设置字段写入的权限， <code>&lt;-:create</code> 只创建、<code>&lt;-:update</code> 只更新、<code>&lt;-:false</code> 无写入权限、<code>&lt;-</code> 创建和更新权限</td></tr><tr><td align="left">-&gt;</td><td align="left">设置字段读的权限，<code>-&gt;:false</code> 无读权限</td></tr><tr><td align="left">-</td><td align="left">忽略该字段，<code>-</code> 无读写权限</td></tr><tr><td align="left">comment</td><td align="left">迁移时为字段添加注释</td></tr></tbody></table><h3 id="关联标签"><a href="#关联标签" class="headerlink" title="关联标签"></a>关联标签</h3><p>GORM 允许通过标签为关联配置外键、约束、many2many 表，详情请参考 关联部分</p><h1 id="gorm连接到数据库"><a href="#gorm连接到数据库" class="headerlink" title="gorm连接到数据库"></a>gorm连接到数据库</h1><p>GORM 官方支持的数据库类型有：MySQL, PostgreSQL, SQlite, SQL Server</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span></span><br><span class="line"> dsn := <span class="string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line"> db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>想要正确的处理 <code>time.Time</code> ，您需要带上 <code>parseTime</code> 参数，<br>(更多参数) 要支持完整的 UTF-8 编码，您需要将 <code>charset=utf8</code> 更改为<br><code>charset=utf8mb4</code> 查看 此文章 获取详情</p></blockquote><p>MySQl 驱动程序提供了 一些高级配置 可以在初始化过程中使用，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db, err := gorm.Open(mysql.New(mysql.Config&#123;</span><br><span class="line"> DSN: <span class="string">&quot;gorm:gorm@tcp(127.0.0.1:3306)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>, <span class="comment">// DSN data source name</span></span><br><span class="line"> DefaultStringSize: <span class="number">256</span>, <span class="comment">// string 类型字段的默认长度</span></span><br><span class="line"> DisableDatetimePrecision: <span class="literal">true</span>, <span class="comment">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span></span><br><span class="line"> DontSupportRenameIndex: <span class="literal">true</span>, <span class="comment">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span></span><br><span class="line"> DontSupportRenameColumn: <span class="literal">true</span>, <span class="comment">// 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span></span><br><span class="line"> SkipInitializeWithVersion: <span class="literal">false</span>, <span class="comment">// 根据当前 MySQL 版本自动配置</span></span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义驱动"><a href="#自定义驱动" class="headerlink" title="自定义驱动"></a>自定义驱动</h3><p>GORM 允许通过 <code>DriverName</code> 选项自定义 MySQL 驱动，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> _ <span class="string">&quot;example.com/my_mysql_driver&quot;</span></span><br><span class="line"> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db, err := gorm.Open(mysql.New(mysql.Config&#123;</span><br><span class="line"> DriverName: <span class="string">&quot;my_mysql_driver&quot;</span>,</span><br><span class="line"> DSN: <span class="string">&quot;gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>, <span class="comment">// Data Source Name，参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name</span></span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="现有的数据库连接"><a href="#现有的数据库连接" class="headerlink" title="现有的数据库连接"></a>现有的数据库连接</h3><p>GORM 允许通过一个现有的数据库连接来初始化 <code>*gorm.DB</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;database/sql&quot;</span></span><br><span class="line"> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">sqlDB, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;mydb_dsn&quot;</span>)</span><br><span class="line">gormDB, err := gorm.Open(mysql.New(mysql.Config&#123;</span><br><span class="line"> Conn: sqlDB,</span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;gorm.io/driver/postgres&quot;</span></span><br><span class="line"> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dsn := <span class="string">&quot;host=localhost user=gorm password=gorm dbname=gorm port=9920 sslmode=disable TimeZone=Asia/Shanghai&quot;</span></span><br><span class="line">db, err := gorm.Open(postgres.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><p>我们使用 pgx 作为 postgres 的 database&#x2F;sql 驱动，默认情况下，它会启用<br>prepared statement 缓存，你可以这样禁用它：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/go-gorm/postgres</span></span><br><span class="line">db, err := gorm.Open(postgres.New(postgres.Config&#123;</span><br><span class="line"> DSN: <span class="string">&quot;user=gorm password=gorm dbname=gorm port=9920 sslmode=disable TimeZone=Asia/Shanghai&quot;</span>,</span><br><span class="line"> PreferSimpleProtocol: <span class="literal">true</span>, <span class="comment">// disables implicit prepared statement usage</span></span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义驱动-1"><a href="#自定义驱动-1" class="headerlink" title="自定义驱动"></a>自定义驱动</h3><p>GORM 允许通过 <code>DriverName</code> 选项自定义 PostgreSQL 驱动，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> _ <span class="string">&quot;github.com/GoogleCloudPlatform/cloudsql-proxy/proxy/dialers/postgres&quot;</span></span><br><span class="line"> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db, err := gorm.Open(postgres.New(postgres.Config&#123;</span><br><span class="line"> DriverName: <span class="string">&quot;cloudsqlpostgres&quot;</span>,</span><br><span class="line"> DSN: <span class="string">&quot;host=project:region:instance user=postgres dbname=postgres password=password sslmode=disable&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="现有的数据库连接-1"><a href="#现有的数据库连接-1" class="headerlink" title="现有的数据库连接"></a>现有的数据库连接</h3><p>GORM 允许通过一个现有的数据库连接来初始化 <code>*gorm.DB</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;database/sql&quot;</span></span><br><span class="line"> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">sqlDB, err := sql.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;mydb_dsn&quot;</span>)</span><br><span class="line">gormDB, err := gorm.Open(postgres.New(postgres.Config&#123;</span><br><span class="line"> Conn: sqlDB,</span><br><span class="line">&#125;), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;gorm.io/driver/sqlite&quot;</span></span><br><span class="line"> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// github.com/mattn/go-sqlite3</span></span><br><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 您也可以使用 <code>file::memory:?cache=shared</code><br>替代文件路径。这会告诉 SQLite 在系统内存中使用一个临时数据库。(查看<br>SQLite 文档 获取详情)</p></blockquote><h2 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;gorm.io/driver/sqlserver&quot;</span></span><br><span class="line"> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// github.com/denisenkom/go-mssqldb</span></span><br><span class="line">dsn := <span class="string">&quot;sqlserver://gorm:LoremIpsum86@localhost:9930?database=gorm&quot;</span></span><br><span class="line">db, err := gorm.Open(sqlserver.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="Clickhouse"><a href="#Clickhouse" class="headerlink" title="Clickhouse"></a>Clickhouse</h2><p><a href="https://github.com/go-gorm/clickhouse">https://github.com/go-gorm/clickhouse</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;gorm.io/driver/clickhouse&quot;</span></span><br><span class="line"> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> dsn := <span class="string">&quot;tcp://localhost:9000?database=gorm&amp;username=gorm&amp;password=gorm&amp;read_timeout=10&amp;write_timeout=20&quot;</span></span><br><span class="line"> db, err := gorm.Open(clickhouse.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Auto Migrate</span></span><br><span class="line"> db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line"> <span class="comment">// Set table options</span></span><br><span class="line"> db.Set(<span class="string">&quot;gorm:table_options&quot;</span>, <span class="string">&quot;ENGINE=Distributed(cluster, default, hits)&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 插入</span></span><br><span class="line"> db.Create(&amp;user)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 查询</span></span><br><span class="line"> db.Find(&amp;user, <span class="string">&quot;id = ?&quot;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 批量插入</span></span><br><span class="line"> <span class="keyword">var</span> users = []User&#123;user1, user2, user3&#125;</span><br><span class="line"> db.Create(&amp;users)</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>GORM 使用 database&#x2F;sql 维护连接池</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sqlDB, err := db.DB()</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetMaxIdleConns 设置空闲连接池中连接的最大数量</span></span><br><span class="line">sqlDB.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetMaxOpenConns 设置打开数据库连接的最大数量。</span></span><br><span class="line">sqlDB.SetMaxOpenConns(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetConnMaxLifetime 设置了连接可复用的最大时间。</span></span><br><span class="line">sqlDB.SetConnMaxLifetime(time.Hour)</span><br></pre></td></tr></table></figure><p>查看 通用接口 获取详情。</p><h1 id="gorm创建记录"><a href="#gorm创建记录" class="headerlink" title="gorm创建记录"></a>gorm创建记录</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>, Age: <span class="number">18</span>, Birthday: time.Now()&#125;</span><br><span class="line"></span><br><span class="line">result := db.Create(&amp;user) <span class="comment">// 通过数据的指针来创建</span></span><br><span class="line"></span><br><span class="line">user.ID             <span class="comment">// 返回插入数据的主键</span></span><br><span class="line">result.Error        <span class="comment">// 返回 error</span></span><br><span class="line">result.RowsAffected <span class="comment">// 返回插入记录的条数</span></span><br></pre></td></tr></table></figure><h2 id="用指定的字段创建记录"><a href="#用指定的字段创建记录" class="headerlink" title="用指定的字段创建记录"></a>用指定的字段创建记录</h2><p>创建记录并更新给出的字段。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Select(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>, <span class="string">&quot;CreatedAt&quot;</span>).Create(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO `users` (`name`,`age`,`created_at`) VALUES (&quot;jinzhu&quot;, 18, &quot;2020-07-04 11:05:21.775&quot;)</span></span><br></pre></td></tr></table></figure><p>创建一个记录且一同忽略传递给略去的字段值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Omit(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>, <span class="string">&quot;CreatedAt&quot;</span>).Create(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO `users` (`birthday`,`updated_at`) VALUES (&quot;2020-01-01 00:00:00.000&quot;, &quot;2020-07-04 11:05:21.775&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><p>要有效地插入大量记录，请将一个 <code>slice</code> 传递给 <code>Create</code> 方法。GORM<br>将生成单独一条SQL语句来插入所有数据，并回填主键的值，钩子方法也会被调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = []User&#123;&#123;Name: <span class="string">&quot;jinzhu1&quot;</span>&#125;, &#123;Name: <span class="string">&quot;jinzhu2&quot;</span>&#125;, &#123;Name: <span class="string">&quot;jinzhu3&quot;</span>&#125;&#125;</span><br><span class="line">db.Create(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, user := <span class="keyword">range</span> users &#123;</span><br><span class="line"> user.ID <span class="comment">// 1,2,3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>CreateInBatches</code> 分批创建时，你可以指定每批的数量，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = []User&#123;&#123;name: <span class="string">&quot;jinzhu_1&quot;</span>&#125;, ...., &#123;Name: <span class="string">&quot;jinzhu_10000&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数量为 100</span></span><br><span class="line">db.CreateInBatches(users, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>Upsert 和 Create With Associations 也支持批量插入</p><blockquote><p><strong>注意</strong> 使用<code>CreateBatchSize</code> 选项初始化 GORM 时，所有的创建&amp; 关联<br><code>INSERT</code> 都将遵循该选项</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line"> CreateBatchSize: <span class="number">1000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db := db.Session(&amp;gorm.Session&#123;CreateBatchSize: <span class="number">1000</span>&#125;)</span><br><span class="line"></span><br><span class="line">users = [<span class="number">5000</span>]User&#123;&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Pets: []Pet&#123;pet1, pet2, pet3&#125;&#125;...&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;users)</span><br><span class="line"><span class="comment">// INSERT INTO users xxx (5 batches)</span></span><br><span class="line"><span class="comment">// INSERT INTO pets xxx (15 batches)</span></span><br></pre></td></tr></table></figure><h2 id="创建钩子"><a href="#创建钩子" class="headerlink" title="创建钩子"></a>创建钩子</h2><p>GORM 允许用户定义的钩子有 <code>BeforeSave</code>, <code>BeforeCreate</code>, <code>AfterSave</code>,<br><code>AfterCreate</code> 创建记录时将调用这些钩子方法，请参考 Hooks<br>中关于生命周期的详细信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> BeforeCreate(tx *gorm.DB) (err <span class="type">error</span>) &#123;</span><br><span class="line"> u.UUID = uuid.New()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> u.Role == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> errors.New(<span class="string">&quot;invalid role&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您想跳过 <code>钩子</code> 方法，您可以使用 <code>SkipHooks</code> 会话模式，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Create(&amp;user)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Create(&amp;users)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).CreateInBatches(users, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="根据-Map-创建"><a href="#根据-Map-创建" class="headerlink" title="根据 Map 创建"></a>根据 Map 创建</h2><p>GORM 支持根据 <code>map[string]interface&#123;&#125;</code> 和 <code>[]map[string]interface&#123;&#125;&#123;&#125;</code><br>创建记录，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;User&#123;&#125;).Create(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"> <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// batch insert from `[]map[string]interface&#123;&#125;&#123;&#125;`</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Create([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">&#123;<span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu_1&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">18</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu_2&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 根据 map 创建记录时，association<br>不会被调用，且主键也不会自动填充</p></blockquote><h2 id="使用-SQL-表达式、Context-Valuer-创建记录"><a href="#使用-SQL-表达式、Context-Valuer-创建记录" class="headerlink" title="使用 SQL 表达式、Context Valuer 创建记录"></a>使用 SQL 表达式、Context Valuer 创建记录</h2><p>GORM 允许使用 SQL 表达式插入数据，有两种方法实现这个目标。根据<br><code>map[string]interface&#123;&#125;</code> 或 自定义数据类型 创建，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 map 创建记录</span></span><br><span class="line">db.Model(User&#123;&#125;).Create(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"> <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line"> <span class="string">&quot;Location&quot;</span>: clause.Expr&#123;SQL: <span class="string">&quot;ST_PointFromText(?)&quot;</span>, Vars: []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;POINT(100 100)&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `users` (`name`,`location`) VALUES (&quot;jinzhu&quot;,ST_PointFromText(&quot;POINT(100 100)&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过自定义类型创建记录</span></span><br><span class="line"><span class="keyword">type</span> Location <span class="keyword">struct</span> &#123;</span><br><span class="line">   X, Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scan 方法实现了 sql.Scanner 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(loc *Location)</span></span> Scan(v <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"> <span class="comment">// Scan a value into struct from database driver</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(loc Location)</span></span> GormDataType() <span class="type">string</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;geometry&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(loc Location)</span></span> GormValue(ctx context.Context, db *gorm.DB) clause.Expr &#123;</span><br><span class="line"> <span class="keyword">return</span> clause.Expr&#123;</span><br><span class="line">   SQL:  <span class="string">&quot;ST_PointFromText(?)&quot;</span>,</span><br><span class="line">   Vars: []<span class="keyword">interface</span>&#123;&#125;&#123;fmt.Sprintf(<span class="string">&quot;POINT(%d %d)&quot;</span>, loc.X, loc.Y)&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> Name     <span class="type">string</span></span><br><span class="line"> Location Location</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;User&#123;</span><br><span class="line"> Name:     <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line"> Location: Location&#123;X: <span class="number">100</span>, Y: <span class="number">100</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `users` (`name`,`location`) VALUES (&quot;jinzhu&quot;,ST_PointFromText(&quot;POINT(100 100)&quot;))</span></span><br></pre></td></tr></table></figure><h2 id="高级选项-1"><a href="#高级选项-1" class="headerlink" title="高级选项"></a>高级选项</h2><h3 id="关联创建"><a href="#关联创建" class="headerlink" title="关联创建"></a>关联创建</h3><p>创建关联数据时，如果关联值是非零值，这些关联会被 upsert，且它们的 <code>Hook</code><br>方法也会被调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line"> gorm.Model</span><br><span class="line"> Number   <span class="type">string</span></span><br><span class="line"> UserID   <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> gorm.Model</span><br><span class="line"> Name       <span class="type">string</span></span><br><span class="line"> CreditCard CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;User&#123;</span><br><span class="line"> Name: <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line"> CreditCard: CreditCard&#123;Number: <span class="string">&quot;411111111111&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `users` ...</span></span><br><span class="line"><span class="comment">// INSERT INTO `credit_cards` ...</span></span><br></pre></td></tr></table></figure><p>您也可以通过 <code>Select</code>、 <code>Omit</code> 跳过关联保存，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.Omit(<span class="string">&quot;CreditCard&quot;</span>).Create(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过所有关联</span></span><br><span class="line">db.Omit(clause.Associations).Create(&amp;user)</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>您可以通过标签 <code>default</code> 为字段定义默认值，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID   <span class="type">int64</span></span><br><span class="line"> Name <span class="type">string</span> <span class="string">`gorm:&quot;default:galeone&quot;`</span></span><br><span class="line"> Age  <span class="type">int64</span>  <span class="string">`gorm:&quot;default:18&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入记录到数据库时，默认值 <em>会被用于</em> 填充值为 零值 的字段</p><blockquote><p><strong>注意</strong> 像 <code>0</code>、<code>&#39;&#39;</code>、<code>false</code><br>等零值，不会将这些字段定义的默认值保存到数据库。您需要使用指针类型或<br>Scanner&#x2F;Valuer 来避免这个问题，例如：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> gorm.Model</span><br><span class="line"> Name <span class="type">string</span></span><br><span class="line"> Age  *<span class="type">int</span>           <span class="string">`gorm:&quot;default:18&quot;`</span></span><br><span class="line"> Active sql.NullBool <span class="string">`gorm:&quot;default:true&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> 若要数据库有默认、虚拟&#x2F;生成的值，你必须为字段设置 <code>default</code><br>标签。若要在迁移时跳过默认值定义，你可以使用 <code>default:(-)</code>，例如：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID        <span class="type">string</span> <span class="string">`gorm:&quot;default:uuid_generate_v3()&quot;`</span> <span class="comment">// db func</span></span><br><span class="line"> FirstName <span class="type">string</span></span><br><span class="line"> LastName  <span class="type">string</span></span><br><span class="line"> Age       <span class="type">uint8</span></span><br><span class="line"> FullName  <span class="type">string</span> <span class="string">`gorm:&quot;-&gt;;type:GENERATED ALWAYS AS (concat(firstname,&#x27; &#x27;,lastname));default:(-);&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用虚拟&#x2F;生成的值时，你可能需要禁用它的创建、更新权限，查看 字段级权限<br>获取详情</p><h3 id="Upsert-及冲突"><a href="#Upsert-及冲突" class="headerlink" title="Upsert 及冲突"></a>Upsert 及冲突</h3><p>GORM 为不同数据库提供了兼容的 Upsert 支持</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/gorm/clause&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在冲突时，什么都不做</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;DoNothing: <span class="literal">true</span>&#125;).Create(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在`id`冲突时，将列更新为默认值</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;</span><br><span class="line"> Columns:   []clause.Column&#123;&#123;Name: <span class="string">&quot;id&quot;</span>&#125;&#125;,</span><br><span class="line"> DoUpdates: clause.Assignments(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>&#125;),</span><br><span class="line">&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// MERGE INTO &quot;users&quot; USING *** WHEN NOT MATCHED THEN INSERT *** WHEN MATCHED THEN UPDATE SET ***; SQL Server</span></span><br><span class="line"><span class="comment">// INSERT INTO `users` *** ON DUPLICATE KEY UPDATE ***; MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用SQL语句</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;</span><br><span class="line"> Columns:   []clause.Column&#123;&#123;Name: <span class="string">&quot;id&quot;</span>&#125;&#125;,</span><br><span class="line"> DoUpdates: clause.Assignments(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;count&quot;</span>: gorm.Expr(<span class="string">&quot;GREATEST(count, VALUES(count))&quot;</span>)&#125;),</span><br><span class="line">&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// INSERT INTO `users` *** ON DUPLICATE KEY UPDATE `count`=GREATEST(count, VALUES(count));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在`id`冲突时，将列更新为新值</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;</span><br><span class="line"> Columns:   []clause.Column&#123;&#123;Name: <span class="string">&quot;id&quot;</span>&#125;&#125;,</span><br><span class="line"> DoUpdates: clause.AssignmentColumns([]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;),</span><br><span class="line">&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// MERGE INTO &quot;users&quot; USING *** WHEN NOT MATCHED THEN INSERT *** WHEN MATCHED THEN UPDATE SET &quot;name&quot;=&quot;excluded&quot;.&quot;name&quot;; SQL Server</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; *** ON CONFLICT (&quot;id&quot;) DO UPDATE SET &quot;name&quot;=&quot;excluded&quot;.&quot;name&quot;, &quot;age&quot;=&quot;excluded&quot;.&quot;age&quot;; PostgreSQL</span></span><br><span class="line"><span class="comment">// INSERT INTO `users` *** ON DUPLICATE KEY UPDATE `name`=VALUES(name),`age=VALUES(age); MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在冲突时，更新除主键以外的所有列到新值。</span></span><br><span class="line">db.Clauses(clause.OnConflict&#123;</span><br><span class="line"> UpdateAll: <span class="literal">true</span>,</span><br><span class="line">&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; *** ON CONFLICT (&quot;id&quot;) DO UPDATE SET &quot;name&quot;=&quot;excluded&quot;.&quot;name&quot;, &quot;age&quot;=&quot;excluded&quot;.&quot;age&quot;, ...;</span></span><br></pre></td></tr></table></figure><p>您还可以查看 高级查询 中的 <code>FirstOrInit</code>、<code>FirstOrCreate</code></p><h1 id="gorm查询记录"><a href="#gorm查询记录" class="headerlink" title="gorm查询记录"></a>gorm查询记录</h1><h2 id="检索单个对象"><a href="#检索单个对象" class="headerlink" title="检索单个对象"></a>检索单个对象</h2><p>GORM 提供了 <code>First</code>、<code>Take</code>、<code>Last</code><br>方法，以便从数据库中检索单个对象。当查询数据库时它添加了 <code>LIMIT 1</code><br>条件，且没有找到记录时，它会返回 <code>ErrRecordNotFound</code> 错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一条记录（主键升序）</span></span><br><span class="line">db.First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一条记录，没有指定排序字段</span></span><br><span class="line">db.Take(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最后一条记录（主键降序）</span></span><br><span class="line">db.Last(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id DESC LIMIT 1;</span></span><br><span class="line"></span><br><span class="line">result := db.First(&amp;user)</span><br><span class="line">result.RowsAffected <span class="comment">// 返回找到的记录数</span></span><br><span class="line">result.Error        <span class="comment">// returns error or nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 ErrRecordNotFound 错误</span></span><br><span class="line">errors.Is(result.Error, gorm.ErrRecordNotFound)</span><br></pre></td></tr></table></figure><blockquote><p>如果你想避免<code>ErrRecordNotFound</code>错误，你可以使用<code>Find</code>，比如<code>db.Limit(1).Find(&amp;user)</code>，<code>Find</code>方法可以接受struct和slice的数据。</p></blockquote><p><code>First</code> 和 <code>Last</code><br>会根据主键排序，分别查询第一条和最后一条记录。只有在目标 struct<br>是指针或者通过 <code>db.Model()</code> 指定 model 时，该方法才有效。此外，如果相关<br>model 没有定义主键，那么将按 model 的第一个字段进行排序。例如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line"><span class="keyword">var</span> users []User  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 有效，因为目标 struct 是指针</span></span><br><span class="line">db.First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` ORDER BY `users`.`id` LIMIT 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有效，因为通过 `db.Model()` 指定了 model</span></span><br><span class="line">result := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">db.Model(&amp;User&#123;&#125;).First(&amp;result)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` ORDER BY `users`.`id` LIMIT 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line">result := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).First(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配合 Take 有效</span></span><br><span class="line">result := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Take(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未指定主键，会根据第一个字段排序(即：`Code`)</span></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line"> Code <span class="type">string</span></span><br><span class="line"> Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">db.First(&amp;Language&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM `languages` ORDER BY `languages`.`code` LIMIT 1</span></span><br></pre></td></tr></table></figure><h3 id="用主键检索"><a href="#用主键检索" class="headerlink" title="用主键检索"></a>用主键检索</h3><p>如果主键是数字类型，您可以使用 内联条件<br>来检索对象。传入字符串参数时，需要特别注意 SQL 注入问题，查看 安全<br>获取详情.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.First(&amp;user, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.First(&amp;user, <span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.Find(&amp;users, []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id IN (1,2,3);</span></span><br></pre></td></tr></table></figure><p>如果主键是字符串（例如像 uuid），查询将被写成这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.First(&amp;user, <span class="string">&quot;id = ?&quot;</span>, <span class="string">&quot;1b74413f-f3b8-409f-ac47-e8c062e3472a&quot;</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = &quot;1b74413f-f3b8-409f-ac47-e8c062e3472a&quot;;</span></span><br></pre></td></tr></table></figure><h2 id="检索全部对象"><a href="#检索全部对象" class="headerlink" title="检索全部对象"></a>检索全部对象</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取全部记录</span></span><br><span class="line">result := db.Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users;</span></span><br><span class="line"></span><br><span class="line">result.RowsAffected <span class="comment">// 返回找到的记录数，相当于 `len(users)`</span></span><br><span class="line">result.Error        <span class="comment">// returns error</span></span><br></pre></td></tr></table></figure><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><h3 id="String-条件"><a href="#String-条件" class="headerlink" title="String 条件"></a>String 条件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一条匹配的记录</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取全部匹配的记录</span></span><br><span class="line">db.Where(<span class="string">&quot;name &lt;&gt; ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name &lt;&gt; &#x27;jinzhu&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IN</span></span><br><span class="line">db.Where(<span class="string">&quot;name IN ?&quot;</span>, []<span class="type">string</span>&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name IN (&#x27;jinzhu&#x27;,&#x27;jinzhu 2&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LIKE</span></span><br><span class="line">db.Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;%jin%&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name LIKE &#x27;%jin%&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AND</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ? AND age &gt;= ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;22&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; AND age &gt;= 22;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Time</span></span><br><span class="line">db.Where(<span class="string">&quot;updated_at &gt; ?&quot;</span>, lastWeek).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE updated_at &gt; &#x27;2000-01-01 00:00:00&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BETWEEN</span></span><br><span class="line">db.Where(<span class="string">&quot;created_at BETWEEN ? AND ?&quot;</span>, lastWeek, today).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE created_at BETWEEN &#x27;2000-01-01 00:00:00&#x27; AND &#x27;2000-01-08 00:00:00&#x27;;</span></span><br></pre></td></tr></table></figure><h3 id="Struct-amp-Map-条件"><a href="#Struct-amp-Map-条件" class="headerlink" title="Struct &amp; Map 条件"></a>Struct &amp; Map 条件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Age: <span class="number">20</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20 ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Where(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主键切片条件</span></span><br><span class="line">db.Where([]<span class="type">int64</span>&#123;<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id IN (20, 21, 22);</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> 当使用结构作为条件查询时，GORM<br>只会查询非零值字段。这意味着如果您的字段值为 <code>0</code>、<code>&#39;&#39;</code>、<code>false</code> 或其他<br>零值，该字段不会被用于构建查询条件，例如：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Age: <span class="number">0</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure><p>如果想要包含零值查询条件，你可以使用 map，其会包含所有 key-value<br>的查询条件，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">0</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 0;</span></span><br></pre></td></tr></table></figure><p>查看 指定结构体查询字段 获取详情.</p><h3 id="指定结构体查询字段"><a href="#指定结构体查询字段" class="headerlink" title="指定结构体查询字段"></a>指定结构体查询字段</h3><p>当使用 struct 进行查询时，你可以通过向 <code>Where()</code> 传入 struct<br>来指定查询条件的字段、值、表名，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Age&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 0;</span></span><br><span class="line"></span><br><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;, <span class="string">&quot;Age&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 0;</span></span><br></pre></td></tr></table></figure><h3 id="内联条件"><a href="#内联条件" class="headerlink" title="内联条件"></a>内联条件</h3><p>查询条件也可以被内联到 <code>First</code> 和 <code>Find</code> 之类的方法中，其用法类似于<br><code>Where</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据主键获取记录，如果是非整型主键</span></span><br><span class="line">db.First(&amp;user, <span class="string">&quot;id = ?&quot;</span>, <span class="string">&quot;string_primary_key&quot;</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = &#x27;string_primary_key&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Plain SQL</span></span><br><span class="line">db.Find(&amp;user, <span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</span></span><br><span class="line"></span><br><span class="line">db.Find(&amp;users, <span class="string">&quot;name &lt;&gt; ? AND age &gt; ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; AND age &gt; 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Find(&amp;users, User&#123;Age: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Find(&amp;users, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></table></figure><h3 id="Not-条件"><a href="#Not-条件" class="headerlink" title="Not 条件"></a>Not 条件</h3><p>构建 NOT 条件，用法与 <code>Where</code> 类似</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.Not(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE NOT name = &quot;jinzhu&quot; ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Not In</span></span><br><span class="line">db.Not(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>&#125;&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name NOT IN (&quot;jinzhu&quot;, &quot;jinzhu 2&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Not(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Age: <span class="number">18</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; AND age &lt;&gt; 18 ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不在主键切片中的记录</span></span><br><span class="line">db.Not([]<span class="type">int64</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id NOT IN (1,2,3) ORDER BY id LIMIT 1;</span></span><br></pre></td></tr></table></figure><h3 id="Or-条件"><a href="#Or-条件" class="headerlink" title="Or 条件"></a>Or 条件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Or(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;super_admin&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE role = &#x27;admin&#x27; OR role = &#x27;super_admin&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Where(<span class="string">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(User&#123;Name: <span class="string">&quot;jinzhu 2&quot;</span>, Age: <span class="number">18</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; OR (name = &#x27;jinzhu 2&#x27; AND age = 18);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Where(<span class="string">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu 2&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; OR (name = &#x27;jinzhu 2&#x27; AND age = 18);</span></span><br></pre></td></tr></table></figure><p>更复杂的 SQL 查询， 请查看 高级查询中的组条件。</p><h2 id="选择特定字段"><a href="#选择特定字段" class="headerlink" title="选择特定字段"></a>选择特定字段</h2><p><code>Select</code> 允许您指定从数据库中检索哪些字段， 默认情况下，GORM<br>会检索所有字段。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT name, age FROM users;</span></span><br><span class="line"></span><br><span class="line">db.Select([]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT name, age FROM users;</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;COALESCE(age,?)&quot;</span>, <span class="number">42</span>).Rows()</span><br><span class="line"><span class="comment">// SELECT COALESCE(age,&#x27;42&#x27;) FROM users;</span></span><br></pre></td></tr></table></figure><p>还可以看一看 智能选择字段</p><h2 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h2><p>指定从数据库检索记录时的排序方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.Order(<span class="string">&quot;age desc, name&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个 order</span></span><br><span class="line">db.Order(<span class="string">&quot;age desc&quot;</span>).Order(<span class="string">&quot;name&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class="line"></span><br><span class="line">db.Clauses(clause.OrderBy&#123;</span><br><span class="line"> Expression: clause.Expr&#123;SQL: <span class="string">&quot;FIELD(id,?)&quot;</span>, Vars: []<span class="keyword">interface</span>&#123;&#125;&#123;[]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;&#125;, WithoutParentheses: <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY FIELD(id,1,2,3)</span></span><br></pre></td></tr></table></figure><h2 id="Limit-amp-Offset"><a href="#Limit-amp-Offset" class="headerlink" title="Limit &amp; Offset"></a>Limit &amp; Offset</h2><p><code>Limit</code> 指定获取记录的最大数量 <code>Offset</code><br>指定在开始返回记录之前要跳过的记录数量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">db.Limit(<span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users LIMIT 3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 -1 消除 Limit 条件</span></span><br><span class="line">db.Limit(<span class="number">10</span>).Find(&amp;users1).Limit(<span class="number">-1</span>).Find(&amp;users2)</span><br><span class="line"><span class="comment">// SELECT * FROM users LIMIT 10; (users1)</span></span><br><span class="line"><span class="comment">// SELECT * FROM users; (users2)</span></span><br><span class="line"></span><br><span class="line">db.Offset(<span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users OFFSET 3;</span></span><br><span class="line"></span><br><span class="line">db.Limit(<span class="number">10</span>).Offset(<span class="number">5</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users OFFSET 5 LIMIT 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 -1 消除 Offset 条件</span></span><br><span class="line">db.Offset(<span class="number">10</span>).Find(&amp;users1).Offset(<span class="number">-1</span>).Find(&amp;users2)</span><br><span class="line"><span class="comment">// SELECT * FROM users OFFSET 10; (users1)</span></span><br><span class="line"><span class="comment">// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure><p>查看 Pagination 学习如何写一个分页器</p><h2 id="Group-By-amp-Having"><a href="#Group-By-amp-Having" class="headerlink" title="Group By &amp; Having"></a>Group By &amp; Having</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line"> Date  time.Time</span><br><span class="line"> Total <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;name, sum(age) as total&quot;</span>).Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;group%&quot;</span>).Group(<span class="string">&quot;name&quot;</span>).First(&amp;result)</span><br><span class="line"><span class="comment">// SELECT name, sum(age) as total FROM `users` WHERE name LIKE &quot;group%&quot; GROUP BY `name` LIMIT 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;name, sum(age) as total&quot;</span>).Group(<span class="string">&quot;name&quot;</span>).Having(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;group&quot;</span>).Find(&amp;result)</span><br><span class="line"><span class="comment">// SELECT name, sum(age) as total FROM `users` GROUP BY `name` HAVING name = &quot;group&quot;</span></span><br><span class="line"></span><br><span class="line">rows, err := db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rows, err := db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Having(<span class="string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="number">100</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line"> Date  time.Time</span><br><span class="line"> Total <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line">db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Having(<span class="string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="number">100</span>).Scan(&amp;results)</span><br></pre></td></tr></table></figure><h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h2><p>从模型中选择不相同的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Distinct(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Order(<span class="string">&quot;name, age desc&quot;</span>).Find(&amp;results)</span><br></pre></td></tr></table></figure><p><code>Distinct</code> 也可以配合 <code>Pluck</code>, <code>Count</code> 使用</p><h2 id="Joins"><a href="#Joins" class="headerlink" title="Joins"></a>Joins</h2><p>指定 Joins 条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line"> Name  <span class="type">string</span></span><br><span class="line"> Email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Scan(&amp;result&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT users.name, emails.email FROM `users` left join emails on emails.user_id = users.id</span></span><br><span class="line"></span><br><span class="line">rows, err := db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Scan(&amp;results)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的多表连接</span></span><br><span class="line">db.Joins(<span class="string">&quot;JOIN emails ON emails.user_id = users.id AND emails.email = ?&quot;</span>, <span class="string">&quot;jinzhu@example.org&quot;</span>).Joins(<span class="string">&quot;JOIN credit_cards ON credit_cards.user_id = users.id&quot;</span>).Where(<span class="string">&quot;credit_cards.number = ?&quot;</span>, <span class="string">&quot;411111111111&quot;</span>).Find(&amp;user)</span><br></pre></td></tr></table></figure><h3 id="Joins-预加载"><a href="#Joins-预加载" class="headerlink" title="Joins 预加载"></a>Joins 预加载</h3><p>您可以使用 <code>Joins</code> 实现单条 SQL 预加载关联记录，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Joins(<span class="string">&quot;Company&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT `users`.`id`,`users`.`name`,`users`.`age`,`Company`.`id` AS `Company__id`,`Company`.`name` AS `Company__name` FROM `users` LEFT JOIN `companies` AS `Company` ON `users`.`company_id` = `Company`.`id`;</span></span><br></pre></td></tr></table></figure><p>条件连接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Joins(<span class="string">&quot;Company&quot;</span>, DB.Where(&amp;Company&#123;Alive: <span class="literal">true</span>&#125;)).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT `users`.`id`,`users`.`name`,`users`.`age`,`Company`.`id` AS `Company__id`,`Company`.`name` AS `Company__name` FROM `users` LEFT JOIN `companies` AS `Company` ON `users`.`company_id` = `Company`.`id` AND `Company`.`alive` = true;</span></span><br></pre></td></tr></table></figure><h2 id="扫描结果"><a href="#扫描结果" class="headerlink" title="扫描结果"></a>扫描结果</h2><p>使用 <code>Find</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line"> Name <span class="type">string</span></span><br><span class="line"> Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result Result</span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;Antonio&quot;</span>).Scan(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Raw SQL</span></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT name, age FROM users WHERE name = ?&quot;</span>, <span class="string">&quot;Antonio&quot;</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure><h1 id="gorm高级查询"><a href="#gorm高级查询" class="headerlink" title="gorm高级查询"></a>gorm高级查询</h1><h2 id="智能选择字段"><a href="#智能选择字段" class="headerlink" title="智能选择字段"></a>智能选择字段</h2><p>GORM 允许通过<br><code>Select</code>方法选择特定的字段，如果您在应用程序中经常使用此功能，你也可以定义一个较小的结构体，以实现调用<br>API 时自动选择特定的字段，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID     <span class="type">uint</span></span><br><span class="line">  Name   <span class="type">string</span></span><br><span class="line">  Age    <span class="type">int</span></span><br><span class="line">  Gender <span class="type">string</span></span><br><span class="line">  <span class="comment">// 假设后面还有几百个字段...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> APIUser <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">uint</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询时会自动选择 `id`, `name` 字段</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Limit(<span class="number">10</span>).Find(&amp;APIUser&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT `id`, `name` FROM `users` LIMIT 10</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> <code>QueryFields</code> 模式会根据当前 model 的所有字段名称进行<br>select。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">  QueryFields: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT `users`.`name`, `users`.`age`, ... FROM `users` // 带上这个选项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Session Mode</span></span><br><span class="line">db.Session(&amp;gorm.Session&#123;QueryFields: <span class="literal">true</span>&#125;).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT `users`.`name`, `users`.`age`, ... FROM `users`</span></span><br></pre></td></tr></table></figure><h2 id="Locking-FOR-UPDATE"><a href="#Locking-FOR-UPDATE" class="headerlink" title="Locking (FOR UPDATE)"></a>Locking (FOR UPDATE)</h2><p>GORM 支持多种类型的锁，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.Clauses(clause.Locking&#123;Strength: <span class="string">&quot;UPDATE&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` FOR UPDATE</span></span><br><span class="line"></span><br><span class="line">db.Clauses(clause.Locking&#123;</span><br><span class="line">  Strength: <span class="string">&quot;SHARE&quot;</span>,</span><br><span class="line">  Table: clause.Table&#123;Name: clause.CurrentTable&#125;,</span><br><span class="line">&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` FOR SHARE OF `users`</span></span><br><span class="line"></span><br><span class="line">db.Clauses(clause.Locking&#123;</span><br><span class="line">  Strength: <span class="string">&quot;UPDATE&quot;</span>,</span><br><span class="line">  Options: <span class="string">&quot;NOWAIT&quot;</span>,</span><br><span class="line">&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` FOR UPDATE NOWAIT</span></span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询可以嵌套在查询中，GORM 允许在使用 <code>*gorm.DB</code><br>对象作为参数时生成子查询</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;amount &gt; (?)&quot;</span>, db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;AVG(amount)&quot;</span>)).Find(&amp;orders)</span><br><span class="line"><span class="comment">// SELECT * FROM &quot;orders&quot; WHERE amount &gt; (SELECT AVG(amount) FROM &quot;orders&quot;);</span></span><br><span class="line"></span><br><span class="line">subQuery := db.Select(<span class="string">&quot;AVG(age)&quot;</span>).Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;name%&quot;</span>).Table(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">db.Select(<span class="string">&quot;AVG(age) as avgage&quot;</span>).Group(<span class="string">&quot;name&quot;</span>).Having(<span class="string">&quot;AVG(age) &gt; (?)&quot;</span>, subQuery).Find(&amp;results)</span><br><span class="line"><span class="comment">// SELECT AVG(age) as avgage FROM `users` GROUP BY `name` HAVING AVG(age) &gt; (SELECT AVG(age) FROM `users` WHERE name LIKE &quot;name%&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="From-子查询"><a href="#From-子查询" class="headerlink" title="From 子查询"></a>From 子查询</h3><p>GORM 允许您在 <code>Table</code> 方法中通过 FROM 子句使用子查询，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.Table(<span class="string">&quot;(?) as u&quot;</span>, db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>)).Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">18</span>&#125;).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM (SELECT `name`,`age` FROM `users`) as u WHERE `age` = 18</span></span><br><span class="line"></span><br><span class="line">subQuery1 := db.Model(&amp;User&#123;&#125;).Select(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">subQuery2 := db.Model(&amp;Pet&#123;&#125;).Select(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">db.Table(<span class="string">&quot;(?) as u, (?) as p&quot;</span>, subQuery1, subQuery2).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM (SELECT `name` FROM `users`) as u, (SELECT `name` FROM `pets`) as p</span></span><br></pre></td></tr></table></figure><h2 id="Group-条件"><a href="#Group-条件" class="headerlink" title="Group 条件"></a>Group 条件</h2><p>使用 Group 条件可以更轻松的编写复杂 SQL</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.Where(</span><br><span class="line">    db.Where(<span class="string">&quot;pizza = ?&quot;</span>, <span class="string">&quot;pepperoni&quot;</span>).Where(db.Where(<span class="string">&quot;size = ?&quot;</span>, <span class="string">&quot;small&quot;</span>).Or(<span class="string">&quot;size = ?&quot;</span>, <span class="string">&quot;medium&quot;</span>)),</span><br><span class="line">).Or(</span><br><span class="line">    db.Where(<span class="string">&quot;pizza = ?&quot;</span>, <span class="string">&quot;hawaiian&quot;</span>).Where(<span class="string">&quot;size = ?&quot;</span>, <span class="string">&quot;xlarge&quot;</span>),</span><br><span class="line">).Find(&amp;Pizza&#123;&#125;).Statement</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT * FROM `pizzas` WHERE (pizza = &quot;pepperoni&quot; AND (size = &quot;small&quot; OR size = &quot;medium&quot;)) OR (pizza = &quot;hawaiian&quot; AND size = &quot;xlarge&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="带多个列的-In"><a href="#带多个列的-In" class="headerlink" title="带多个列的 In"></a>带多个列的 In</h2><p>带多个列的 In 查询</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;(name, age, role) IN ?&quot;</span>, [][]<span class="keyword">interface</span>&#123;&#125;&#123;&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="number">18</span>, <span class="string">&quot;admin&quot;</span>&#125;, &#123;<span class="string">&quot;jinzhu2&quot;</span>, <span class="number">19</span>, <span class="string">&quot;user&quot;</span>&#125;&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE (name, age, role) IN ((&quot;jinzhu&quot;, 18, &quot;admin&quot;), (&quot;jinzhu 2&quot;, 19, &quot;user&quot;));</span></span><br></pre></td></tr></table></figure><h2 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h2><p>GORM 支持 <code>sql.NamedArg</code> 和 <code>map[string]interface&#123;&#125;&#123;&#125;</code><br>形式的命名参数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name1 = @name OR name2 = @name&quot;</span>, sql.Named(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE name1 = &quot;jinzhu&quot; OR name2 = &quot;jinzhu&quot;</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;name1 = @name OR name2 = @name&quot;</span>, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE name1 = &quot;jinzhu&quot; OR name2 = &quot;jinzhu&quot; ORDER BY `users`.`id` LIMIT 1</span></span><br></pre></td></tr></table></figure><h2 id="Find-至-map"><a href="#Find-至-map" class="headerlink" title="Find 至 map"></a>Find 至 map</h2><p>GORM 允许扫描结果至 <code>map[string]interface&#123;&#125;</code> 或<br><code>[]map[string]interface&#123;&#125;</code>，此时别忘了指定 <code>Model</code> 或 <code>Table</code>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">db.Model(&amp;User&#123;&#125;).First(&amp;result, <span class="string">&quot;id = ?&quot;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> results []<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Find(&amp;results)</span><br></pre></td></tr></table></figure><h2 id="FirstOrInit"><a href="#FirstOrInit" class="headerlink" title="FirstOrInit"></a>FirstOrInit</h2><p>获取第一条匹配的记录，或者根据给定的条件初始化一个实例（仅支持 sturct 和<br>map 条件）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未找到 user，则根据给定的条件初始化一条记录</span></span><br><span class="line">db.FirstOrInit(&amp;user, User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// user -&gt; User&#123;Name: &quot;non_existing&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了 `name` = `jinzhu` 的 user</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;Jinzhu&quot;, Age: 18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了 `name` = `jinzhu` 的 user</span></span><br><span class="line">db.FirstOrInit(&amp;user, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;Jinzhu&quot;, Age: 18&#125;</span></span><br></pre></td></tr></table></figure><p>如果没有找到记录，可以使用包含更多的属性的结构体初始化 user，<code>Attrs</code><br>不会被用于生成查询 SQL</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未找到 user，则根据给定的条件以及 Attrs 初始化 user</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = &#x27;non_existing&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 未找到 user，则根据给定的条件以及 Attrs 初始化 user</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Attrs(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = &#x27;non_existing&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了 `name` = `jinzhu` 的 user，则忽略 Attrs</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;Jinzhu&quot;, Age: 18&#125;</span></span><br></pre></td></tr></table></figure><p>不管是否找到记录，<code>Assign</code> 都会将属性赋值给<br>struct，但这些属性不会被用于生成查询 SQL，也不会被保存到数据库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未找到 user，根据条件和 Assign 属性初始化 struct</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">20</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// user -&gt; User&#123;Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到 `name` = `jinzhu` 的记录，依然会更新 Assign 相关的属性</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">20</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM USERS WHERE name = jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;Jinzhu&quot;, Age: 20&#125;</span></span><br></pre></td></tr></table></figure><h2 id="FirstOrCreate"><a href="#FirstOrCreate" class="headerlink" title="FirstOrCreate"></a>FirstOrCreate</h2><p>获取第一条匹配的记录，或者根据给定的条件创建一条新纪录（仅支持 sturct 和<br>map 条件）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未找到 user，则根据给定条件创建一条新纪录</span></span><br><span class="line">db.FirstOrCreate(&amp;user, User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name) VALUES (&quot;non_existing&quot;);</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 112, Name: &quot;non_existing&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了 `name` = `jinzhu` 的 user</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;jinzhu&quot;, &quot;Age&quot;: 18&#125;</span></span><br></pre></td></tr></table></figure><p>如果没有找到记录，可以使用包含更多的属性的结构体创建记录，<code>Attrs</code><br>不会被用于生成查询 SQL 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未找到 user，根据条件和 Assign 属性创建记录</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;non_existing&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了 `name` = `jinzhu` 的 user，则忽略 Attrs</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;jinzhu&quot;, Age: 18&#125;</span></span><br></pre></td></tr></table></figure><p>不管是否找到记录，<code>Assign</code> 都会将属性赋值给 struct，并将结果写回数据库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未找到 user，根据条件和 Assign 属性创建记录</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;non_existing&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了 `name` = `jinzhu` 的 user，依然会根据 Assign 更新记录</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br><span class="line"><span class="comment">// UPDATE users SET age=20 WHERE id = 111;</span></span><br><span class="line"><span class="comment">// user -&gt; User&#123;ID: 111, Name: &quot;jinzhu&quot;, Age: 20&#125;</span></span><br></pre></td></tr></table></figure><h2 id="优化器、索引提示"><a href="#优化器、索引提示" class="headerlink" title="优化器、索引提示"></a>优化器、索引提示</h2><p>优化器提示用于控制查询优化器选择某个查询执行计划，GORM 通过<br><code>gorm.io/hints</code> 提供支持，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/hints&quot;</span></span><br><span class="line"></span><br><span class="line">db.Clauses(hints.New(<span class="string">&quot;MAX_EXECUTION_TIME(10000)&quot;</span>)).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * /*+ MAX_EXECUTION_TIME(10000) */ FROM `users`</span></span><br></pre></td></tr></table></figure><p>索引提示允许传递索引提示到数据库，以防查询计划器出现混乱。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/hints&quot;</span></span><br><span class="line"></span><br><span class="line">db.Clauses(hints.UseIndex(<span class="string">&quot;idx_user_name&quot;</span>)).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` USE INDEX (`idx_user_name`)</span></span><br><span class="line"></span><br><span class="line">db.Clauses(hints.ForceIndex(<span class="string">&quot;idx_user_name&quot;</span>, <span class="string">&quot;idx_user_id&quot;</span>).ForJoin()).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` FORCE INDEX FOR JOIN (`idx_user_name`,`idx_user_id`)&quot;</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>GORM 支持通过行进行迭代</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  <span class="keyword">var</span> user User</span><br><span class="line">  <span class="comment">// ScanRows 方法用于将一行记录扫描至结构体</span></span><br><span class="line">  db.ScanRows(rows, &amp;user)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 业务逻辑...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FindInBatches"><a href="#FindInBatches" class="headerlink" title="FindInBatches"></a>FindInBatches</h2><p>用于批量查询并处理记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次批量处理 100 条</span></span><br><span class="line">result := db.Where(<span class="string">&quot;processed = ?&quot;</span>, <span class="literal">false</span>).FindInBatches(&amp;results, <span class="number">100</span>, <span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB, batch <span class="type">int</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> _, result := <span class="keyword">range</span> results &#123;</span><br><span class="line">    <span class="comment">// 批量处理找到的记录</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tx.Save(&amp;results)</span><br><span class="line"></span><br><span class="line">  tx.RowsAffected <span class="comment">// 本次批量操作影响的记录数</span></span><br><span class="line"></span><br><span class="line">  batch <span class="comment">// Batch 1, 2, 3</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果返回错误会终止后续批量操作</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">result.Error <span class="comment">// returned error</span></span><br><span class="line">result.RowsAffected <span class="comment">// 整个批量操作影响的记录数</span></span><br></pre></td></tr></table></figure><h2 id="查询钩子"><a href="#查询钩子" class="headerlink" title="查询钩子"></a>查询钩子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> AfterFind(tx *gorm.DB) (err <span class="type">error</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> u.Role == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    u.Role = <span class="string">&quot;user&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pluck"><a href="#Pluck" class="headerlink" title="Pluck"></a>Pluck</h2><p>Pluck<br>用于从数据库查询单个列，并将结果扫描到切片。如果您想要查询多列，您应该使用<br><code>Select</code> 和 <a href="https://gorm.io/zh_CN/docs/query.html#scan"><code>Scan</code></a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages []<span class="type">int64</span></span><br><span class="line">db.Model(&amp;users).Pluck(<span class="string">&quot;age&quot;</span>, &amp;ages)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names []<span class="type">string</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Pluck(<span class="string">&quot;name&quot;</span>, &amp;names)</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Pluck(<span class="string">&quot;name&quot;</span>, &amp;names)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Distinct Pluck</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Distinct().Pluck(<span class="string">&quot;Name&quot;</span>, &amp;names)</span><br><span class="line"><span class="comment">// SELECT DISTINCT `name` FROM `users`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 超过一列的查询，应该使用 `Scan` 或者 `Find`，例如：</span></span><br><span class="line">db.Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Scan(&amp;users)</span><br><span class="line">db.Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure><h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p><code>Scopes</code> 允许你指定常用的查询，可以在调用方法时引用这些查询</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AmountGreaterThan1000</span><span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Where(<span class="string">&quot;amount &gt; ?&quot;</span>, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PaidWithCreditCard</span><span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Where(<span class="string">&quot;pay_mode_sign = ?&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PaidWithCod</span><span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Where(<span class="string">&quot;pay_mode_sign = ?&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OrderStatus</span><span class="params">(status []<span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span> <span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">func</span> <span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">    <span class="keyword">return</span> db.Where(<span class="string">&quot;status IN (?)&quot;</span>, status)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, PaidWithCreditCard).Find(&amp;orders)</span><br><span class="line"><span class="comment">// 查找所有金额大于 1000 的信用卡订单</span></span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, PaidWithCod).Find(&amp;orders)</span><br><span class="line"><span class="comment">// 查找所有金额大于 1000 的货到付款订单</span></span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, OrderStatus([]<span class="type">string</span>&#123;<span class="string">&quot;paid&quot;</span>, <span class="string">&quot;shipped&quot;</span>&#125;)).Find(&amp;orders)</span><br><span class="line"><span class="comment">// 查找所有金额大于 1000 且已付款或已发货的订单</span></span><br></pre></td></tr></table></figure><h2 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h2><p>Count 用于获取匹配的记录数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count <span class="type">int64</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Or(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(1) FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(1) FROM users WHERE name = &#x27;jinzhu&#x27;; (count)</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(1) FROM deleted_users;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Count with Distinct</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Distinct(<span class="string">&quot;name&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT COUNT(DISTINCT(`name`)) FROM `users`</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Select(<span class="string">&quot;count(distinct(name))&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">// SELECT count(distinct(name)) FROM deleted_users</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Count with Group</span></span><br><span class="line">users := []User&#123;</span><br><span class="line">  &#123;Name: <span class="string">&quot;name1&quot;</span>&#125;,</span><br><span class="line">  &#123;Name: <span class="string">&quot;name2&quot;</span>&#125;,</span><br><span class="line">  &#123;Name: <span class="string">&quot;name3&quot;</span>&#125;,</span><br><span class="line">  &#123;Name: <span class="string">&quot;name3&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Group(<span class="string">&quot;name&quot;</span>).Count(&amp;count)</span><br><span class="line">count <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><h1 id="gorm更新"><a href="#gorm更新" class="headerlink" title="gorm更新"></a>gorm更新</h1><h2 id="保存所有字段"><a href="#保存所有字段" class="headerlink" title="保存所有字段"></a>保存所有字段</h2><p><code>Save</code> 会保存所有的字段，即使字段是零值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.First(&amp;user)</span><br><span class="line"></span><br><span class="line">user.Name = <span class="string">&quot;jinzhu 2&quot;</span></span><br><span class="line">user.Age = <span class="number">100</span></span><br><span class="line">db.Save(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;jinzhu 2&#x27;, age=100, birthday=&#x27;2016-01-01&#x27;, updated_at = &#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br></pre></td></tr></table></figure><h2 id="更新单个列"><a href="#更新单个列" class="headerlink" title="更新单个列"></a>更新单个列</h2><p>当使用 <code>Update</code> 更新单个列时，你需要指定条件，否则会返回<br><code>ErrMissingWhereClause</code> 错误，查看 Block Global Updates<br>获取详情。当使用了 <code>Model</code><br>方法，且该对象主键有值，该值会被用于构建条件，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件更新</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;active = ?&quot;</span>, <span class="literal">true</span>).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE active=true;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// User 的 ID 是 `111`</span></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据条件和 model 的值进行更新</span></span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;active = ?&quot;</span>, <span class="literal">true</span>).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111 AND active=true;</span></span><br></pre></td></tr></table></figure><h2 id="更新多列"><a href="#更新多列" class="headerlink" title="更新多列"></a>更新多列</h2><p><code>Updates</code> 方法支持 <code>struct</code> 和 <code>map[string]interface&#123;&#125;</code> 参数。当使用<br><code>struct</code> 更新时，默认情况下，GORM 只会更新非零值的字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 `struct` 更新属性，只会更新非零值的字段</span></span><br><span class="line">db.Model(&amp;user).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>, Active: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18, updated_at = &#x27;2013-11-17 21:34:10&#x27; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 `map` 更新属性</span></span><br><span class="line">db.Model(&amp;user).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;active&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18, active=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> 当通过 struct 更新时，GORM 只会更新非零字段。<br>如果您想确保指定字段被更新，你应该使用 <code>Select</code> 更新选定字段，或使用<br><code>map</code> 来完成更新操作</p></blockquote><h2 id="更新选定字段"><a href="#更新选定字段" class="headerlink" title="更新选定字段"></a>更新选定字段</h2><p>如果您想要在更新时选定、忽略某些字段，您可以使用 <code>Select</code>、<code>Omit</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Map 进行 Select</span></span><br><span class="line"><span class="comment">// User&#x27;s ID is `111`:</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;name&quot;</span>).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;active&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27; WHERE id=111;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Omit(<span class="string">&quot;name&quot;</span>).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;active&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET age=18, active=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Struct 进行 Select（会 select 零值的字段）</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>).Updates(User&#123;Name: <span class="string">&quot;new_name&quot;</span>, Age: <span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;new_name&#x27;, age=0 WHERE id=111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Select 所有字段（查询包括零值字段的所有字段）</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;*&quot;</span>).Update(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Role: <span class="string">&quot;admin&quot;</span>, Age: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Select 除 Role 外的所有字段（包括零值字段的所有字段）</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;*&quot;</span>).Omit(<span class="string">&quot;Role&quot;</span>).Update(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Role: <span class="string">&quot;admin&quot;</span>, Age: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="更新-Hook"><a href="#更新-Hook" class="headerlink" title="更新 Hook"></a>更新 Hook</h2><p>对于更新操作，GORM 支持<br><code>BeforeSave</code>、<code>BeforeUpdate</code>、<code>AfterSave</code>、<code>AfterUpdate</code><br>钩子，这些方法将在更新记录时被调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> BeforeUpdate(tx *gorm.DB) (err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> u.Role == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;admin user not allowed to update&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><p>如果您尚未通过 <code>Model</code> 指定记录的主键，则 GORM 会执行批量更新</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 struct 更新</span></span><br><span class="line">db.Model(User&#123;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE role = &#x27;admin&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 map 更新</span></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Where(<span class="string">&quot;id IN ?&quot;</span>, []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">11</span>&#125;).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id IN (10, 11);</span></span><br></pre></td></tr></table></figure><h3 id="阻止全局更新"><a href="#阻止全局更新" class="headerlink" title="阻止全局更新"></a>阻止全局更新</h3><p>如果在没有任何条件的情况下执行批量更新，默认情况下，GORM<br>不会执行该操作，并返回 <code>ErrMissingWhereClause</code> 错误</p><p>对此，你必须加一些条件，或者使用原生 SQL，或者启用 <code>AllowGlobalUpdate</code><br>模式，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;User&#123;&#125;).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Error <span class="comment">// gorm.ErrMissingWhereClause</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;1 = 1&quot;</span>).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET `name` = &quot;jinzhu&quot; WHERE 1=1</span></span><br><span class="line"></span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE users SET name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name = &quot;jinzhu&quot;</span></span><br><span class="line"></span><br><span class="line">db.Session(&amp;gorm.Session&#123;AllowGlobalUpdate: <span class="literal">true</span>&#125;).Model(&amp;User&#123;&#125;).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET `name` = &quot;jinzhu&quot;</span></span><br></pre></td></tr></table></figure><h3 id="更新的记录数"><a href="#更新的记录数" class="headerlink" title="更新的记录数"></a>更新的记录数</h3><p>获取受更新影响的行数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 `RowsAffected` 得到更新的记录数</span></span><br><span class="line">result := db.Model(User&#123;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE role = &#x27;admin&#x27;;</span></span><br><span class="line"></span><br><span class="line">result.RowsAffected <span class="comment">// 更新的记录数</span></span><br><span class="line">result.Error        <span class="comment">// 更新的错误</span></span><br></pre></td></tr></table></figure><h2 id="高级选项-2"><a href="#高级选项-2" class="headerlink" title="高级选项"></a>高级选项</h2><h3 id="使用-SQL-表达式更新"><a href="#使用-SQL-表达式更新" class="headerlink" title="使用 SQL 表达式更新"></a>使用 SQL 表达式更新</h3><p>GORM 允许使用 SQL 表达式更新列，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// product 的 ID 是 `3`</span></span><br><span class="line">db.Model(&amp;product).Update(<span class="string">&quot;price&quot;</span>, gorm.Expr(<span class="string">&quot;price * ? + ?&quot;</span>, <span class="number">2</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment">// UPDATE &quot;products&quot; SET &quot;price&quot; = price * 2 + 100, &quot;updated_at&quot; = &#x27;2013-11-17 21:34:10&#x27; WHERE &quot;id&quot; = 3;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;product).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;price&quot;</span>: gorm.Expr(<span class="string">&quot;price * ? + ?&quot;</span>, <span class="number">2</span>, <span class="number">100</span>)&#125;)</span><br><span class="line"><span class="comment">// UPDATE &quot;products&quot; SET &quot;price&quot; = price * 2 + 100, &quot;updated_at&quot; = &#x27;2013-11-17 21:34:10&#x27; WHERE &quot;id&quot; = 3;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;product).UpdateColumn(<span class="string">&quot;quantity&quot;</span>, gorm.Expr(<span class="string">&quot;quantity - ?&quot;</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">// UPDATE &quot;products&quot; SET &quot;quantity&quot; = quantity - 1 WHERE &quot;id&quot; = 3;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;product).Where(<span class="string">&quot;quantity &gt; 1&quot;</span>).UpdateColumn(<span class="string">&quot;quantity&quot;</span>, gorm.Expr(<span class="string">&quot;quantity - ?&quot;</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">// UPDATE &quot;products&quot; SET &quot;quantity&quot; = quantity - 1 WHERE &quot;id&quot; = 3 AND quantity &gt; 1;</span></span><br></pre></td></tr></table></figure><p>并且 GORM 也允许使用 SQL 表达式、自定义数据类型的 Context Valuer<br>来更新，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据自定义数据类型创建</span></span><br><span class="line"><span class="keyword">type</span> Location <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(loc Location)</span></span> GormValue(ctx context.Context, db *gorm.DB) clause.Expr &#123;</span><br><span class="line">  <span class="keyword">return</span> clause.Expr&#123;</span><br><span class="line">    SQL:  <span class="string">&quot;ST_PointFromText(?)&quot;</span>,</span><br><span class="line">    Vars: []<span class="keyword">interface</span>&#123;&#125;&#123;fmt.Sprintf(<span class="string">&quot;POINT(%d %d)&quot;</span>, loc.X, loc.Y)&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>&#125;).Updates(User&#123;</span><br><span class="line">  Name:  <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  Location: Location&#123;X: <span class="number">100</span>, Y: <span class="number">100</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// UPDATE `user_with_points` SET `name`=&quot;jinzhu&quot;,`location`=ST_PointFromText(&quot;POINT(100 100)&quot;) WHERE `id` = 1</span></span><br></pre></td></tr></table></figure><h3 id="根据子查询进行更新"><a href="#根据子查询进行更新" class="headerlink" title="根据子查询进行更新"></a>根据子查询进行更新</h3><p>使用子查询更新表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;company_name&quot;</span>, db.Model(&amp;Company&#123;&#125;).Select(<span class="string">&quot;name&quot;</span>).Where(<span class="string">&quot;companies.id = users.company_id&quot;</span>))</span><br><span class="line"><span class="comment">// UPDATE &quot;users&quot; SET &quot;company_name&quot; = (SELECT name FROM companies WHERE companies.id = users.company_id);</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users as u&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Update(<span class="string">&quot;company_name&quot;</span>, db.Table(<span class="string">&quot;companies as c&quot;</span>).Select(<span class="string">&quot;name&quot;</span>).Where(<span class="string">&quot;c.id = u.company_id&quot;</span>))</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users as u&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;&#123;<span class="string">&quot;company_name&quot;</span>: db.Table(<span class="string">&quot;companies as c&quot;</span>).Select(<span class="string">&quot;name&quot;</span>).Where(<span class="string">&quot;c.id = u.company_id&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure><h3 id="不使用-Hook-和时间追踪"><a href="#不使用-Hook-和时间追踪" class="headerlink" title="不使用 Hook 和时间追踪"></a>不使用 Hook 和时间追踪</h3><p>如果您想在更新时跳过 <code>Hook</code> 方法且不追踪更新时间，可以使用<br><code>UpdateColumn</code>、<code>UpdateColumns</code>，其用法类似于 <code>Update</code>、<code>Updates</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新单个列</span></span><br><span class="line">db.Model(&amp;user).UpdateColumn(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新多个列</span></span><br><span class="line">db.Model(&amp;user).UpdateColumns(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新选中的列</span></span><br><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).UpdateColumns(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=0 WHERE id = 111;</span></span><br></pre></td></tr></table></figure><h3 id="返回修改行的数据"><a href="#返回修改行的数据" class="headerlink" title="返回修改行的数据"></a>返回修改行的数据</h3><p>返回被修改的数据，仅适用于支持 Returning 的数据库，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回所有列</span></span><br><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line">DB.Model(&amp;users).Clauses(clause.Returning&#123;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Update(<span class="string">&quot;salary&quot;</span>, gorm.Expr(<span class="string">&quot;salary * ?&quot;</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">// UPDATE `users` SET `salary`=salary * 2,`updated_at`=&quot;2021-10-28 17:37:23.19&quot; WHERE role = &quot;admin&quot; RETURNING *</span></span><br><span class="line"><span class="comment">// users =&gt; []User&#123;&#123;ID: 1, Name: &quot;jinzhu&quot;, Role: &quot;admin&quot;, Salary: 100&#125;, &#123;ID: 2, Name: &quot;jinzhu.2&quot;, Role: &quot;admin&quot;, Salary: 1000&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定的列</span></span><br><span class="line">DB.Model(&amp;users).Clauses(clause.Returning&#123;Columns: []clause.Column&#123;&#123;Name: <span class="string">&quot;name&quot;</span>&#125;, &#123;Name: <span class="string">&quot;salary&quot;</span>&#125;&#125;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Update(<span class="string">&quot;salary&quot;</span>, gorm.Expr(<span class="string">&quot;salary * ?&quot;</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">// UPDATE `users` SET `salary`=salary * 2,`updated_at`=&quot;2021-10-28 17:37:23.19&quot; WHERE role = &quot;admin&quot; RETURNING `name`, `salary`</span></span><br><span class="line"><span class="comment">// users =&gt; []User&#123;&#123;ID: 0, Name: &quot;jinzhu&quot;, Role: &quot;&quot;, Salary: 100&#125;, &#123;ID: 0, Name: &quot;jinzhu.2&quot;, Role: &quot;&quot;, Salary: 1000&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="检查字段是否有变更？"><a href="#检查字段是否有变更？" class="headerlink" title="检查字段是否有变更？"></a>检查字段是否有变更？</h3><p>GORM 提供了 <code>Changed</code> 方法，它可以被用在 <strong>Before Update Hook</strong><br>里，它会返回字段是否有变更的布尔值</p><p><code>Changed</code> 方法只能与 <code>Update</code>、<code>Updates</code> 方法一起使用，并且它只是检查<br>Model 对象字段的值与 <code>Update</code>、<code>Updates</code><br>的值是否相等，如果值有变更，且字段没有被忽略，则返回 true</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> BeforeUpdate(tx *gorm.DB) (err <span class="type">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果 Role 字段有变更</span></span><br><span class="line">    <span class="keyword">if</span> tx.Statement.Changed(<span class="string">&quot;Role&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">&quot;role not allowed to change&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> tx.Statement.Changed(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Admin&quot;</span>) &#123; <span class="comment">// 如果 Name 或 Role 字段有变更</span></span><br><span class="line">    tx.Statement.SetColumn(<span class="string">&quot;Age&quot;</span>, <span class="number">18</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果任意字段有变更</span></span><br><span class="line">    <span class="keyword">if</span> tx.Statement.Changed() &#123;</span><br><span class="line">        tx.Statement.SetColumn(<span class="string">&quot;RefreshedAt&quot;</span>, time.Now())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu2&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; true</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; false, 因为 `Name` 没有变更</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Select(<span class="string">&quot;Admin&quot;</span>).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu2&quot;</span>, <span class="string">&quot;admin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; false, 因为 `Name` 没有被 Select 选中并更新</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Updates(User&#123;Name: <span class="string">&quot;jinzhu2&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; true</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Updates(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; false, 因为 `Name` 没有变更</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Select(<span class="string">&quot;Admin&quot;</span>).Updates(User&#123;Name: <span class="string">&quot;jinzhu2&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// Changed(&quot;Name&quot;) =&gt; false, 因为 `Name` 没有被 Select 选中并更新</span></span><br></pre></td></tr></table></figure><h3 id="在-Update-时修改值"><a href="#在-Update-时修改值" class="headerlink" title="在 Update 时修改值"></a>在 Update 时修改值</h3><p>若要在 Before 钩子中改变要更新的值，如果它是一个完整的更新，可以使用<br><code>Save</code>；否则，应该使用 <code>SetColumn</code> ，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user *User)</span></span> BeforeSave(tx *gorm.DB) (err <span class="type">error</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> pw, err := bcrypt.GenerateFromPassword(user.Password, <span class="number">0</span>); err == <span class="literal">nil</span> &#123;</span><br><span class="line">    tx.Statement.SetColumn(<span class="string">&quot;EncryptedPassword&quot;</span>, pw)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> tx.Statement.Changed(<span class="string">&quot;Code&quot;</span>) &#123;</span><br><span class="line">    s.Age += <span class="number">20</span></span><br><span class="line">    tx.Statement.SetColumn(<span class="string">&quot;Age&quot;</span>, s.Age+<span class="number">20</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="gorm删除"><a href="#gorm删除" class="headerlink" title="gorm删除"></a>gorm删除</h1><h2 id="删除一条记录"><a href="#删除一条记录" class="headerlink" title="删除一条记录"></a>删除一条记录</h2><p>删除一条记录时，删除对象需要指定主键，否则会触发 批量 Delete，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Email 的 ID 是 `10`</span></span><br><span class="line">db.Delete(&amp;email)</span><br><span class="line"><span class="comment">// DELETE from emails where id = 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带额外条件的删除</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Delete(&amp;email)</span><br><span class="line"><span class="comment">// DELETE from emails where id = 10 AND name = &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure><h2 id="根据主键删除"><a href="#根据主键删除" class="headerlink" title="根据主键删除"></a>根据主键删除</h2><p>GORM<br>允许通过主键(可以是复合主键)和内联条件来删除对象，它可以使用数字（如以下例子。也可以使用字符串——译者注）。查看<br>查询-内联条件（Query Inline Conditions） 了解详情。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.Delete(&amp;User&#123;&#125;, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.Delete(&amp;User&#123;&#125;, <span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.Delete(&amp;users, []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id IN (1,2,3);</span></span><br></pre></td></tr></table></figure><h2 id="Delete-Hook"><a href="#Delete-Hook" class="headerlink" title="Delete Hook"></a>Delete Hook</h2><p>对于删除操作，GORM 支持 <code>BeforeDelete</code>、<code>AfterDelete</code><br>Hook，在删除记录时会调用这些方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> BeforeDelete(tx *gorm.DB) (err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> u.Role == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;admin user not allowed to delete&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><p>如果指定的值不包括主属性，那么 GORM<br>会执行批量删除，它将删除所有匹配的记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;email LIKE ?&quot;</span>, <span class="string">&quot;%jinzhu%&quot;</span>).Delete(&amp;Email&#123;&#125;)</span><br><span class="line"><span class="comment">// DELETE from emails where email LIKE &quot;%jinzhu%&quot;;</span></span><br><span class="line"></span><br><span class="line">db.Delete(&amp;Email&#123;&#125;, <span class="string">&quot;email LIKE ?&quot;</span>, <span class="string">&quot;%jinzhu%&quot;</span>)</span><br><span class="line"><span class="comment">// DELETE from emails where email LIKE &quot;%jinzhu%&quot;;</span></span><br></pre></td></tr></table></figure><h3 id="阻止全局删除"><a href="#阻止全局删除" class="headerlink" title="阻止全局删除"></a>阻止全局删除</h3><p>如果在没有任何条件的情况下执行批量删除，GORM 不会执行该操作，并返回<br><code>ErrMissingWhereClause</code> 错误</p><p>对此，你必须加一些条件，或者使用原生 SQL，或者启用 <code>AllowGlobalUpdate</code><br>模式，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.Delete(&amp;User&#123;&#125;).Error <span class="comment">// gorm.ErrMissingWhereClause</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;1 = 1&quot;</span>).Delete(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// DELETE FROM `users` WHERE 1=1</span></span><br><span class="line"></span><br><span class="line">db.Exec(<span class="string">&quot;DELETE FROM users&quot;</span>)</span><br><span class="line"><span class="comment">// DELETE FROM users</span></span><br><span class="line"></span><br><span class="line">db.Session(&amp;gorm.Session&#123;AllowGlobalUpdate: <span class="literal">true</span>&#125;).Delete(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// DELETE FROM users</span></span><br></pre></td></tr></table></figure><h3 id="返回删除行的数据"><a href="#返回删除行的数据" class="headerlink" title="返回删除行的数据"></a>返回删除行的数据</h3><p>返回被删除的数据，仅适用于支持 Returning 的数据库，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回所有列</span></span><br><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line">DB.Clauses(clause.Returning&#123;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Delete(&amp;users)</span><br><span class="line"><span class="comment">// DELETE FROM `users` WHERE role = &quot;admin&quot; RETURNING *</span></span><br><span class="line"><span class="comment">// users =&gt; []User&#123;&#123;ID: 1, Name: &quot;jinzhu&quot;, Role: &quot;admin&quot;, Salary: 100&#125;, &#123;ID: 2, Name: &quot;jinzhu.2&quot;, Role: &quot;admin&quot;, Salary: 1000&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定的列</span></span><br><span class="line">DB.Clauses(clause.Returning&#123;Columns: []clause.Column&#123;&#123;Name: <span class="string">&quot;name&quot;</span>&#125;, &#123;Name: <span class="string">&quot;salary&quot;</span>&#125;&#125;&#125;).Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Delete(&amp;users)</span><br><span class="line"><span class="comment">// DELETE FROM `users` WHERE role = &quot;admin&quot; RETURNING `name`, `salary`</span></span><br><span class="line"><span class="comment">// users =&gt; []User&#123;&#123;ID: 0, Name: &quot;jinzhu&quot;, Role: &quot;&quot;, Salary: 100&#125;, &#123;ID: 0, Name: &quot;jinzhu.2&quot;, Role: &quot;&quot;, Salary: 1000&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h2><p>如果您的模型包含了一个 <code>gorm.deletedat</code> 字段（<code>gorm.Model</code><br>已经包含了该字段)，它将自动获得软删除的能力！</p><p>拥有软删除能力的模型调用 <code>Delete</code> 时，记录不会被数据库。但 GORM 会将<br><code>DeletedAt</code> 置为当前时间， 并且你不能再通过普通的查询方法找到该记录。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user 的 ID 是 `111`</span></span><br><span class="line">db.Delete(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line">db.Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">20</span>).Delete(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在查询时会忽略被软删除的记录</span></span><br><span class="line">db.Where(<span class="string">&quot;age = 20&quot;</span>).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;</span></span><br></pre></td></tr></table></figure><p>如果您不想引入 <code>gorm.Model</code>，您也可以这样启用软删除特性：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID      <span class="type">int</span></span><br><span class="line">  Deleted gorm.DeletedAt</span><br><span class="line">  Name    <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找被软删除的记录"><a href="#查找被软删除的记录" class="headerlink" title="查找被软删除的记录"></a>查找被软删除的记录</h3><p>您可以使用 <code>Unscoped</code> 找到被软删除的记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Unscoped().Where(<span class="string">&quot;age = 20&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></table></figure><h3 id="永久删除"><a href="#永久删除" class="headerlink" title="永久删除"></a>永久删除</h3><p>您也可以使用 <code>Unscoped</code> 永久删除匹配的记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Unscoped().Delete(&amp;order)</span><br><span class="line"><span class="comment">// DELETE FROM orders WHERE id=10;</span></span><br></pre></td></tr></table></figure><h3 id="Delete-Flag"><a href="#Delete-Flag" class="headerlink" title="Delete Flag"></a>Delete Flag</h3><p>将 unix 时间戳作为 delete flag</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/plugin/soft_delete&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">uint</span></span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  DeletedAt soft_delete.DeletedAt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line">SELECT * FROM users WHERE deleted_at = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">UPDATE users SET deleted_at = <span class="comment">/* current unix second */</span> WHERE ID = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>INFO</strong> 在配合 unique 字段使用软删除时，您需要使用这个基于 unix<br>时间戳的 <code>DeletedAt</code> 字段创建一个复合索引，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/plugin/soft_delete&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="type">uint</span></span><br><span class="line">Name      <span class="type">string</span>                <span class="string">`gorm:&quot;uniqueIndex:udx_name&quot;`</span></span><br><span class="line">DeletedAt soft_delete.DeletedAt <span class="string">`gorm:&quot;uniqueIndex:udx_name&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>使用 <code>1</code> &#x2F; <code>0</code> 作为 delete flag</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/plugin/soft_delete&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID    <span class="type">uint</span></span><br><span class="line">  Name  <span class="type">string</span></span><br><span class="line">  IsDel soft_delete.DeletedAt <span class="string">`gorm:&quot;softDelete:flag&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line">SELECT * FROM users WHERE is_del = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">UPDATE users SET is_del = <span class="number">1</span> WHERE ID = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="SQL-构建器"><a href="#SQL-构建器" class="headerlink" title="SQL 构建器"></a>SQL 构建器</h1><h2 id="原生-SQL"><a href="#原生-SQL" class="headerlink" title="原生 SQL"></a>原生 SQL</h2><p>原生查询 SQL 和 <code>Scan</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">  Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result Result</span><br><span class="line">db.Raw(<span class="string">&quot;SELECT id, name, age FROM users WHERE name = ?&quot;</span>, <span class="number">3</span>).Scan(&amp;result)</span><br><span class="line"></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT id, name, age FROM users WHERE name = ?&quot;</span>, <span class="number">3</span>).Scan(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT SUM(age) FROM users WHERE role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Scan(&amp;age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line">db.Raw(<span class="string">&quot;UPDATE users SET name = ? WHERE age = ? RETURNING id, name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>, <span class="number">20</span>).Scan(&amp;users)</span><br></pre></td></tr></table></figure><p><code>Exec</code> 原生 SQL</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Exec(<span class="string">&quot;DROP TABLE users&quot;</span>)</span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE orders SET shipped_at = ? WHERE id IN ?&quot;</span>, time.Now(), []<span class="type">int64</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exec with SQL Expression</span></span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE users SET money = ? WHERE name = ?&quot;</span>, gorm.Expr(<span class="string">&quot;money * ? + ?&quot;</span>, <span class="number">10000</span>, <span class="number">1</span>), <span class="string">&quot;jinzhu&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="命名参数-1"><a href="#命名参数-1" class="headerlink" title="命名参数"></a>命名参数</h2><p>GORM 支持 <code>sql.NamedArg</code>、<code>map[string]interface&#123;&#125;&#123;&#125;</code> 或 struct<br>形式的命名参数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name1 = @name OR name2 = @name&quot;</span>, sql.Named(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE name1 = &quot;jinzhu&quot; OR name2 = &quot;jinzhu&quot;</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;name1 = @name OR name2 = @name&quot;</span>, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu2&quot;</span>&#125;).First(&amp;result3)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE name1 = &quot;jinzhu2&quot; OR name2 = &quot;jinzhu2&quot; ORDER BY `users`.`id` LIMIT 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生 SQL 及命名参数</span></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT * FROM users WHERE name1 = @name OR name2 = @name2 OR name3 = @name&quot;</span>,</span><br><span class="line">   sql.Named(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu1&quot;</span>), sql.Named(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;jinzhu2&quot;</span>)).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name1 = &quot;jinzhu1&quot; OR name2 = &quot;jinzhu2&quot; OR name3 = &quot;jinzhu1&quot;</span></span><br><span class="line"></span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE users SET name1 = @name, name2 = @name2, name3 = @name&quot;</span>,</span><br><span class="line">   sql.Named(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhunew&quot;</span>), sql.Named(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;jinzhunew2&quot;</span>))</span><br><span class="line"><span class="comment">// UPDATE users SET name1 = &quot;jinzhunew&quot;, name2 = &quot;jinzhunew2&quot;, name3 = &quot;jinzhunew&quot;</span></span><br><span class="line"></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT * FROM users WHERE (name1 = @name AND name3 = @name) AND name2 = @name2&quot;</span>,</span><br><span class="line">   <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;name2&quot;</span>: <span class="string">&quot;jinzhu2&quot;</span>&#125;).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE (name1 = &quot;jinzhu&quot; AND name3 = &quot;jinzhu&quot;) AND name2 = &quot;jinzhu2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NamedArgument <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Name2 <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT * FROM users WHERE (name1 = @Name AND name3 = @Name) AND name2 = @Name2&quot;</span>,</span><br><span class="line">     NamedArgument&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Name2: <span class="string">&quot;jinzhu2&quot;</span>&#125;).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE (name1 = &quot;jinzhu&quot; AND name3 = &quot;jinzhu&quot;) AND name2 = &quot;jinzhu2&quot;</span></span><br></pre></td></tr></table></figure><h2 id="DryRun-模式"><a href="#DryRun-模式" class="headerlink" title="DryRun 模式"></a>DryRun 模式</h2><p>在不执行的情况下生成 <code>SQL</code> 及其参数，可以用于准备或测试生成的 SQL</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stmt := db.Session(&amp;Session&#123;DryRun: <span class="literal">true</span>&#125;).First(&amp;user, <span class="number">1</span>).Statement</span><br><span class="line">stmt.SQL.String() <span class="comment">//=&gt; SELECT * FROM `users` WHERE `id` = $1 ORDER BY `id`</span></span><br><span class="line">stmt.Vars         <span class="comment">//=&gt; []interface&#123;&#125;&#123;1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ToSQL"><a href="#ToSQL" class="headerlink" title="ToSQL"></a>ToSQL</h2><p>返回生成的 <code>SQL</code> 但不执行。</p><p>GORM使用 database&#x2F;sql 的参数占位符来构建 SQL<br>语句，它会自动转义参数以避免 SQL 注入，但我们不保证生成 SQL<br>的安全，请只用于调试。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gosql := DB.ToSQL(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">  <span class="keyword">return</span> tx.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;id = ?&quot;</span>, <span class="number">100</span>).Limit(<span class="number">10</span>).Order(<span class="string">&quot;age desc&quot;</span>).Find(&amp;[]User&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">sql <span class="comment">//=&gt; SELECT * FROM &quot;users&quot; WHERE id = 100 AND &quot;users&quot;.&quot;deleted_at&quot; IS NULL ORDER BY age desc LIMIT 10</span></span><br></pre></td></tr></table></figure><h2 id="Row-amp-Rows"><a href="#Row-amp-Rows" class="headerlink" title="Row &amp; Rows"></a><code>Row</code> &amp; <code>Rows</code></h2><p>获取 <code>*sql.Row</code> 结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 GORM API 构建 SQL</span></span><br><span class="line">row := db.Table(<span class="string">&quot;users&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).Row()</span><br><span class="line">row.Scan(&amp;name, &amp;age)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用原生 SQL</span></span><br><span class="line">row := db.Raw(<span class="string">&quot;select name, age, email from users where name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Row()</span><br><span class="line">row.Scan(&amp;name, &amp;age, &amp;email)</span><br></pre></td></tr></table></figure><p>获取 <code>*sql.Rows</code> 结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 GORM API 构建 SQL</span></span><br><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age, email&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  rows.Scan(&amp;name, &amp;age, &amp;email)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 业务逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生 SQL</span></span><br><span class="line">rows, err := db.Raw(<span class="string">&quot;select name, age, email from users where name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  rows.Scan(&amp;name, &amp;age, &amp;email)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 业务逻辑...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转到 FindInBatches 获取如何在批量中查询和处理记录的信息， 转到 Group<br>条件 获取如何构建复杂 SQL 查询的信息</p><h2 id="将-sql-Rows-扫描至-model"><a href="#将-sql-Rows-扫描至-model" class="headerlink" title="将 sql.Rows 扫描至 model"></a>将 <code>sql.Rows</code> 扫描至 model</h2><p>使用 <code>ScanRows</code> 将一行记录扫描至 struct，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age, email&quot;</span>).Rows() <span class="comment">// (*sql.Rows, error)</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user User</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  <span class="comment">// ScanRows 将一行扫描至 user</span></span><br><span class="line">  db.ScanRows(rows, &amp;user)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 业务逻辑...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>在同一个 db tcp 连接中运行多个 SQL（不在事务中）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Connection(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">  tx.Exec(<span class="string">&quot;SET my.role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line"></span><br><span class="line">  tx.First(&amp;User&#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h2><h3 id="子句（Clause）"><a href="#子句（Clause）" class="headerlink" title="子句（Clause）"></a>子句（Clause）</h3><p>GORM 使用 SQL builder 在内部生成 SQL，对于每个操作，GORM<br>创建一个<code>*gorm.Statement</code>对象，所有 GORM API<br>添加&#x2F;更改<code>Clause</code>，<code>Statement</code>最后，GORM 基于这些子句生成 SQL</p><p>例如，当使用 查询时<code>First</code>，它将以下子句添加到<code>Statement</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clause.Select&#123;Columns: <span class="string">&quot;*&quot;</span>&#125;</span><br><span class="line">clause.From&#123;Tables: clause.CurrentTable&#125;</span><br><span class="line">clause.Limit&#123;Limit: <span class="number">1</span>&#125;</span><br><span class="line">clause.OrderByColumn&#123;</span><br><span class="line">  Column: clause.Column&#123;Table: clause.CurrentTable, Name: clause.PrimaryKey&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 GORM 构建最终在<code>Query</code>回调中查询 SQL，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement.Build(<span class="string">&quot;SELECT&quot;</span>, <span class="string">&quot;FROM&quot;</span>, <span class="string">&quot;WHERE&quot;</span>, <span class="string">&quot;GROUP BY&quot;</span>, <span class="string">&quot;ORDER BY&quot;</span>, <span class="string">&quot;LIMIT&quot;</span>, <span class="string">&quot;FOR&quot;</span>)</span><br></pre></td></tr></table></figure><p>生成SQL：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM <span class="string">`users`</span> ORDER BY <span class="string">`users`</span>.<span class="string">`id`</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure><p>你可以定义自己的Clause并与 GORM 一起使用，它需要实现接口</p><h3 id="子句构造器"><a href="#子句构造器" class="headerlink" title="子句构造器"></a>子句构造器</h3><p>对于不同的数据库，子句可能会产生不同的 SQL，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Offset(<span class="number">10</span>).Limit(<span class="number">5</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// Generated for SQL Server</span></span><br><span class="line"><span class="comment">// SELECT * FROM &quot;users&quot; OFFSET 10 ROW FETCH NEXT 5 ROWS ONLY</span></span><br><span class="line"><span class="comment">// Generated for MySQL</span></span><br><span class="line"><span class="comment">// SELECT * FROM `users` LIMIT 5 OFFSET 10</span></span><br></pre></td></tr></table></figure><p>支持是因为 GORM 允许数据库驱动注册 Clause Builder<br>替换默认的，以Limit为例</p><h3 id="子句选项"><a href="#子句选项" class="headerlink" title="子句选项"></a>子句选项</h3><p>GORM 定义了许多子句，并且一些子句提供了可用于您的应用程序的高级选项</p><p>尽管它们中的大多数很少使用，但如果您发现 GORM 公共 API<br>无法满足您的要求，不妨检查一下，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Clauses(clause.Insert&#123;Modifier: <span class="string">&quot;IGNORE&quot;</span>&#125;).Create(&amp;user)</span><br><span class="line"><span class="comment">// INSERT IGNORE INTO users (name,age...) VALUES (&quot;jinzhu&quot;,18...);</span></span><br></pre></td></tr></table></figure><h3 id="语句修饰符"><a href="#语句修饰符" class="headerlink" title="语句修饰符"></a>语句修饰符</h3><p>GORM 提供接口StatementModifier允许您修改语句以匹配您的要求，以Hints为例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/hints&quot;</span></span><br><span class="line"></span><br><span class="line">db.Clauses(hints.New(<span class="string">&quot;hint&quot;</span>)).Find(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * /*+ hint */ FROM `users`</span></span><br></pre></td></tr></table></figure><h1 id="Belongs-To"><a href="#Belongs-To" class="headerlink" title="Belongs To"></a>Belongs To</h1><h2 id="Belongs-To-1"><a href="#Belongs-To-1" class="headerlink" title="Belongs To"></a>Belongs To</h2><p><code>belongs to</code> 会与另一个模型建立了一对一的连接。<br>这种模型的每一个实例都”属于”另一个模型的一个实例。</p><p>例如，您的应用包含 user 和 company，并且每个 user 能且只能被分配给一个<br>company。下面的类型就表示这种关系。 注意，在 <code>User</code> 对象中，有一个和<br><code>Company</code> 一样的 <code>CompanyID</code>。 默认情况下， <code>CompanyID</code> 被隐含地用来在<br><code>User</code> 和 <code>Company</code> 之间创建一个外键关系， 因此必须包含在 <code>User</code><br>结构体中才能填充 <code>Company</code> 内部结构体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `User` 属于 `Company`，`CompanyID` 是外键</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  CompanyID <span class="type">int</span></span><br><span class="line">  Company   Company</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Company <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写外键"><a href="#重写外键" class="headerlink" title="重写外键"></a>重写外键</h2><p>要定义一个 belongs to<br>关系，数据库的表中必须存在外键。默认情况下，外键的名字，使用拥有者的类型名称加上表的主键的字段名字</p><p>例如，定义一个User实体属于Company实体，那么外键的名字一般使用CompanyID。</p><p>GORM同时提供自定义外键名字的方式，如下例所示。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name         <span class="type">string</span></span><br><span class="line">  CompanyRefer <span class="type">int</span></span><br><span class="line">  Company      Company <span class="string">`gorm:&quot;foreignKey:CompanyRefer&quot;`</span></span><br><span class="line">  <span class="comment">// 使用 CompanyRefer 作为外键</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Company <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写引用"><a href="#重写引用" class="headerlink" title="重写引用"></a>重写引用</h2><p>对于 belongs to 关系，GORM<br>通常使用数据库表，主表（拥有者）的主键值作为外键参考。<br>正如上面的例子，我们使用主表Company中的主键字段ID作为外键的参考值。</p><p>如果在Company实体中设置了User实体，那么GORM会自动把Company中的ID属性保存到User的CompanyID属性中。</p><p>同样的，您也可以使用标签 <code>references</code> 来更改它，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  CompanyID <span class="type">string</span></span><br><span class="line">  Company   Company <span class="string">`gorm:&quot;references:Code&quot;`</span> <span class="comment">// 使用 Code 作为引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Company <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Code <span class="type">string</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Belongs-to-的-CRUD"><a href="#Belongs-to-的-CRUD" class="headerlink" title="Belongs to 的 CRUD"></a>Belongs to 的 CRUD</h2><p>点击 关联模式 链接获取 belongs to 相关的用法</p><h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><p>GORM允许通过使用<code>Preload</code>或者<code>Joins</code>来主动加载实体的关联关系，具体内容请参考，预加载（主动加载）</p><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>你可以通过<code>OnUpdate</code>,<br><code>OnDelete</code>配置标签来增加关联关系的级联操作，如下面的例子，通过GORM可以完成用户和公司的级联更新和级联删除操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  CompanyID <span class="type">int</span></span><br><span class="line">  Company   Company <span class="string">`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Company <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gorm-Has-One关系"><a href="#gorm-Has-One关系" class="headerlink" title="gorm Has One关系"></a>gorm Has One关系</h1><h2 id="Has-One"><a href="#Has-One" class="headerlink" title="Has One"></a>Has One</h2><p><code>has one</code> 与另一个模型建立一对一的关联，但它和一对一关系有些许不同。<br>这种关联表明一个模型的每个实例都包含或拥有另一个模型的一个实例。</p><p>例如，您的应用包含 user 和 credit card 模型，且每个 user 只能有一张<br>credit card。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 有一张 CreditCard，UserID 是外键</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCard CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number <span class="type">string</span></span><br><span class="line">  UserID <span class="type">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写外键-1"><a href="#重写外键-1" class="headerlink" title="重写外键"></a>重写外键</h2><p>对于 <code>has one</code><br>关系，同样必须存在外键字段。拥有者将把属于它的模型的主键保存到这个字段。</p><p>这个字段的名称通常由 <code>has one</code> 模型的类型加上其 <code>主键</code><br>生成，对于上面的例子，它是 <code>UserID</code>。</p><p>为 user 添加 credit card 时，它会将 user 的 <code>ID</code> 保存到自己的 <code>UserID</code><br>字段。</p><p>如果你想要使用另一个字段来保存该关系，你同样可以使用标签 <code>foreignKey</code><br>来更改它，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCard CreditCard <span class="string">`gorm:&quot;foreignKey:UserName&quot;`</span></span><br><span class="line">  <span class="comment">// 使用 UserName 作为外键</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number   <span class="type">string</span></span><br><span class="line">  UserName <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写引用-1"><a href="#重写引用-1" class="headerlink" title="重写引用"></a>重写引用</h2><p>默认情况下，拥有者实体会将 <code>has one</code><br>对应模型的主键保存为外键，您也可以修改它，用另一个字段来保存，例如下个这个使用<br><code>Name</code> 来保存的例子。</p><p>您可以使用标签 <code>references</code> 来更改它，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name       <span class="type">string</span>     <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line">  CreditCard CreditCard <span class="string">`gorm:&quot;foreignkey:UserName;references:name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number   <span class="type">string</span></span><br><span class="line">  UserName <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态关联"><a href="#多态关联" class="headerlink" title="多态关联"></a>多态关联</h2><p>GORM 为 <code>has one</code> 和 <code>has many</code><br>提供了多态关联支持，它会将拥有者实体的表名、主键值都保存到多态类型的字段中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID    <span class="type">int</span></span><br><span class="line">  Name  <span class="type">string</span></span><br><span class="line">  Toy   Toy <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">  Toy  Toy <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Toy <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">int</span></span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  OwnerID   <span class="type">int</span></span><br><span class="line">  OwnerType <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;Dog&#123;Name: <span class="string">&quot;dog1&quot;</span>, Toy: Toy&#123;Name: <span class="string">&quot;toy1&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `dogs` (`name`) VALUES (&quot;dog1&quot;)</span></span><br><span class="line"><span class="comment">// INSERT INTO `toys` (`name`,`owner_id`,`owner_type`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;dogs&quot;)</span></span><br></pre></td></tr></table></figure><p>您可以使用标签 <code>polymorphicValue</code> 来更改多态类型的值，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">  Toy  Toy <span class="string">`gorm:&quot;polymorphic:Owner;polymorphicValue:master&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Toy <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">int</span></span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  OwnerID   <span class="type">int</span></span><br><span class="line">  OwnerType <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;Dog&#123;Name: <span class="string">&quot;dog1&quot;</span>, Toy: Toy&#123;Name: <span class="string">&quot;toy1&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `dogs` (`name`) VALUES (&quot;dog1&quot;)</span></span><br><span class="line"><span class="comment">// INSERT INTO `toys` (`name`,`owner_id`,`owner_type`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;master&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="Has-One-的-CURD"><a href="#Has-One-的-CURD" class="headerlink" title="Has One 的 CURD"></a>Has One 的 CURD</h2><h2 id="预加载-1"><a href="#预加载-1" class="headerlink" title="预加载"></a>预加载</h2><p>GORM 可以通过 <code>Preload</code>、<code>Joins</code> 预加载 <code>has one</code> 关联的记录，查看<br>预加载 获取详情</p><h2 id="自引用-Has-One"><a href="#自引用-Has-One" class="headerlink" title="自引用 Has One"></a>自引用 Has One</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  ManagerID *<span class="type">uint</span></span><br><span class="line">  Manager   *User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外键约束-1"><a href="#外键约束-1" class="headerlink" title="外键约束"></a>外键约束</h2><p>你可以通过为标签 <code>constraint</code> 配置 <code>OnUpdate</code>、<code>OnDelete</code><br>实现外键约束，在使用 GORM 进行迁移时它会被创建，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCard CreditCard <span class="string">`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number <span class="type">string</span></span><br><span class="line">  UserID <span class="type">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以在删除记录时通过 <code>Select</code> 来删除关联的记录，查看 Delete with<br>Select 获取详情</p><h1 id="gorm-Has-Many关系"><a href="#gorm-Has-Many关系" class="headerlink" title="gorm Has Many关系"></a>gorm Has Many关系</h1><h2 id="Has-Many"><a href="#Has-Many" class="headerlink" title="Has Many"></a>Has Many</h2><p><code>has many</code> 与另一个模型建立了一对多的连接。 不同于<br><code>has one</code>，拥有者可以有零或多个关联模型。</p><p>例如，您的应用包含 user 和 credit card 模型，且每个 user 可以有多张<br>credit card。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 有多张 CreditCard，UserID 是外键</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCards []CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number <span class="type">string</span></span><br><span class="line">  UserID <span class="type">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写外键-2"><a href="#重写外键-2" class="headerlink" title="重写外键"></a>重写外键</h2><p>要定义 <code>has many</code> 关系，同样必须存在外键。<br>默认的外键名是拥有者的类型名加上其主键字段名</p><p>例如，要定义一个属于 <code>User</code> 的模型，则其外键应该是 <code>UserID</code>。</p><p>此外，想要使用另一个字段作为外键，您可以使用 <code>foreignKey</code> 标签自定义它：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCards []CreditCard <span class="string">`gorm:&quot;foreignKey:UserRefer&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number    <span class="type">string</span></span><br><span class="line">  UserRefer <span class="type">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写引用-2"><a href="#重写引用-2" class="headerlink" title="重写引用"></a>重写引用</h2><p>GORM 通常使用拥有者的主键作为外键的值。 对于上面的例子，它是 <code>User</code> 的<br><code>ID</code> 字段。</p><p>为 user 添加 credit card 时，GORM 会将 user 的 <code>ID</code> 字段保存到 credit<br>card 的 <code>UserID</code> 字段。</p><p>同样的，您也可以使用标签 <code>references</code> 来更改它，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  MemberNumber <span class="type">string</span></span><br><span class="line">  CreditCards  []CreditCard <span class="string">`gorm:&quot;foreignKey:UserNumber;references:MemberNumber&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number     <span class="type">string</span></span><br><span class="line">  UserNumber <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态关联-1"><a href="#多态关联-1" class="headerlink" title="多态关联"></a>多态关联</h2><p>GORM 为 <code>has one</code> 和 <code>has many</code><br>提供了多态关联支持，它会将拥有者实体的表名、主键都保存到多态类型的字段中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">  Toys []Toy <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Toy <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">int</span></span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  OwnerID   <span class="type">int</span></span><br><span class="line">  OwnerType <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;Dog&#123;Name: <span class="string">&quot;dog1&quot;</span>, Toys: []Toy&#123;&#123;Name: <span class="string">&quot;toy1&quot;</span>&#125;, &#123;Name: <span class="string">&quot;toy2&quot;</span>&#125;&#125;&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `dogs` (`name`) VALUES (&quot;dog1&quot;)</span></span><br><span class="line"><span class="comment">// INSERT INTO `toys` (`name`,`owner_id`,`owner_type`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;dogs&quot;), (&quot;toy2&quot;,&quot;1&quot;,&quot;dogs&quot;)</span></span><br></pre></td></tr></table></figure><p>您可以使用标签 <code>polymorphicValue</code> 来更改多态类型的值，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">  Toys []Toy <span class="string">`gorm:&quot;polymorphic:Owner;polymorphicValue:master&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Toy <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">int</span></span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  OwnerID   <span class="type">int</span></span><br><span class="line">  OwnerType <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;Dog&#123;Name: <span class="string">&quot;dog1&quot;</span>, Toys: []Toy&#123;&#123;Name: <span class="string">&quot;toy1&quot;</span>&#125;, &#123;Name: <span class="string">&quot;toy2&quot;</span>&#125;&#125;&#125;)</span><br><span class="line"><span class="comment">// INSERT INTO `dogs` (`name`) VALUES (&quot;dog1&quot;)</span></span><br><span class="line"><span class="comment">// INSERT INTO `toys` (`name`,`owner_id`,`owner_type`) VALUES (&quot;toy1&quot;,&quot;1&quot;,&quot;master&quot;), (&quot;toy2&quot;,&quot;1&quot;,&quot;master&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="Has-Many-的-CURD"><a href="#Has-Many-的-CURD" class="headerlink" title="Has Many 的 CURD"></a>Has Many 的 CURD</h2><p>查看 关联模式 获取 has many 相关的用法</p><h2 id="预加载-2"><a href="#预加载-2" class="headerlink" title="预加载"></a>预加载</h2><p>GORM 可以通过 <code>Preload</code> 预加载 has many 关联的记录，查看 预加载 获取详情</p><h2 id="自引用-Has-Many"><a href="#自引用-Has-Many" class="headerlink" title="自引用 Has Many"></a>自引用 Has Many</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  ManagerID *<span class="type">uint</span></span><br><span class="line">  Team      []User <span class="string">`gorm:&quot;foreignkey:ManagerID&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外键约束-2"><a href="#外键约束-2" class="headerlink" title="外键约束"></a>外键约束</h2><p>你可以通过为标签 <code>constraint</code> 配置 <code>OnUpdate</code>、<code>OnDelete</code><br>实现外键约束，在使用 GORM 进行迁移时它会被创建，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  CreditCards []CreditCard <span class="string">`gorm:&quot;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Number <span class="type">string</span></span><br><span class="line">  UserID <span class="type">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以在删除记录时通过 <code>Select</code> 来删除 has many 关联的记录，查看<br>Delete with Select 获取详情</p><h1 id="gorm-Many-To-Many关系"><a href="#gorm-Many-To-Many关系" class="headerlink" title="gorm Many To Many关系"></a>gorm Many To Many关系</h1><h2 id="Many-To-Many"><a href="#Many-To-Many" class="headerlink" title="Many To Many"></a>Many To Many</h2><p>Many to Many 会在两个 model 中添加一张连接表。</p><p>例如，您的应用包含了 user 和 language，且一个 user 可以说多种<br>language，多个 user 也可以说一种 language。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 拥有并属于多种 language，`user_languages` 是连接表</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用 GORM 的 <code>AutoMigrate</code> 为 <code>User</code> 创建表时，GORM 会自动创建连接表</p><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 拥有并属于多种 language，`user_languages` 是连接表</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []*Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">  Users []*User <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写外键-3"><a href="#重写外键-3" class="headerlink" title="重写外键"></a>重写外键</h2><p>对于 <code>many2many</code> 关系，连接表会同时拥有两个模型的外键，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：user_languages</span></span><br><span class="line"><span class="comment">//   foreign key: user_id, reference: users.id</span></span><br><span class="line"><span class="comment">//   foreign key: language_id, reference: languages.id</span></span><br></pre></td></tr></table></figure><p>若要重写它们，可以使用标签<br><code>foreignKey</code>、<code>references</code>、<code>joinforeignKey</code>、<code>joinReferences</code>。当然，您不需要使用全部的标签，你可以仅使用其中的一个重写部分的外键、引用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Profiles []Profile <span class="string">`gorm:&quot;many2many:user_profiles;foreignKey:Refer;joinForeignKey:UserReferID;References:UserRefer;joinReferences:ProfileRefer&quot;`</span></span><br><span class="line">    Refer    <span class="type">uint</span>      <span class="string">`gorm:&quot;index:,unique&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Name      <span class="type">string</span></span><br><span class="line">    UserRefer <span class="type">uint</span> <span class="string">`gorm:&quot;index:,unique&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会创建连接表：user_profiles</span></span><br><span class="line"><span class="comment">//   foreign key: user_refer_id, reference: users.refer</span></span><br><span class="line"><span class="comment">//   foreign key: profile_refer, reference: profiles.user_refer</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><br>某些数据库只允许在唯一索引字段上创建外键，如果您在迁移时会创建外键，则需要指定<br><code>unique index</code> 标签。</p></blockquote><h2 id="自引用-Many2Many"><a href="#自引用-Many2Many" class="headerlink" title="自引用 Many2Many"></a>自引用 Many2Many</h2><p>自引用 many2many 关系</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">    Friends []*User <span class="string">`gorm:&quot;many2many:user_friends&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会创建连接表：user_friends</span></span><br><span class="line"><span class="comment">//   foreign key: user_id, reference: users.id</span></span><br><span class="line"><span class="comment">//   foreign key: friend_id, reference: users.id</span></span><br></pre></td></tr></table></figure><h2 id="预加载-3"><a href="#预加载-3" class="headerlink" title="预加载"></a>预加载</h2><p>GORM 可以通过 <code>Preload</code> 预加载 has many 关联的记录，查看 预加载 获取详情</p><h2 id="Many2Many-的-CURD"><a href="#Many2Many-的-CURD" class="headerlink" title="Many2Many 的 CURD"></a>Many2Many 的 CURD</h2><p>查看 关联模式 获取 many2many 相关的用法</p><h2 id="自定义连接表"><a href="#自定义连接表" class="headerlink" title="自定义连接表"></a>自定义连接表</h2><p><code>连接表</code> 可以是一个全功能的模型，支持<br><code>Soft Delete</code>、<code>钩子</code>、更多的字段，就跟其它模型一样。您可以通过<br><code>SetupJoinTable</code> 指定它，例如：</p><blockquote><p><strong>注意：</strong> 自定义连接表要求外键是复合主键或复合唯一索引</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">int</span></span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  Addresses []Address <span class="string">`gorm:&quot;many2many:person_addresses;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">uint</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonAddress <span class="keyword">struct</span> &#123;</span><br><span class="line">  PersonID  <span class="type">int</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  AddressID <span class="type">int</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  DeletedAt gorm.DeletedAt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(PersonAddress)</span></span> BeforeCreate(db *gorm.DB) <span class="type">error</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 Person 的 Addresses 字段的连接表为 PersonAddress</span></span><br><span class="line"><span class="comment">// PersonAddress 必须定义好所需的外键，否则会报错</span></span><br><span class="line">err := db.SetupJoinTable(&amp;Person&#123;&#125;, <span class="string">&quot;Addresses&quot;</span>, &amp;PersonAddress&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="外键约束-3"><a href="#外键约束-3" class="headerlink" title="外键约束"></a>外键约束</h2><p>你可以通过为标签 <code>constraint</code> 配置 <code>OnUpdate</code>、<code>OnDelete</code><br>实现外键约束，在使用 GORM 进行迁移时它会被创建，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Languages []Language <span class="string">`gorm:&quot;many2many:user_speaks;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">  Code <span class="type">string</span> <span class="string">`gorm:&quot;primarykey&quot;`</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CREATE TABLE `user_speaks` (`user_id` integer,`language_code` text,PRIMARY KEY (`user_id`,`language_code`),CONSTRAINT `fk_user_speaks_user` FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE SET NULL ON UPDATE CASCADE,CONSTRAINT `fk_user_speaks_language` FOREIGN KEY (`language_code`) REFERENCES `languages`(`code`) ON DELETE SET NULL ON UPDATE CASCADE);</span></span><br></pre></td></tr></table></figure><p>你也可以在删除记录时通过 <code>Select</code> 来删除 many2many 关系的记录，查看<br>Delete with Select 获取详情</p><h2 id="复合外键"><a href="#复合外键" class="headerlink" title="复合外键"></a>复合外键</h2><p>如果您的模型使用了 复合主键，GORM 会默认启用复合外键。</p><p>您也可以覆盖默认的外键、指定多个外键，只需用逗号分隔那些键名，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Tag <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID     <span class="type">uint</span>   <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Locale <span class="type">string</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Value  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blog <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID         <span class="type">uint</span>   <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Locale     <span class="type">string</span> <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  Subject    <span class="type">string</span></span><br><span class="line">  Body       <span class="type">string</span></span><br><span class="line">  Tags       []Tag <span class="string">`gorm:&quot;many2many:blog_tags;&quot;`</span></span><br><span class="line">  LocaleTags []Tag <span class="string">`gorm:&quot;many2many:locale_blog_tags;ForeignKey:id,locale;References:id&quot;`</span></span><br><span class="line">  SharedTags []Tag <span class="string">`gorm:&quot;many2many:shared_blog_tags;ForeignKey:id;References:id&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：blog_tags</span></span><br><span class="line"><span class="comment">//   foreign key: blog_id, reference: blogs.id</span></span><br><span class="line"><span class="comment">//   foreign key: blog_locale, reference: blogs.locale</span></span><br><span class="line"><span class="comment">//   foreign key: tag_id, reference: tags.id</span></span><br><span class="line"><span class="comment">//   foreign key: tag_locale, reference: tags.locale</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：locale_blog_tags</span></span><br><span class="line"><span class="comment">//   foreign key: blog_id, reference: blogs.id</span></span><br><span class="line"><span class="comment">//   foreign key: blog_locale, reference: blogs.locale</span></span><br><span class="line"><span class="comment">//   foreign key: tag_id, reference: tags.id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接表：shared_blog_tags</span></span><br><span class="line"><span class="comment">//   foreign key: blog_id, reference: blogs.id</span></span><br><span class="line"><span class="comment">//   foreign key: tag_id, reference: tags.id</span></span><br></pre></td></tr></table></figure><h1 id="gorm-实体关联"><a href="#gorm-实体关联" class="headerlink" title="gorm 实体关联"></a>gorm 实体关联</h1><h2 id="自动创建、更新"><a href="#自动创建、更新" class="headerlink" title="自动创建、更新"></a>自动创建、更新</h2><p>在创建、更新记录时，GORM 会通过 Upsert 自动保存关联及其引用记录。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;</span><br><span class="line">  Name:            <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  BillingAddress:  Address&#123;Address1: <span class="string">&quot;Billing Address - Address 1&quot;</span>&#125;,</span><br><span class="line">  ShippingAddress: Address&#123;Address1: <span class="string">&quot;Shipping Address - Address 1&quot;</span>&#125;,</span><br><span class="line">  Emails:          []Email&#123;</span><br><span class="line">    &#123;Email: <span class="string">&quot;jinzhu@example.com&quot;</span>&#125;,</span><br><span class="line">    &#123;Email: <span class="string">&quot;jinzhu-2@example.com&quot;</span>&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  Languages:       []Language&#123;</span><br><span class="line">    &#123;Name: <span class="string">&quot;ZH&quot;</span>&#125;,</span><br><span class="line">    &#123;Name: <span class="string">&quot;EN&quot;</span>&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;user)</span><br><span class="line"><span class="comment">// BEGIN TRANSACTION;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Billing Address - Address 1&quot;), (&quot;Shipping Address - Address 1&quot;) ON DUPLICATE KEY DO NOTHING;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name,billing_address_id,shipping_address_id) VALUES (&quot;jinzhu&quot;, 1, 2);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu@example.com&quot;), (111, &quot;jinzhu-2@example.com&quot;) ON DUPLICATE KEY DO NOTHING;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;languages&quot; (&quot;name&quot;) VALUES (&#x27;ZH&#x27;), (&#x27;EN&#x27;) ON DUPLICATE KEY DO NOTHING;</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;user_languages&quot; (&quot;user_id&quot;,&quot;language_id&quot;) VALUES (111, 1), (111, 2) ON DUPLICATE KEY DO NOTHING;</span></span><br><span class="line"><span class="comment">// COMMIT;</span></span><br><span class="line"></span><br><span class="line">db.Save(&amp;user)</span><br></pre></td></tr></table></figure><p>如果您想要更新关联的数据，您应该使用 <code>FullSaveAssociations</code> 模式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;FullSaveAssociations: <span class="literal">true</span>&#125;).Updates(&amp;user)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Billing Address - Address 1&quot;), (&quot;Shipping Address - Address 1&quot;) ON DUPLICATE KEY SET address1=VALUES(address1);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name,billing_address_id,shipping_address_id) VALUES (&quot;jinzhu&quot;, 1, 2);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu@example.com&quot;), (111, &quot;jinzhu-2@example.com&quot;) ON DUPLICATE KEY SET email=VALUES(email);</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="跳过自动创建、更新"><a href="#跳过自动创建、更新" class="headerlink" title="跳过自动创建、更新"></a>跳过自动创建、更新</h2><p>若要在创建、更新时跳过自动保存，您可以使用 <code>Select</code> 或 <code>Omit</code>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;</span><br><span class="line">  Name:            <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  BillingAddress:  Address&#123;Address1: <span class="string">&quot;Billing Address - Address 1&quot;</span>&#125;,</span><br><span class="line">  ShippingAddress: Address&#123;Address1: <span class="string">&quot;Shipping Address - Address 1&quot;</span>&#125;,</span><br><span class="line">  Emails:          []Email&#123;</span><br><span class="line">    &#123;Email: <span class="string">&quot;jinzhu@example.com&quot;</span>&#125;,</span><br><span class="line">    &#123;Email: <span class="string">&quot;jinzhu-2@example.com&quot;</span>&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  Languages:       []Language&#123;</span><br><span class="line">    &#123;Name: <span class="string">&quot;ZH&quot;</span>&#125;,</span><br><span class="line">    &#123;Name: <span class="string">&quot;EN&quot;</span>&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Select(<span class="string">&quot;Name&quot;</span>).Create(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name) VALUES (&quot;jinzhu&quot;, 1, 2);</span></span><br><span class="line"></span><br><span class="line">db.Omit(<span class="string">&quot;BillingAddress&quot;</span>).Create(&amp;user)</span><br><span class="line"><span class="comment">// Skip create BillingAddress when creating a user</span></span><br><span class="line"></span><br><span class="line">db.Omit(clause.Associations).Create(&amp;user)</span><br><span class="line"><span class="comment">// Skip all associations when creating a user</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>NOTE:</strong> 对于 many2many 关联，GORM 在创建连接表引用之前，会先 upsert<br>关联。如果你想跳过关联的 upsert，你可以这样做：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Omit(<span class="string">&quot;Languages.*&quot;</span>).Create(&amp;user)</span><br></pre></td></tr></table></figure><p>下面的代码将跳过创建关联及其引用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Omit(<span class="string">&quot;Languages&quot;</span>).Create(&amp;user)</span><br></pre></td></tr></table></figure></blockquote><h2 id="Select-x2F-Omit-关联字段"><a href="#Select-x2F-Omit-关联字段" class="headerlink" title="Select&#x2F;Omit 关联字段"></a>Select&#x2F;Omit 关联字段</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;</span><br><span class="line">  Name:            <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">  BillingAddress:  Address&#123;Address1: <span class="string">&quot;Billing Address - Address 1&quot;</span>, Address2: <span class="string">&quot;addr2&quot;</span>&#125;,</span><br><span class="line">  ShippingAddress: Address&#123;Address1: <span class="string">&quot;Shipping Address - Address 1&quot;</span>, Address2: <span class="string">&quot;addr2&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 user 及其 BillingAddress、ShippingAddress</span></span><br><span class="line"><span class="comment">// 在创建 BillingAddress 时，仅使用其 address1、address2 字段，忽略其它字段</span></span><br><span class="line">db.Select(<span class="string">&quot;BillingAddress.Address1&quot;</span>, <span class="string">&quot;BillingAddress.Address2&quot;</span>).Create(&amp;user)</span><br><span class="line"></span><br><span class="line">db.Omit(<span class="string">&quot;BillingAddress.Address2&quot;</span>, <span class="string">&quot;BillingAddress.CreatedAt&quot;</span>).Create(&amp;user)</span><br></pre></td></tr></table></figure><h2 id="关联模式"><a href="#关联模式" class="headerlink" title="关联模式"></a>关联模式</h2><p>关联模式包含一些在处理关系时有用的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始关联模式</span></span><br><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>)</span><br><span class="line"><span class="comment">// `user` 是源模型，它的主键不能为空</span></span><br><span class="line"><span class="comment">// 关系的字段名是 `Languages`</span></span><br><span class="line"><span class="comment">// 如果匹配了上面两个要求，会开始关联模式，否则会返回错误</span></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Error</span><br></pre></td></tr></table></figure><h3 id="查找关联"><a href="#查找关联" class="headerlink" title="查找关联"></a>查找关联</h3><p>查找所有匹配的关联记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Find(&amp;languages)</span><br></pre></td></tr></table></figure><p>查找带条件的关联</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">codes := []<span class="type">string</span>&#123;<span class="string">&quot;zh-CN&quot;</span>, <span class="string">&quot;en-US&quot;</span>, <span class="string">&quot;ja-JP&quot;</span>&#125;</span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;code IN ?&quot;</span>, codes).Association(<span class="string">&quot;Languages&quot;</span>).Find(&amp;languages)</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;code IN ?&quot;</span>, codes).Order(<span class="string">&quot;code desc&quot;</span>).Association(<span class="string">&quot;Languages&quot;</span>).Find(&amp;languages)</span><br></pre></td></tr></table></figure><h3 id="添加关联"><a href="#添加关联" class="headerlink" title="添加关联"></a>添加关联</h3><p>为 <code>many to many</code>、<code>has many</code> 添加新的关联；为 <code>has one</code>, <code>belongs to</code><br>替换当前的关联</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Append([]Language&#123;languageZH, languageEN&#125;)</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Append(&amp;Language&#123;Name: <span class="string">&quot;DE&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;CreditCard&quot;</span>).Append(&amp;CreditCard&#123;Number: <span class="string">&quot;411111111111&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="替换关联"><a href="#替换关联" class="headerlink" title="替换关联"></a>替换关联</h3><p>用一个新的关联替换当前的关联</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Replace([]Language&#123;languageZH, languageEN&#125;)</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Replace(Language&#123;Name: <span class="string">&quot;DE&quot;</span>&#125;, languageEN)</span><br></pre></td></tr></table></figure><h3 id="删除关联"><a href="#删除关联" class="headerlink" title="删除关联"></a>删除关联</h3><p>如果存在，则删除源模型与参数之间的关系，只会删除引用，不会从数据库中删除这些对象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Delete([]Language&#123;languageZH, languageEN&#125;)</span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Delete(languageZH, languageEN)</span><br></pre></td></tr></table></figure><h3 id="清空关联"><a href="#清空关联" class="headerlink" title="清空关联"></a>清空关联</h3><p>删除源模型与关联之间的所有引用，但不会删除这些关联</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Clear()</span><br></pre></td></tr></table></figure><h3 id="关联计数"><a href="#关联计数" class="headerlink" title="关联计数"></a>关联计数</h3><p>返回当前关联的计数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Count()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件计数</span></span><br><span class="line">codes := []<span class="type">string</span>&#123;<span class="string">&quot;zh-CN&quot;</span>, <span class="string">&quot;en-US&quot;</span>, <span class="string">&quot;ja-JP&quot;</span>&#125;</span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;code IN ?&quot;</span>, codes).Association(<span class="string">&quot;Languages&quot;</span>).Count()</span><br></pre></td></tr></table></figure><h3 id="批量处理数据"><a href="#批量处理数据" class="headerlink" title="批量处理数据"></a>批量处理数据</h3><p>关联模式也支持批量处理，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有用户的所有角色</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Role&quot;</span>).Find(&amp;roles)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从所有 team 中删除 user A</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Team&quot;</span>).Delete(&amp;userA)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取去重的用户所属 team 数量</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Team&quot;</span>).Count()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于批量数据的 `Append`、`Replace`，参数的长度必须与数据的长度相同，否则会返回 error</span></span><br><span class="line"><span class="keyword">var</span> users = []User&#123;user1, user2, user3&#125;</span><br><span class="line"><span class="comment">// 例如：现在有三个 user，Append userA 到 user1 的 team，Append userB 到 user2 的 team，Append userA、userB 和 userC 到 user3 的 team</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Team&quot;</span>).Append(&amp;userA, &amp;userB, &amp;[]User&#123;userA, userB, userC&#125;)</span><br><span class="line"><span class="comment">// 重置 user1 team 为 userA，重置 user2 的 team 为 userB，重置 user3 的 team 为 userA、 userB 和 userC</span></span><br><span class="line">db.Model(&amp;users).Association(<span class="string">&quot;Team&quot;</span>).Replace(&amp;userA, &amp;userB, &amp;[]User&#123;userA, userB, userC&#125;)</span><br></pre></td></tr></table></figure><h2 id="带-Select-的删除"><a href="#带-Select-的删除" class="headerlink" title="带 Select 的删除"></a>带 Select 的删除</h2><p>你可以在删除记录时通过 <code>Select</code> 来删除具有 has one、has many、many2many<br>关系的记录，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除 user 时，也删除 user 的 account</span></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Delete(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 user 时，也删除 user 的 Orders、CreditCards 记录</span></span><br><span class="line">db.Select(<span class="string">&quot;Orders&quot;</span>, <span class="string">&quot;CreditCards&quot;</span>).Delete(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 user 时，也删除用户所有 has one/many、many2many 记录</span></span><br><span class="line">db.Select(clause.Associations).Delete(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 users 时，也删除每一个 user 的 account</span></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Delete(&amp;users)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 只有当记录的主键不为空时，关联才会被删除，GORM<br>会使用这些主键作为条件来删除关联记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOESN&#x27;T WORK</span></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Delete(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">// 会删除所有 name=`jinzhu` 的 user，但这些 user 的 account 不会被删除</span></span><br><span class="line"></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Delete(&amp;User&#123;ID: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">// 会删除 name = `jinzhu` 且 id = `1` 的 user，并且 user `1` 的 account 也会被删除</span></span><br><span class="line"></span><br><span class="line">db.Select(<span class="string">&quot;Account&quot;</span>).Delete(&amp;User&#123;ID: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">// 会删除 id = `1` 的 user，并且 user `1` 的 account 也会被删除</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="关联标签-1"><a href="#关联标签-1" class="headerlink" title="关联标签"></a>关联标签</h2><table><thead><tr><th align="left">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">foreignKey</td><td align="left">指定当前模型的列作为连接表的外键</td></tr><tr><td align="left">references</td><td align="left">指定引用表的列名，其将被映射为连接表外键</td></tr><tr><td align="left">polymorphic</td><td align="left">指定多态类型，比如模型名</td></tr><tr><td align="left">polymorphicValue</td><td align="left">指定多态值、默认表名</td></tr><tr><td align="left">many2many</td><td align="left">指定连接表表名</td></tr><tr><td align="left">joinForeignKey</td><td align="left">指定连接表的外键列名，其将被映射到当前表</td></tr><tr><td align="left">joinReferences</td><td align="left">指定连接表的外键列名，其将被映射到引用表</td></tr><tr><td align="left">constraint</td><td align="left">关系约束，例如：<code>OnUpdate</code>、<code>OnDelete</code></td></tr></tbody></table><h1 id="gorm-会话"><a href="#gorm-会话" class="headerlink" title="gorm 会话"></a>gorm 会话</h1><p>GORM 提供了 <code>Session</code> 方法，这是一个<br><code>New Session Method</code>，它允许创建带配置的新建会话模式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Session 配置</span></span><br><span class="line"><span class="keyword">type</span> Session <span class="keyword">struct</span> &#123;</span><br><span class="line">  DryRun                 <span class="type">bool</span></span><br><span class="line">  PrepareStmt            <span class="type">bool</span></span><br><span class="line">  NewDB                  <span class="type">bool</span></span><br><span class="line">  SkipHooks              <span class="type">bool</span></span><br><span class="line">  SkipDefaultTransaction <span class="type">bool</span></span><br><span class="line">  AllowGlobalUpdate      <span class="type">bool</span></span><br><span class="line">  FullSaveAssociations   <span class="type">bool</span></span><br><span class="line">  Context                context.Context</span><br><span class="line">  Logger                 logger.Interface</span><br><span class="line">  NowFunc                <span class="function"><span class="keyword">func</span><span class="params">()</span></span> time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DryRun"><a href="#DryRun" class="headerlink" title="DryRun"></a>DryRun</h2><p>生成 <code>SQL</code> 但不执行。 它可以用于准备或测试生成的 SQL，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建会话模式</span></span><br><span class="line">stmt := db.Session(&amp;Session&#123;DryRun: <span class="literal">true</span>&#125;).First(&amp;user, <span class="number">1</span>).Statement</span><br><span class="line">stmt.SQL.String() <span class="comment">//=&gt; SELECT * FROM `users` WHERE `id` = $1 ORDER BY `id`</span></span><br><span class="line">stmt.Vars         <span class="comment">//=&gt; []interface&#123;&#125;&#123;1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局 DryRun 模式</span></span><br><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;DryRun: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同的数据库生成不同的 SQL</span></span><br><span class="line">stmt := db.Find(&amp;user, <span class="number">1</span>).Statement</span><br><span class="line">stmt.SQL.String() <span class="comment">//=&gt; SELECT * FROM `users` WHERE `id` = $1 // PostgreSQL</span></span><br><span class="line">stmt.SQL.String() <span class="comment">//=&gt; SELECT * FROM `users` WHERE `id` = ?  // MySQL</span></span><br><span class="line">stmt.Vars         <span class="comment">//=&gt; []interface&#123;&#125;&#123;1&#125;</span></span><br></pre></td></tr></table></figure><p>你可以使用下面的代码生成最终的 SQL：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：SQL 并不总是能安全地执行，GORM 仅将其用于日志，它可能导致会 SQL 注入</span></span><br><span class="line">db.Dialector.Explain(stmt.SQL.String(), stmt.Vars...)</span><br><span class="line"><span class="comment">// SELECT * FROM `users` WHERE `id` = 1</span></span><br></pre></td></tr></table></figure><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p><code>PreparedStmt</code> 在执行任何 SQL 时都会创建一个 prepared statement<br>并将其缓存，以提高后续的效率，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局模式，所有 DB 操作都会创建并缓存预编译语句</span></span><br><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">  PrepareStmt: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会话模式</span></span><br><span class="line">tx := db.Session(&amp;Session&#123;PrepareStmt: <span class="literal">true</span>&#125;)</span><br><span class="line">tx.First(&amp;user, <span class="number">1</span>)</span><br><span class="line">tx.Find(&amp;users)</span><br><span class="line">tx.Model(&amp;user).Update(<span class="string">&quot;Age&quot;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns prepared statements manager</span></span><br><span class="line">stmtManger, ok := tx.ConnPool.(*PreparedStmtDB)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 *当前会话* 的预编译模式</span></span><br><span class="line">stmtManger.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 *当前会话* 预编译 SQL</span></span><br><span class="line">stmtManger.PreparedSQL <span class="comment">// =&gt; []string&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为当前数据库连接池的（所有会话）开启预编译模式</span></span><br><span class="line">stmtManger.Stmts <span class="comment">// map[string]*sql.Stmt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sql, stmt := <span class="keyword">range</span> stmtManger.Stmts &#123;</span><br><span class="line">  sql  <span class="comment">// 预编译 SQL</span></span><br><span class="line">  stmt <span class="comment">// 预编译模式</span></span><br><span class="line">  stmt.Close() <span class="comment">// 关闭预编译模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NewDB"><a href="#NewDB" class="headerlink" title="NewDB"></a>NewDB</h2><p>通过 <code>NewDB</code> 选项创建一个不带之前条件的新 DB，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tx := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Session(&amp;gorm.Session&#123;NewDB: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">tx.First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id LIMIT 1</span></span><br><span class="line"></span><br><span class="line">tx.First(&amp;user, <span class="string">&quot;id = ?&quot;</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = 10 ORDER BY id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带 `NewDB` 选项</span></span><br><span class="line">tx2 := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Session(&amp;gorm.Session&#123;&#125;)</span><br><span class="line">tx2.First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;jinzhu&quot; ORDER BY id</span></span><br></pre></td></tr></table></figure><h2 id="跳过钩子"><a href="#跳过钩子" class="headerlink" title="跳过钩子"></a>跳过钩子</h2><p>如果您想跳过 <code>钩子</code> 方法，您可以使用 <code>SkipHooks</code> 会话模式，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Create(&amp;user)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Create(&amp;users)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).CreateInBatches(users, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Find(&amp;user)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Delete(&amp;user)</span><br><span class="line"></span><br><span class="line">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="literal">true</span>&#125;).Model(User&#123;&#125;).Where(<span class="string">&quot;age &gt; ?&quot;</span>, <span class="number">18</span>).Updates(&amp;user)</span><br></pre></td></tr></table></figure><h2 id="禁用嵌套事务"><a href="#禁用嵌套事务" class="headerlink" title="禁用嵌套事务"></a>禁用嵌套事务</h2><p>在一个 DB 事务中使用 <code>Transaction</code> 方法，GORM 会使用<br><code>SavePoint(savedPointName)</code>，<code>RollbackTo(savedPointName)</code><br>为你提供嵌套事务支持。 你可以通过 <code>DisableNestedTransaction</code><br>选项关闭它，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;</span><br><span class="line">  DisableNestedTransaction: <span class="literal">true</span>,</span><br><span class="line">&#125;).CreateInBatches(&amp;users, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="AllowGlobalUpdate"><a href="#AllowGlobalUpdate" class="headerlink" title="AllowGlobalUpdate"></a>AllowGlobalUpdate</h2><p>GORM 默认不允许进行全局 update&#x2F;delete，该操作会返回<br><code>ErrMissingWhereClause</code> 错误。 您可以通过将一个选项设置为 true<br>来启用它，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;</span><br><span class="line">  AllowGlobalUpdate: <span class="literal">true</span>,</span><br><span class="line">&#125;).Model(&amp;User&#123;&#125;).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">// UPDATE users SET `name` = &quot;jinzhu&quot;</span></span><br></pre></td></tr></table></figure><h2 id="FullSaveAssociations"><a href="#FullSaveAssociations" class="headerlink" title="FullSaveAssociations"></a>FullSaveAssociations</h2><p>在创建、更新记录时，GORM 会通过 Upsert 自动保存关联及其引用记录。<br>如果您想要更新关联的数据，您应该使用 <code>FullSaveAssociations</code> 模式，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;FullSaveAssociations: <span class="literal">true</span>&#125;).Updates(&amp;user)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Billing Address - Address 1&quot;), (&quot;Shipping Address - Address 1&quot;) ON DUPLICATE KEY SET address1=VALUES(address1);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;users&quot; (name,billing_address_id,shipping_address_id) VALUES (&quot;jinzhu&quot;, 1, 2);</span></span><br><span class="line"><span class="comment">// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu@example.com&quot;), (111, &quot;jinzhu-2@example.com&quot;) ON DUPLICATE KEY SET email=VALUES(email);</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>通过 <code>Context</code> 选项，您可以传入 <code>Context</code> 来追踪 SQL 操作，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timeoutCtx, _ := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">tx := db.Session(&amp;Session&#123;Context: timeoutCtx&#125;)</span><br><span class="line"></span><br><span class="line">tx.First(&amp;user) <span class="comment">// 带 timeoutCtx 的查询</span></span><br><span class="line">tx.Model(&amp;user).Update(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;admin&quot;</span>) <span class="comment">// 带 timeoutCtx 的更新</span></span><br></pre></td></tr></table></figure><p>GORM 也提供了快捷调用方法 <code>WithContext</code>，其实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> WithContext(ctx context.Context) *DB &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Session(&amp;Session&#123;Context: ctx&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><p>Gorm 允许使用 <code>Logger</code> 选项自定义内建 Logger，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">newLogger := logger.New(log.New(os.Stdout, <span class="string">&quot;\r\n&quot;</span>, log.LstdFlags),</span><br><span class="line">              logger.Config&#123;</span><br><span class="line">                SlowThreshold: time.Second,</span><br><span class="line">                LogLevel:      logger.Silent,</span><br><span class="line">                Colorful:      <span class="literal">false</span>,</span><br><span class="line">              &#125;)</span><br><span class="line">db.Session(&amp;Session&#123;Logger: newLogger&#125;)</span><br><span class="line"></span><br><span class="line">db.Session(&amp;Session&#123;Logger: logger.Default.LogMode(logger.Silent)&#125;)</span><br></pre></td></tr></table></figure><h2 id="NowFunc"><a href="#NowFunc" class="headerlink" title="NowFunc"></a>NowFunc</h2><p><code>NowFunc</code> 允许改变 GORM 获取当前时间的实现，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Session(&amp;Session&#123;</span><br><span class="line">  NowFunc: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> time.Time &#123;</span><br><span class="line">    <span class="keyword">return</span> time.Now().Local()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><code>Debug</code> 只是将会话的 <code>Logger</code> 修改为调试模式的快捷方法，其实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Debug() (tx *DB) &#123;</span><br><span class="line">  <span class="keyword">return</span> db.Session(&amp;Session&#123;</span><br><span class="line">    Logger:         db.Logger.LogMode(logger.Info),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="QueryFields"><a href="#QueryFields" class="headerlink" title="QueryFields"></a>QueryFields</h2><p>Select by fields</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.Session(&amp;gorm.Session&#123;QueryFields: <span class="literal">true</span>&#125;).Find(&amp;user)</span><br><span class="line"><span class="comment">// SELECT `users`.`name`, `users`.`age`, ... FROM `users` // 带该选项</span></span><br><span class="line"><span class="comment">// SELECT * FROM `users` // 不带该选项</span></span><br></pre></td></tr></table></figure><h2 id="CreateBatchSize"><a href="#CreateBatchSize" class="headerlink" title="CreateBatchSize"></a>CreateBatchSize</h2><p>Default batch size</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">users = [<span class="number">5000</span>]User&#123;&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Pets: []Pet&#123;pet1, pet2, pet3&#125;&#125;...&#125;</span><br><span class="line"></span><br><span class="line">db.Session(&amp;gorm.Session&#123;CreateBatchSize: <span class="number">1000</span>&#125;).Create(&amp;users)</span><br><span class="line"><span class="comment">// INSERT INTO users xxx (需 5 次)</span></span><br><span class="line"><span class="comment">// INSERT INTO pets xxx (需 15 次)</span></span><br></pre></td></tr></table></figure><h1 id="gorm事务"><a href="#gorm事务" class="headerlink" title="gorm事务"></a>gorm事务</h1><h2 id="禁用默认事务"><a href="#禁用默认事务" class="headerlink" title="禁用默认事务"></a>禁用默认事务</h2><p>为了确保数据一致性，GORM<br>会在事务里执行写入操作（创建、更新、删除）。如果没有这方面的要求，您可以在初始化时禁用它，这将获得大约<br>30%+ 性能提升。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局禁用</span></span><br><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">  SkipDefaultTransaction: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续会话模式</span></span><br><span class="line">tx := db.Session(&amp;Session&#123;SkipDefaultTransaction: <span class="literal">true</span>&#125;)</span><br><span class="line">tx.First(&amp;user, <span class="number">1</span>)</span><br><span class="line">tx.Find(&amp;users)</span><br><span class="line">tx.Model(&amp;user).Update(<span class="string">&quot;Age&quot;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>要在事务中执行一系列操作，一般流程如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">  <span class="comment">// 在事务中执行一些 db 操作（从这里开始，您应该使用 &#x27;tx&#x27; 而不是 &#x27;db&#x27;）</span></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Giraffe&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 返回任何错误都会回滚事务</span></span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Lion&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 nil 提交事务</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="嵌套事务"><a href="#嵌套事务" class="headerlink" title="嵌套事务"></a>嵌套事务</h3><p>GORM 支持嵌套事务，您可以回滚较大事务内执行的一部分操作，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">  tx.Create(&amp;user1)</span><br><span class="line"></span><br><span class="line">  tx.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx2 *gorm.DB)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    tx2.Create(&amp;user2)</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">&quot;rollback user2&quot;</span>) <span class="comment">// Rollback user2</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  tx.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx2 *gorm.DB)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    tx2.Create(&amp;user3)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Commit user1, user3</span></span><br></pre></td></tr></table></figure><h2 id="手动事务"><a href="#手动事务" class="headerlink" title="手动事务"></a>手动事务</h2><p>Gorm 支持直接调用事务控制方法（commit、rollback），例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始事务</span></span><br><span class="line">tx := db.Begin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在事务中执行一些 db 操作（从这里开始，您应该使用 &#x27;tx&#x27; 而不是 &#x27;db&#x27;）</span></span><br><span class="line">tx.Create(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遇到错误时回滚事务</span></span><br><span class="line">tx.Rollback()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则，提交事务</span></span><br><span class="line">tx.Commit()</span><br></pre></td></tr></table></figure><h3 id="一个特殊的示例"><a href="#一个特殊的示例" class="headerlink" title="一个特殊的示例"></a>一个特殊的示例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateAnimals</span><span class="params">(db *gorm.DB)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">  <span class="comment">// 再唠叨一下，事务一旦开始，你就应该使用 tx 处理数据</span></span><br><span class="line">  tx := db.Begin()</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">      tx.Rollback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Giraffe&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">     tx.Rollback()</span><br><span class="line">     <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Lion&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">     tx.Rollback()</span><br><span class="line">     <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tx.Commit().Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SavePoint、RollbackTo"><a href="#SavePoint、RollbackTo" class="headerlink" title="SavePoint、RollbackTo"></a>SavePoint、RollbackTo</h2><p>GORM 提供了 <code>SavePoint</code>、<code>Rollbackto</code><br>方法，来提供保存点以及回滚至保存点功能，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tx := db.Begin()</span><br><span class="line">tx.Create(&amp;user1)</span><br><span class="line"></span><br><span class="line">tx.SavePoint(<span class="string">&quot;sp1&quot;</span>)</span><br><span class="line">tx.Create(&amp;user2)</span><br><span class="line">tx.RollbackTo(<span class="string">&quot;sp1&quot;</span>) <span class="comment">// Rollback user2</span></span><br><span class="line"></span><br><span class="line">tx.Commit() <span class="comment">// Commit user1</span></span><br></pre></td></tr></table></figure><h1 id="Gorm总结"><a href="#Gorm总结" class="headerlink" title="Gorm总结"></a>Gorm总结</h1><p>本节以客户customer和订单order为模型，并且以dao设计模式来实现他们的curd操作。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://ryanchou612.github.io/storage/thumbnails/_signature/1CDANHL3GGDP8IEIT9542IPUHQ.png" alt="项目结构"></p><h2 id="准备数据库和表以及数据"><a href="#准备数据库和表以及数据" class="headerlink" title="准备数据库和表以及数据"></a>准备数据库和表以及数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database gorm_demo;</span><br><span class="line"></span><br><span class="line">customers <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `customers` (</span><br><span class="line">  `id` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `created_at` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `updated_at` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `deleted_at` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `idx_customers_deleted_at` (`deleted_at`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">orders <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `orders` (</span><br><span class="line">  `id` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `created_at` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `updated_at` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `deleted_at` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `customer_id` <span class="type">int</span> unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `product` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `idx_orders_deleted_at` (`deleted_at`)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (name, address, email)</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">  (<span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;123 Main St&#x27;</span>, <span class="string">&#x27;john.doe@example.com&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Jane Doe&#x27;</span>, <span class="string">&#x27;456 Main St&#x27;</span>, <span class="string">&#x27;jane.doe@example.com&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Jim Smith&#x27;</span>, <span class="string">&#x27;789 Main St&#x27;</span>, <span class="string">&#x27;jim.smith@example.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (customer_id, product, price)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;iPhone&#x27;</span>, <span class="number">999.99</span>),</span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;Macbook Pro&#x27;</span>, <span class="number">1499.99</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;iPad&#x27;</span>, <span class="number">499.99</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;Apple Watch&#x27;</span>, <span class="number">399.99</span>);</span><br></pre></td></tr></table></figure><blockquote><p>在上面的代码中：</p><p>customers表有5个字段：</p><pre><code>id：主键，自动递增。name：客户姓名，类型为字符串，不能为空。address：客户地址，类型为字符串，不能为空。email：客户电子邮件，类型为字符串，不能为空，唯一。created_at：客户创建时间，类型为时间戳，默认值为当前时间。</code></pre><p>orders表有5个字段：</p><pre><code>id：主键，自动递增。customer_id：客户ID，类型为整数，不能为空。product：产品名称，类型为字符串，不能为空。price：产品价格，类型为十进制，不能为空。created_at：订单创建时间，类型为时间戳，默认值为当前</code></pre></blockquote><h2 id="创建并初始化项目"><a href="#创建并初始化项目" class="headerlink" title="创建并初始化项目"></a>创建并初始化项目</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> gorm_demo</span><br><span class="line"><span class="built_in">cd</span> gorm_demo</span><br><span class="line">code .</span><br><span class="line">go mod init gorm_demo</span><br></pre></td></tr></table></figure><h2 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h2><p>创建一个entity文件夹，里面创建order.go和customer.go 文件内容如下：</p><p><strong>order.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> entity</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Order <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    CustomerID <span class="type">uint</span></span><br><span class="line">    Product    <span class="type">string</span></span><br><span class="line">    Price      <span class="type">float32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>customer.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> entity</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Customer model</span></span><br><span class="line"><span class="keyword">type</span> Customer <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Name    <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(100);not null&quot;`</span></span><br><span class="line">    Address <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(100);not null&quot;`</span></span><br><span class="line">    Email   <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(100);not null&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建连接数据库工具类"><a href="#创建连接数据库工具类" class="headerlink" title="创建连接数据库工具类"></a>创建连接数据库工具类</h2><p>创建一个util文件夹，在该文件夹中创建db_util.go文件内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">    _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">    db, err = gorm.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:123456@/gorm_demo?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDB</span><span class="params">()</span></span> *gorm.DB &#123;</span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建dao接口"><a href="#创建dao接口" class="headerlink" title="创建dao接口"></a>创建dao接口</h2><p>创建一个dao文件夹，里面创建order_dao.go、customer_dao.go、order_dao_impl.go、customer_dao_impl.go文件，内容如下：</p><p><strong>order_dao.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;gorm_demo/entity&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OrderDAO <span class="keyword">interface</span> &#123;</span><br><span class="line">    FindAllOrders(db *gorm.DB) ([]entity.Order, <span class="type">error</span>)</span><br><span class="line">    FindOrderByID(db *gorm.DB, id <span class="type">int</span>) (entity.Order, <span class="type">error</span>)</span><br><span class="line">    CreateOrder(db *gorm.DB, order entity.Order) <span class="type">error</span></span><br><span class="line">    UpdateOrder(db *gorm.DB, order entity.Order) <span class="type">error</span></span><br><span class="line">    DeleteOrder(db *gorm.DB, order entity.Order) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>customer_dao.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;gorm_demo/entity&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CustomerDAO interface</span></span><br><span class="line"><span class="keyword">type</span> CustomerDAO <span class="keyword">interface</span> &#123;</span><br><span class="line">    CreateCustomer(db *gorm.DB, customer entity.Customer) (entity.Customer, <span class="type">error</span>)</span><br><span class="line">    GetCustomer(db *gorm.DB, id <span class="type">uint</span>) (entity.Customer, <span class="type">error</span>)</span><br><span class="line">    GetAllCustomers(db *gorm.DB) ([]entity.Customer, <span class="type">error</span>)</span><br><span class="line">    UpdateCustomer(db *gorm.DB, customer entity.Customer) (entity.Customer, <span class="type">error</span>)</span><br><span class="line">    DeleteCustomer(db *gorm.DB, customer entity.Customer) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>order_dao_impl.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;gorm_demo/entity&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OrderDAOImpl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(odao *OrderDAOImpl)</span></span> FindAllOrders(db *gorm.DB) ([]entity.Order, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> orders []entity.Order</span><br><span class="line">    <span class="keyword">if</span> err := db.Find(&amp;orders).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> orders, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(odao *OrderDAOImpl)</span></span> FindOrderByID(db *gorm.DB, id <span class="type">int</span>) (entity.Order, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> order entity.Order</span><br><span class="line">    <span class="keyword">if</span> err := db.First(&amp;order, id).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> entity.Order&#123;&#125;, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> order, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(odao *OrderDAOImpl)</span></span> CreateOrder(db *gorm.DB, order entity.Order) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := db.Create(&amp;order).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(odao *OrderDAOImpl)</span></span> UpdateOrder(db *gorm.DB, order entity.Order) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := db.Save(&amp;order).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(odao *OrderDAOImpl)</span></span> DeleteOrder(db *gorm.DB, order entity.Order) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := db.Delete(&amp;order).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>customer_dao_impl.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;gorm_demo/entity&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CustomerDAOImpl customer data access object implementation</span></span><br><span class="line"><span class="keyword">type</span> CustomerDAOImpl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateCustomer method to create a new customer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dao CustomerDAOImpl)</span></span> CreateCustomer(db *gorm.DB, customer entity.Customer) (entity.Customer, <span class="type">error</span>) &#123;</span><br><span class="line">    err := db.Create(&amp;customer).Error</span><br><span class="line">    <span class="keyword">return</span> customer, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetCustomer method to get a customer by ID</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dao CustomerDAOImpl)</span></span> GetCustomer(db *gorm.DB, id <span class="type">uint</span>) (entity.Customer, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> customer entity.Customer</span><br><span class="line">    err := db.First(&amp;customer, id).Error</span><br><span class="line">    <span class="keyword">return</span> customer, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllCustomers method to get all customers</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dao CustomerDAOImpl)</span></span> GetAllCustomers(db *gorm.DB) ([]entity.Customer, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> customers []entity.Customer</span><br><span class="line">    err := db.Find(&amp;customers).Error</span><br><span class="line">    <span class="keyword">return</span> customers, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UpdateCustomer method to update a customer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dao CustomerDAOImpl)</span></span> UpdateCustomer(db *gorm.DB, customer entity.Customer) (entity.Customer, <span class="type">error</span>) &#123;</span><br><span class="line">    err := db.Save(&amp;customer).Error</span><br><span class="line">    <span class="keyword">return</span> customer, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dao *CustomerDAOImpl)</span></span> DeleteCustomer(db *gorm.DB, customer entity.Customer) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := db.Delete(&amp;customer).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;gorm_demo/dao&quot;</span></span><br><span class="line">    <span class="string">&quot;gorm_demo/entity&quot;</span></span><br><span class="line">    <span class="string">&quot;gorm_demo/util&quot;</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    db := util.GetDB()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">    db.AutoMigrate(&amp;entity.Customer&#123;&#125;, &amp;entity.Order&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    customerDAO := dao.CustomerDAOImpl&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a new customer</span></span><br><span class="line">    newCustomer := entity.Customer&#123;</span><br><span class="line">        Name:    <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">        Address: <span class="string">&quot;123 Main St&quot;</span>,</span><br><span class="line">        Email:   <span class="string">&quot;john.doe@example.com&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    createdCustomer, err := customerDAO.CreateCustomer(db, newCustomer)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Created customer:&quot;</span>, createdCustomer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get a customer by ID</span></span><br><span class="line">    customer, err := customerDAO.GetCustomer(db, createdCustomer.ID)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Retrieved customer:&quot;</span>, customer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get all customers</span></span><br><span class="line">    customers, err := customerDAO.GetAllCustomers(db)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Retrieved customers:&quot;</span>, customers)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update a customer</span></span><br><span class="line">    customer.Name = <span class="string">&quot;Jane Doe&quot;</span></span><br><span class="line">    updatedCustomer, err := customerDAO.UpdateCustomer(db, customer)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Updated customer:&quot;</span>, updatedCustomer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Delete a customer</span></span><br><span class="line">    err = customerDAO.DeleteCustomer(db, customer)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Deleted customer:&quot;</span>, customer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gorm概述&quot;&gt;&lt;a href=&quot;#Gorm概述&quot; class=&quot;headerlink&quot; title=&quot;Gorm概述&quot;&gt;&lt;/a&gt;Gorm概述&lt;/h1&gt;&lt;h2 id=&quot;ORM简介&quot;&gt;&lt;a href=&quot;#ORM简介&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="Gorm" scheme="https://ryanchou612.github.io/tags/Gorm/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记｜Git</title>
    <link href="https://ryanchou612.github.io/posts/69c3279c.html"/>
    <id>https://ryanchou612.github.io/posts/69c3279c.html</id>
    <published>2023-05-23T01:54:52.000Z</published>
    <updated>2023-07-15T03:27:52.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><p>Git是一个开源的分布式版本控制软件，用来管理项目版本。 Git 最初是由Linus<br>Torvalds设计开发的，用于管理Linux内核开发。</p><h2 id="为什么需要版本控制Git简介"><a href="#为什么需要版本控制Git简介" class="headerlink" title="为什么需要版本控制Git简介"></a>为什么需要版本控制Git简介</h2><p><strong>Git</strong> 是一个开源的分布式版本控制软件，用来管理项目版本。 Git<br>最初是由<em>Linus Torvalds</em>设计开发的，用于管理Linux内核开发。</p><ol><li>备份用</li><li>团队协同开发</li></ol><h2 id="Git的历史"><a href="#Git的历史" class="headerlink" title="Git的历史"></a>Git的历史</h2><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过<strong>手工方式合并代码</strong>！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些<strong>集中式</strong>的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h2 id="Git的官网"><a href="#Git的官网" class="headerlink" title="Git的官网"></a>Git的官网</h2><pre><code>https://git-scm.com/</code></pre><h1 id="Git的安装和配置"><a href="#Git的安装和配置" class="headerlink" title="Git的安装和配置"></a>Git的安装和配置</h1><h2 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h2><pre><code>https://git-scm.com/download/</code></pre><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>安装Git（都使用默认项，就可以）</p><h2 id="使用Git客户端"><a href="#使用Git客户端" class="headerlink" title="使用Git客户端"></a>使用Git客户端</h2><pre><code>git --versiongit --help</code></pre><h1 id="Git的四个工作区域"><a href="#Git的四个工作区域" class="headerlink" title="Git的四个工作区域"></a>Git的四个工作区域</h1><p>Git本地有四个工作区域：工作目录（Working<br>Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git<br>Directory)、git仓库(Remote<br>Directory)。文件在这四个区域之间的转换关系如下：</p><ul><li><strong>Workspace</strong>： 工作区，就是你平时存放项目代码的地方</li><li><strong>Index &#x2F; Stage</strong>：<br>暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信-</li><li><strong>Repository</strong>：<br>仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li><strong>Remote</strong>：<br>远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><h1 id="Git文件的四种状态"><a href="#Git文件的四种状态" class="headerlink" title="Git文件的四种状态"></a>Git文件的四种状态</h1><p>git的工作流程一般是这样的：</p><p>１. 在工作目录中添加、修改文件；</p><p>２. 将需要进行版本管理的文件放入暂存区域；</p><p>３. 将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><h2 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><p>GIT不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用SHA-1算法计算文件的校验和。</p><ul><li><strong>Untracked:</strong> 未跟踪, 此文件在文件夹中, 但并没有加入到git库,<br>不参与版本控制. 通过git add 状态变为Staged.</li><li><strong>Unmodify:</strong> 文件已经入库, 未修改,<br>即版本库中的文件快照内容与文件夹中完全一致.<br>这种类型的文件有两种去处, 如果它被修改, 而变为Modified.如果使用git<br>rm移出版本库, 则成为Untracked文件</li><li><strong>Modified:</strong> 文件已修改, 仅仅是修改, 并没有进行其他的操作.<br>这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git<br>checkout 则丢弃修改过,返回到unmodify状态, 这个git<br>checkout即从库中取出文件, 覆盖当前修改</li><li><strong>Staged:</strong> 暂存状态. 执行git commit则将修改同步到库中,<br>这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git<br>reset HEAD filename取消暂存, 文件状态为Modified</li></ul><ol><li>新建文件—&gt;<code>Untracked</code></li><li>使用<code>add</code>命令将新建的文件加入到暂存区—&gt;<code>Staged</code></li><li>使用<code>commit</code>命令将暂存区的文件提交到本地仓库—&gt;<code>Unmodified</code></li><li>如果对<code>Unmodified</code>状态的文件进行修改—&gt; <code>modified</code></li><li>如果对<code>Unmodified</code>状态的文件进行remove操作—&gt;<code>Untracked</code></li></ol><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">git branch 查看本地所有分支</span><br><span class="line">git status 查看当前状态 </span><br><span class="line">git commit 提交 </span><br><span class="line">git branch -a 查看所有的分支</span><br><span class="line">git branch -r 查看远程所有分支</span><br><span class="line">git commit -am <span class="string">&quot;init&quot;</span> 提交并且加注释 </span><br><span class="line">git remote add origin git@192.168.1.119:ndshow</span><br><span class="line">git push origin master 将文件给推到服务器上 </span><br><span class="line">git remote show origin 显示远程库origin里的资源 </span><br><span class="line">git push origin master:develop</span><br><span class="line">git push origin master:hb-dev 将本地库与服务器上的库进行关联 </span><br><span class="line">git checkout --track origin/dev 切换到远程dev分支</span><br><span class="line">git branch -D master develop 删除本地库develop</span><br><span class="line">git checkout -b dev 建立一个新的本地分支dev</span><br><span class="line">git merge origin/dev 将分支dev与当前分支进行合并</span><br><span class="line">git checkout dev 切换到本地dev分支</span><br><span class="line">git remote show 查看远程库</span><br><span class="line">git add .</span><br><span class="line">git <span class="built_in">rm</span> 文件名(包括路径) 从git中删除指定文件</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/schacon/grit.git 从服务器上将代码给拉下来</span><br><span class="line">git config --list 看所有用户</span><br><span class="line">git ls-files 看已经被提交的</span><br><span class="line">git <span class="built_in">rm</span> [file name] 删除一个文件</span><br><span class="line">git commit -a 提交当前repos的所有的改变</span><br><span class="line">git add [file name] 添加一个文件到git index</span><br><span class="line">git commit -v 当你用－v参数的时候可以看commit的差异</span><br><span class="line">git commit -m <span class="string">&quot;This is the message describing the commit&quot;</span> 添加commit信息</span><br><span class="line">git commit -a -a是代表add，把所有的change加到git index里然后再commit</span><br><span class="line">git commit -a -v 一般提交命令</span><br><span class="line">git <span class="built_in">log</span> 看你commit的日志</span><br><span class="line">git diff 查看尚未暂存的更新</span><br><span class="line">git <span class="built_in">rm</span> a.a 移除文件(从暂存区和工作区中删除)</span><br><span class="line">git <span class="built_in">rm</span> --cached a.a 移除文件(只从暂存区中删除)</span><br><span class="line">git commit -m <span class="string">&quot;remove&quot;</span> 移除文件(从Git中删除)</span><br><span class="line">git <span class="built_in">rm</span> -f a.a 强行移除修改后文件(从暂存区和工作区中删除)</span><br><span class="line">git diff --cached 或 $ git diff --staged 查看尚未提交的更新</span><br><span class="line">git stash push 将文件给push到一个临时空间中</span><br><span class="line">git stash pop 将文件从临时空间pop下来</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">git remote add origin git@github.com:username/Hello-World.git</span><br><span class="line">git push origin master 将本地项目给提交到服务器中</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">git pull 本地与服务器端同步</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</span><br><span class="line">git push origin serverfix:awesomebranch</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">git fetch 相当于是从远程获取最新版本到本地，不会自动merge</span><br><span class="line">git commit -a -m <span class="string">&quot;log_message&quot;</span> (-a是提交所有改动，-m是加入<span class="built_in">log</span>信息) 本地修改同步至服务器端 ：</span><br><span class="line">git branch branch_0.1 master 从主分支master创建branch_0.1分支</span><br><span class="line">git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0</span><br><span class="line">git checkout branch_1.0/master 切换到branch_1.0/master分支</span><br><span class="line"><span class="built_in">du</span> -hs</span><br><span class="line">git branch 删除远程branch</span><br><span class="line">git push origin :branch_remote_name</span><br><span class="line">git branch -r -d branch_remote_name</span><br><span class="line">初始化版本库，并提交到远程服务器端</span><br><span class="line"><span class="built_in">mkdir</span> WebApp</span><br><span class="line"><span class="built_in">cd</span> WebApp</span><br><span class="line">git init 本地初始化</span><br><span class="line"><span class="built_in">touch</span> README</span><br><span class="line">git add README 添加文件</span><br><span class="line">git commit -m <span class="string">&#x27;first commit&#x27;</span></span><br><span class="line">git remote add origin git@github.com:daixu/WebApp.git</span><br></pre></td></tr></table></figure><h1 id="Git配置用户签名"><a href="#Git配置用户签名" class="headerlink" title="Git配置用户签名"></a>Git配置用户签名</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>如果想要将本地的项目提交的远程仓库的话，必须要设置签名。签名的作用就是用来标识用户，以区分不同的开发人员。</p><h2 id="设置方式"><a href="#设置方式" class="headerlink" title="设置方式"></a>设置方式</h2><p>设置签名有两种方式：</p><ol><li>一种是为单个仓库单独设置，这种方式只针对单个仓库有效；</li><li>另一种是全局配置，采用这种方式配置后，所有仓库都有效。如果对两种方式都进行了配置，那么会优先使用单个仓库配置方式的配置信息。</li></ol><h2 id="配置格式"><a href="#配置格式" class="headerlink" title="配置格式"></a>配置格式</h2><p><strong>方式一（单个仓库有效）</strong></p><pre><code>git config user.name 用户名git config user.email 邮箱</code></pre><blockquote><p>用户名和邮箱自行设置 邮箱可以是假邮箱，即只要符合邮箱格式即可<br>该种方式配置信息会保存在当前仓库目录下的 <code>.git/config</code><br>文件中，打开查看发现保存的格式为</p></blockquote><pre><code>[user]  nanme = 用户名  Email= 邮箱</code></pre><p><strong>方式二（全局有效）</strong></p><pre><code>git config --global user.name 用户名git config --global user.email 邮箱</code></pre><p>该种方式配置信息会保存在系统盘的系统用户目录下的<code>.gitconfig</code>文件中，保存格式同上面一样。</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>一般情况下都是配置成<strong>全局有效</strong>即可，简单，不用为每个仓库都设置签名。当需要为某个仓库配置不同的信息时，只需要单独再为这个仓库按照方式一配置一下即可。</p><h1 id="Git初始化本地库"><a href="#Git初始化本地库" class="headerlink" title="Git初始化本地库"></a>Git初始化本地库</h1><h2 id="初始化命令"><a href="#初始化命令" class="headerlink" title="初始化命令"></a>初始化命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="Git目录"><a href="#Git目录" class="headerlink" title="Git目录"></a>Git目录</h3><p>Git目录是为你的项目存储所有历史和元信息的目录 -<br>包括所有的对象(commits,trees,blobs,tags), 这些对象指向不同的分支.</p><p>每一个项目只能有一个Git目录,　这个叫<code>.git</code>的目录在你项目的根目录下(这是默认设置,但并不是必须的).<br>如果你查看这个目录的内容, 你可以看所有的重要文件:</p><pre><code>$&gt;tree -L 1.|-- HEAD         # 这个git项目当前处在哪个分支里|-- config       # 项目的配置信息，git config命令会改动它|-- description  # 项目的描述信息|-- hooks/       # 系统默认钩子脚本目录|-- index        # 索引文件，暂存区（stage）|-- logs/        # 各个refs的历史信息|-- objects/     # Git本地仓库的所有对象 (commits, trees, blobs, tags)|-- refs/        # 标识你项目里的每个分支指向了哪个提交(commit)。</code></pre><ol><li>HEAD文件：这就是我们常说的HEAD指针，它指向了当前分支。</li><li>config：保存当前仓库的配置信息。</li><li>description: 仓库的描述信息。</li><li>hooks：这个目录存放一些shell脚本。</li><li>info: 包含git仓库的一些信息。</li><li>logs文件夹，保存所有更新的引用记录。打开logs文件夹可以看到其中有两个文件，refs文件夹和HEAD文件。<br>refs文件夹中有两个文件夹：<ol><li>heads:<br>文件里面存储的是本地分支的对象，每个对象的文件名就是本地的一个分支名。我们使用git<br>branch查看本地所有分支时，查询出的分支就是heads文件夹下所有文件的名称，这些分支文件中存储的是对应分支下的操作记录。</li><li>remotes:<br>文件夹里存储的是远程的所有分支对象，每个对象的文件名称就是远程的一个分支名称。这些分支文件中保存了远程仓库对应分支所有操作</li></ol></li><li>objects: 存放所有的 git 对象，哈希值一共40位，前 2<br>位作为文件夹名称，后 38 位作为对象文件名。</li><li>refs：顾名思义就是引用，refs下有三个文件夹。<ol><li>heads:<br>里面包含所有的本地分支，每个分支都是文件,文件中存储了分支当前指向的commit</li><li>tags: 叫做里程碑,或者版本发布用等记录重要版本。</li><li>remotes: 远程仓库信息</li></ol></li><li>index: 暂存区（stage），是一个二进制文件。</li></ol><h1 id="查看Git状态"><a href="#查看Git状态" class="headerlink" title="查看Git状态"></a>查看Git状态</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>git status命令表示：文件，文件夹在工作区，暂存区的状态。</p><ol><li><code>Changes to be committed:</code>表示已经从工作区add到暂存区的file（文件或文件夹），可以通过<br><code>git restore --staged filename</code><br>命令将该file从暂存区移出，只有工作区有该文件，该文件就为Untracked<br>files。</li><li><code>Changes not staged for commit</code>:表示工作区，暂时区都存在的file（文件或文件夹），在工作区进行修改或删除，但是没有add到暂存区，可以通过<br><code>git add file</code> 命令将变更（修改，删除）的file<br>add到暂存区，此时该file没有Changes not staged for<br>commit状态，也就是Changes not staged for<br>commit将没有改file的记录了。可以通过 <code>git restore file</code><br>的命令取消在file在工作区的变更，那么暂存区的file内容还是以前的，并且file在Changes<br>not staged for commi状态下没有记录。</li><li><code>Untracked files</code>:表示只在工作区有的file（文件或文件夹），也就是在暂时区没有该file。</li></ol><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>实例演示</p><h1 id="Git将代码添加到暂存区"><a href="#Git将代码添加到暂存区" class="headerlink" title="Git将代码添加到暂存区"></a>Git将代码添加到暂存区</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><strong>git add</strong> 命令可将该文件添加到暂存区。</p><p>添加一个或多个文件到暂存区：</p><pre><code>git add [file1] [file2] ...</code></pre><p>添加指定目录到暂存区，包括子目录：</p><pre><code>git add [dir]</code></pre><p>添加当前目录下的所有文件到暂存区：</p><pre><code>git add .</code></pre><h2 id="git-add-与git-add-u和git-add-A的区别"><a href="#git-add-与git-add-u和git-add-A的区别" class="headerlink" title="git add .与git add -u和git add -A的区别"></a>git add .与git add -u和git add -A的区别</h2><p><code>git add .</code><br>：他会监控工作区的状态树，使用它会把工作时的<strong>所有变化提交</strong>到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</p><p><code>git add -u</code> ：他仅监控<strong>已经被add的文件</strong>（即tracked<br>file），他会将被修改的文件提交到暂存区。<code>add -u</code><br>不会提交新文件（untracked file）。（git add –update的缩写）</p><p><code>git add -A</code> ：是上面两个功能的合集（git add –all的缩写）</p><h1 id="Git提交代码"><a href="#Git提交代码" class="headerlink" title="Git提交代码"></a>Git提交代码</h1><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p><code>git commit</code> 命令将暂存区内容添加到本地仓库中。</p><p>1.工作区2.暂存区3.本地仓库4.远程仓库</p><h2 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h2><pre><code>git commit -m [message]</code></pre><p>[message] 可以是一些备注信息。</p><h2 id="提交指定文件"><a href="#提交指定文件" class="headerlink" title="提交指定文件"></a>提交指定文件</h2><pre><code>$ git commit [file1] [file2] ... -m [message]</code></pre><h2 id="直接提交"><a href="#直接提交" class="headerlink" title="直接提交"></a>直接提交</h2><p><code>-a</code> 参数设置修改文件后不需要执行 <code>git add</code> 命令，直接来提交</p><pre><code>$ git commit -am [message]</code></pre><h1 id="Git修改并提交代码"><a href="#Git修改并提交代码" class="headerlink" title="Git修改并提交代码"></a>Git修改并提交代码</h1><h2 id="修改代码文件，查看状态"><a href="#修改代码文件，查看状态" class="headerlink" title="修改代码文件，查看状态"></a>修改代码文件，查看状态</h2><pre><code>git status</code></pre><h2 id="再次添加到暂存区"><a href="#再次添加到暂存区" class="headerlink" title="再次添加到暂存区"></a>再次添加到暂存区</h2><pre><code>git add filename</code></pre><h2 id="再次查看状态"><a href="#再次查看状态" class="headerlink" title="再次查看状态"></a>再次查看状态</h2><pre><code>git status</code></pre><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><pre><code>git commit</code></pre><h2 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h2><pre><code>git reflog</code></pre><h1 id="Git项目版本切换"><a href="#Git项目版本切换" class="headerlink" title="Git项目版本切换"></a>Git项目版本切换</h1><h2 id="查看版本信息-1"><a href="#查看版本信息-1" class="headerlink" title="查看版本信息"></a>查看版本信息</h2><pre><code>reflog或者log</code></pre><h2 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h2><pre><code>git reset --hard 版本号 xxx</code></pre><h2 id="再次查看版本信息"><a href="#再次查看版本信息" class="headerlink" title="再次查看版本信息"></a>再次查看版本信息</h2><pre><code>reflog</code></pre><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><pre><code>cat filename</code></pre><h2 id="查看-git下面的refs目录"><a href="#查看-git下面的refs目录" class="headerlink" title="查看.git下面的refs目录"></a>查看.git下面的refs目录</h2><pre><code>.git/refs/heads/master</code></pre><h2 id="还可以从低版本切换到高版本"><a href="#还可以从低版本切换到高版本" class="headerlink" title="还可以从低版本切换到高版本"></a>还可以从低版本切换到高版本</h2><pre><code>git reset --hard 版本号 xxx</code></pre><h1 id="Git分支简介"><a href="#Git分支简介" class="headerlink" title="Git分支简介"></a>Git分支简介</h1><h2 id="为什么使用分支"><a href="#为什么使用分支" class="headerlink" title="为什么使用分支"></a>为什么使用分支</h2><ul><li>如果你希望为项目增加新特性，但很可能会影响当前可正常工作的代码。对于该项目的活跃用户而言，这是很糟糕的事情。与其将特性加入到其它人正在使用的<br><code>master</code> 分支，更好的方法是在仓库的其它分支中变更代码。</li><li>更重要的是，Git 其设计用于协作。如果所有人都在你代码仓库的 <code>master</code><br>分支上操作，会引发很多混乱。对编程语言或项目的知识和阅历因人而异；有些人可能会编写有错误或缺陷的代码，也可能会编写你觉得不适合该项目的代码。使用分支可以让你<strong>核验</strong>他人的贡献并选择适合的加入到项目中。（这里假设你是代码库唯一的所有者，希望对增加到项目中的代码有完全的控制。在真实的项目中，代码库有多个具有合并代码权限的所有者）</li></ul><h2 id="使用分支的好处"><a href="#使用分支的好处" class="headerlink" title="使用分支的好处"></a>使用分支的好处</h2><ol><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ol><h1 id="Git分支常用命令"><a href="#Git分支常用命令" class="headerlink" title="Git分支常用命令"></a>Git分支常用命令</h1><p><strong>查看分支：</strong></p><pre><code>git branch -v</code></pre><p><strong>创建分支：</strong></p><pre><code>git branch 新分支名</code></pre><p><strong>删除分支:</strong></p><pre><code>git branch -d branchname</code></pre><p><strong>修改分支:</strong></p><pre><code>git branch -m oldbranchname newbranchname</code></pre><p><strong>切换分支:</strong></p><pre><code>git checkout branchname</code></pre><p><strong>合并分支:</strong></p><pre><code>git merge branchname</code></pre><h1 id="Git合并分支"><a href="#Git合并分支" class="headerlink" title="Git合并分支"></a>Git合并分支</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><pre><code>git branch bug-fix</code></pre><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><pre><code>git checkout bug-fix</code></pre><h2 id="在当前分支上修改文件"><a href="#在当前分支上修改文件" class="headerlink" title="在当前分支上修改文件"></a>在当前分支上修改文件</h2><pre><code>vim filename</code></pre><h2 id="在当前分支提交"><a href="#在当前分支提交" class="headerlink" title="在当前分支提交"></a>在当前分支提交</h2><pre><code>git commit -m &#39;bug-fix first commit&#39;</code></pre><h2 id="切换到主分支"><a href="#切换到主分支" class="headerlink" title="切换到主分支"></a>切换到主分支</h2><pre><code>git checkout master</code></pre><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><pre><code>git merge bug-fix</code></pre><blockquote><p>将bug-fix分支合并到master分支</p></blockquote><h1 id="解决Git合并分支冲突"><a href="#解决Git合并分支冲突" class="headerlink" title="解决Git合并分支冲突"></a>解决Git合并分支冲突</h1><h2 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h2><p>合并分支时，两个分支在同一个代码的同一个位置都有修改，Git无法判断，如何去留。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在当前主分支修改文件</p><pre><code>vim filename</code></pre><p>提交文件</p><pre><code>git add .git commit -m &#39;modifiy by master&#39; filename</code></pre><p>切换分支</p><pre><code>git checkout bug-fix</code></pre><p>修改同一个文件</p><pre><code>vim filename</code></pre><p>提交文件</p><pre><code>git add .git commit -m &#39;modifiy by bug-fix&#39; filename</code></pre><p>切换到主分支</p><pre><code>git checkout master</code></pre><p>合并分支</p><pre><code>git merge hot-fix</code></pre><p>手动修改文件</p><pre><code>vim filename</code></pre><p>再次添加到暂存区</p><pre><code>git add .</code></pre><p>再次提交</p><pre><code>git commit -m &#39;merge commit&#39; </code></pre><blockquote><p>注意后面不带文件名</p></blockquote><p>这样就合并成功了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h1&gt;&lt;p&gt;Git是一个开源的分布式版本控制软件，用来管理项目版本。 Git 最初是由Linus&lt;br&gt;Torvalds设计开发</summary>
      
    
    
    
    
    <category term="Git" scheme="https://ryanchou612.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记｜Golang标准库</title>
    <link href="https://ryanchou612.github.io/posts/b1efffe8.html"/>
    <id>https://ryanchou612.github.io/posts/b1efffe8.html</id>
    <published>2023-05-15T03:09:01.000Z</published>
    <updated>2023-07-14T15:05:53.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang标准库os模块-文件目录相关"><a href="#golang标准库os模块-文件目录相关" class="headerlink" title="golang标准库os模块-文件目录相关"></a>golang标准库os模块-文件目录相关</h1><p>os标准库实现了平台（操作系统）无关的编程接口。</p><p><a href="https://pkg.go.dev/std">https://pkg.go.dev/std</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f, err := os.Create(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;f: %v\n&quot;</span>, f)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createDir</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建单个目录</span></span><br><span class="line">    <span class="comment">/* err := os.Mkdir(&quot;test&quot;, os.ModePerm)</span></span><br><span class="line"><span class="comment">    if err != nil &#123;</span></span><br><span class="line"><span class="comment">        fmt.Printf(&quot;err: %v\n&quot;, err)</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    err := os.MkdirAll(<span class="string">&quot;test/a/b&quot;</span>, os.ModePerm)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDir</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/* err := os.Remove(&quot;test.txt&quot;)</span></span><br><span class="line"><span class="comment">    if err != nil &#123;</span></span><br><span class="line"><span class="comment">        fmt.Printf(&quot;err: %v\n&quot;, err)</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line"></span><br><span class="line">    err := os.RemoveAll(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得工作目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWd</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dir, err := os.Getwd()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;dir: %v\n&quot;</span>, dir)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改工作目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chWd</span><span class="params">()</span></span> &#123;</span><br><span class="line">    err := os.Chdir(<span class="string">&quot;d:/&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(os.Getwd())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得临时目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTemp</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := os.TempDir()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">renameFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    err := os.Rename(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test2.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b, err := os.ReadFile(<span class="string">&quot;test2.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="type">string</span>(b[:]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    os.WriteFile(<span class="string">&quot;test2.txt&quot;</span>, []<span class="type">byte</span>(s), os.ModePerm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// createFile()</span></span><br><span class="line">    <span class="comment">// createDir()</span></span><br><span class="line">    <span class="comment">// removeDir()</span></span><br><span class="line">    <span class="comment">// removeDir()</span></span><br><span class="line">    <span class="comment">// getWd()</span></span><br><span class="line">    <span class="comment">// chWd()</span></span><br><span class="line">    <span class="comment">// renameFile()</span></span><br><span class="line">    <span class="comment">// readFile()</span></span><br><span class="line">    <span class="comment">// writeFile()</span></span><br><span class="line">    <span class="comment">// getTemp()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang标准库os模块-File文件读操作"><a href="#golang标准库os模块-File文件读操作" class="headerlink" title="golang标准库os模块-File文件读操作"></a>golang标准库os模块-File文件读操作</h1><p>这里结束和<code>File</code>结构体相关的文件读操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开关闭文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openCloseFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 只能读</span></span><br><span class="line">    f, _ := os.Open(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;f.Name(): %v\n&quot;</span>, f.Name())</span><br><span class="line">    <span class="comment">// 根据第二个参数 可以读写或者创建</span></span><br><span class="line">    f2, _ := os.OpenFile(<span class="string">&quot;a1.txt&quot;</span>, os.O_RDWR|os.O_CREATE, <span class="number">0755</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;f2.Name(): %v\n&quot;</span>, f2.Name())</span><br><span class="line"></span><br><span class="line">    err := f.Close()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">    err2 := f2.Close()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;err2: %v\n&quot;</span>, err2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 等价于：OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666)</span></span><br><span class="line">    f, _ := os.Create(<span class="string">&quot;a2.txt&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;f.Name(): %v\n&quot;</span>, f.Name())</span><br><span class="line">    <span class="comment">// 第一个参数 目录默认：Temp 第二个参数 文件名前缀</span></span><br><span class="line">    f2, _ := os.CreateTemp(<span class="string">&quot;&quot;</span>, <span class="string">&quot;temp&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;f2.Name(): %v\n&quot;</span>, f2.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readOps</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 循环读取</span></span><br><span class="line">    <span class="comment">/*  f, _ := os.Open(&quot;a.txt&quot;)</span></span><br><span class="line"><span class="comment">        for &#123;</span></span><br><span class="line"><span class="comment">            buf := make([]byte, 6)</span></span><br><span class="line"><span class="comment">            n, err := f.Read(buf)</span></span><br><span class="line"><span class="comment">            fmt.Println(string(buf))</span></span><br><span class="line"><span class="comment">            fmt.Printf(&quot;n: %v\n&quot;, n)</span></span><br><span class="line"><span class="comment">            if err == io.EOF &#123;</span></span><br><span class="line"><span class="comment">                break</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        f.Close()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/* buf := make([]byte, 10)</span></span><br><span class="line"><span class="comment">    f2, _ := os.Open(&quot;a.txt&quot;)</span></span><br><span class="line"><span class="comment">    // 从5开始读10个字节</span></span><br><span class="line"><span class="comment">    n, _ := f2.ReadAt(buf, 5)</span></span><br><span class="line"><span class="comment">    fmt.Printf(&quot;n: %v\n&quot;, n)</span></span><br><span class="line"><span class="comment">    fmt.Printf(&quot;string(buf): %v\n&quot;, string(buf))</span></span><br><span class="line"><span class="comment">    f2.Close() */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 a目录下面有b和c目录</span></span><br><span class="line">    <span class="comment">/* f, _ := os.Open(&quot;a&quot;)</span></span><br><span class="line"><span class="comment">    de, _ := f.ReadDir(-1)</span></span><br><span class="line"><span class="comment">    for _, v := range de &#123;</span></span><br><span class="line"><span class="comment">        fmt.Printf(&quot;v.IsDir(): %v\n&quot;, v.IsDir())</span></span><br><span class="line"><span class="comment">        fmt.Printf(&quot;v.Name(): %v\n&quot;, v.Name())</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定位</span></span><br><span class="line">    f, _ := os.Open(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">    f.Seek(<span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">10</span>)</span><br><span class="line">    n, _ := f.Read(buf)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;n: %v\n&quot;</span>, n)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;string(buf): %v\n&quot;</span>, <span class="type">string</span>(buf))</span><br><span class="line">    f.Close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// openCloseFile()</span></span><br><span class="line">    <span class="comment">// createFile()</span></span><br><span class="line">    readOps()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang标准库os模块-File文件写操作"><a href="#golang标准库os模块-File文件写操作" class="headerlink" title="golang标准库os模块-File文件写操作"></a>golang标准库os模块-File文件写操作</h1><p>这里结束和<code>File</code>结构体相关的文件写操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* package main</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">import &quot;os&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func write() &#123;</span></span><br><span class="line"><span class="comment">    f, _ := os.OpenFile(&quot;a.txt&quot;, os.O_RDWR|os.O_TRUNC, 0755)</span></span><br><span class="line"><span class="comment">    f.Write([]byte(&quot; hello golang&quot;))</span></span><br><span class="line"><span class="comment">    f.Close()</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func writeString() &#123;</span></span><br><span class="line"><span class="comment">    f, _ := os.OpenFile(&quot;a.txt&quot;, os.O_RDWR|os.O_APPEND, 0755)</span></span><br><span class="line"><span class="comment">    f.WriteString(&quot;hello java&quot;)</span></span><br><span class="line"><span class="comment">    f.Close()</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func writeAt() &#123;</span></span><br><span class="line"><span class="comment">    f, _ := os.OpenFile(&quot;a.txt&quot;, os.O_RDWR, 0755)</span></span><br><span class="line"><span class="comment">    f.WriteAt([]byte(&quot;aaa&quot;), 3)</span></span><br><span class="line"><span class="comment">    f.Close()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func main() &#123;</span></span><br><span class="line"><span class="comment">    // write()</span></span><br><span class="line"><span class="comment">    // writeString()</span></span><br><span class="line"><span class="comment">    writeAt()</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="golang标准库os包进程相关操作"><a href="#golang标准库os包进程相关操作" class="headerlink" title="golang标准库os包进程相关操作"></a>golang标准库os包进程相关操作</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获得当前正在运行的进程id</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;os.Getpid(): %v\n&quot;</span>, os.Getpid())</span><br><span class="line">    <span class="comment">// 父id</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;os.Getppid(): %v\n&quot;</span>, os.Getppid())</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置新进程的属性</span></span><br><span class="line">    attr := &amp;os.ProcAttr&#123;</span><br><span class="line">        <span class="comment">//files指定新进程继承的活动文件对象</span></span><br><span class="line">        <span class="comment">//前三个分别为，标准输入、标准输出、标准错误输出</span></span><br><span class="line">        Files: []*os.File&#123;os.Stdin, os.Stdout, os.Stderr&#125;,</span><br><span class="line">        <span class="comment">//新进程的环境变量</span></span><br><span class="line">        Env: os.Environ(),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始一个新进程</span></span><br><span class="line">    p, err := os.StartProcess(<span class="string">&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>, []<span class="type">string</span>&#123;<span class="string">&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>, <span class="string">&quot;D:\\a.txt&quot;</span>&#125;, attr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(p)</span><br><span class="line">    fmt.Println(<span class="string">&quot;进程ID：&quot;</span>, p.Pid)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过进程ID查找进程</span></span><br><span class="line">    p2, _ := os.FindProcess(p.Pid)</span><br><span class="line">    fmt.Println(p2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待10秒，执行函数</span></span><br><span class="line">    time.AfterFunc(time.Second*<span class="number">10</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//向p进程发送退出信号</span></span><br><span class="line">        p.Signal(os.Kill)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待进程p的退出，返回进程状态</span></span><br><span class="line">    ps, _ := p.Wait()</span><br><span class="line">    fmt.Println(ps.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang标准库os包和环境相关的方法"><a href="#golang标准库os包和环境相关的方法" class="headerlink" title="golang标准库os包和环境相关的方法"></a>golang标准库os包和环境相关的方法</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获得所有环境变量</span></span><br><span class="line">    s := os.Environ()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    <span class="comment">// 获得某个环境变量</span></span><br><span class="line">    s2 := os.Getenv(<span class="string">&quot;GOPATH&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">    <span class="comment">// 设置环境变量</span></span><br><span class="line">    os.Setenv(<span class="string">&quot;env1&quot;</span>, <span class="string">&quot;env1&quot;</span>)</span><br><span class="line">    s2 = os.Getenv(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找</span></span><br><span class="line">    s3, b := os.LookupEnv(<span class="string">&quot;env1&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换</span></span><br><span class="line">    os.Setenv(<span class="string">&quot;NAME&quot;</span>, <span class="string">&quot;gopher&quot;</span>)</span><br><span class="line">    os.Setenv(<span class="string">&quot;BURROW&quot;</span>, <span class="string">&quot;/usr/gopher&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(os.ExpandEnv(<span class="string">&quot;$NAME lives in $&#123;BURROW&#125;.&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空环境变量</span></span><br><span class="line">    <span class="comment">// os.Clearenv()</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang标准库io包"><a href="#golang标准库io包" class="headerlink" title="golang标准库io包"></a>golang标准库io包</h1><p>Go 语言中，为了方便开发者使用，将 IO 操作封装在了如下几个包中：</p><ul><li>io 为 IO 原语（I&#x2F;O primitives）提供基本的接口 os File Reader Writer</li><li>io&#x2F;ioutil 封装一些实用的 I&#x2F;O 函数</li><li>fmt 实现格式化 I&#x2F;O，类似 C 语言中的 printf 和 scanf format fmt</li><li>bufio 实现带缓冲I&#x2F;O</li></ul><h2 id="io-—-基本的-IO-接口"><a href="#io-—-基本的-IO-接口" class="headerlink" title="io — 基本的 IO 接口"></a>io — 基本的 IO 接口</h2><p>在 io 包中最重要的是两个接口：Reader 和 Writer 接口。本章所提到的各种 IO<br>包，都跟这两个接口有关，也就是说，只要实现了这两个接口，它就有了 IO<br>的功能</p><h3 id="Reader-接口"><a href="#Reader-接口" class="headerlink" title="Reader 接口"></a>Reader 接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Writer-接口"><a href="#Writer-接口" class="headerlink" title="Writer 接口"></a>Writer 接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="那些类型实现了Reader和Writer接口"><a href="#那些类型实现了Reader和Writer接口" class="headerlink" title="那些类型实现了Reader和Writer接口"></a>那些类型实现了Reader和Writer接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">os.File 同时实现了 io.Reader 和 io.Writer</span><br><span class="line">strings.Reader 实现了 io.Reader</span><br><span class="line">bufio.Reader/Writer 分别实现了 io.Reader 和 io.Writer</span><br><span class="line">bytes.Buffer 同时实现了 io.Reader 和 io.Writer</span><br><span class="line">bytes.Reader 实现了 io.Reader</span><br><span class="line">compress/gzip.Reader/Writer 分别实现了 io.Reader 和 io.Writer</span><br><span class="line">crypto/cipher.StreamReader/StreamWriter 分别实现了 io.Reader 和 io.Writer</span><br><span class="line">crypto/tls.Conn 同时实现了 io.Reader 和 io.Writer</span><br><span class="line">encoding/csv.Reader/Writer 分别实现了 io.Reader 和 io.Writer</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="讲解官方实例演示"><a href="#讲解官方实例演示" class="headerlink" title="讲解官方实例演示"></a>讲解官方实例演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strings</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;Hello,world!&quot;</span>)</span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">10</span>) <span class="comment">//字节缓冲区</span></span><br><span class="line">    r.Read(buf)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;string(buf): %v\n&quot;</span>, <span class="type">string</span>(buf))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang标准库ioutil包"><a href="#golang标准库ioutil包" class="headerlink" title="golang标准库ioutil包"></a>golang标准库ioutil包</h1><p>封装一些实用的 I&#x2F;O 函数</p><hr><p>  名称        作用</p><hr><p>  ReadAll     读取数据，返回读到的字节 slice</p><p>  ReadDir     读取一个目录，返回目录入口数组 []os.FileInfo</p><p>  ReadFile    读一个文件，返回文件内容（字节slice）</p><p>  WriteFile   根据文件路径，写入字节slice</p><p>  TempDir     在一个目录中创建指定前缀名的临时目录，返回新临时目录的路径</p><h2 id="TempFile-在一个目录中创建指定前缀名的临时文件，返回-os-File"><a href="#TempFile-在一个目录中创建指定前缀名的临时文件，返回-os-File" class="headerlink" title="  TempFile    在一个目录中创建指定前缀名的临时文件，返回 os.File"></a>  TempFile    在一个目录中创建指定前缀名的临时文件，返回 os.File</h2><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p><strong>讲解官方实例演示</strong></p><p>当然！我可以为你解释一下 <code>ioutil</code> 包中的几个常用函数。<code>ioutil</code><br>包是Go语言标准库中的一个实用工具包，提供了对文件和IO操作的简化方法。</p><ol><li><p><code>ReadAll</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r io.Reader)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p><code>ReadAll</code> 函数用于从一个 <code>io.Reader</code><br>接口中读取数据，并将读取到的字节存储在一个字节切片（<code>[]byte</code>）中返回。函数返回读取到的字节切片和可能出现的错误。</p></li><li><p><code>ReadDir</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadDir</span><span class="params">(dirname <span class="type">string</span>)</span></span> ([]os.FileInfo, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p><code>ReadDir</code> 函数用于读取指定目录下的所有文件和子目录，并返回一个<br><code>[]os.FileInfo</code><br>类型的切片，切片中包含了每个文件和目录的信息。函数返回切片和可能出现的错误。</p></li><li><p><code>ReadFile</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(filename <span class="type">string</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p><code>ReadFile</code><br>函数用于读取指定文件的内容，并将内容存储在一个字节切片中返回。函数返回读取到的字节切片和可能出现的错误。</p></li><li><p><code>WriteFile</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteFile</span><span class="params">(filename <span class="type">string</span>, data []<span class="type">byte</span>, perm os.FileMode)</span></span> <span class="type">error</span></span><br></pre></td></tr></table></figure><p><code>WriteFile</code><br>函数用于根据指定的文件路径将字节切片写入文件中。它接受文件路径、要写入的数据（字节切片）和文件权限作为参数，并返回可能出现的错误。</p></li><li><p><code>TempDir</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TempDir</span><span class="params">(dir, prefix <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p><code>TempDir</code><br>函数用于在指定目录中创建一个以指定前缀名为名称的临时目录，并返回新临时目录的路径。函数返回新目录的路径和可能出现的错误。</p></li><li><p><code>TempFile</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TempFile</span><span class="params">(dir, prefix <span class="type">string</span>)</span></span> (f *os.File, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p><code>TempFile</code><br>函数用于在指定目录中创建一个以指定前缀名为名称的临时文件，并返回一个<br><code>*os.File</code> 类型的指针和可能出现的错误。</p></li></ol><p>以上是 <code>ioutil</code><br>包中几个常用函数的简要说明。你可以根据需要在代码中使用它们来处理文件和IO操作。如果你有任何进一步的问题，我会很乐意帮助你！</p><h1 id="golang标准库fmt包"><a href="#golang标准库fmt包" class="headerlink" title="golang标准库fmt包"></a>golang标准库fmt包</h1><p>fmt包实现了格式化的I&#x2F;O函数，这点类似Ｃ语言中的printf和scanf，但是更加简单．<br>format</p><h3 id="Scanning"><a href="#Scanning" class="headerlink" title="Scanning"></a>Scanning</h3><p>一组类似的函数通过扫描已格式化的文本来产生值。</p><ol><li>Scan、Scanf 和 Scanln 从os.Stdin 中读取；</li><li>Fscan、Fscanf 和 Fscanln 从指定的 io.Reader 中读取；</li><li>Sscan、Sscanf 和 Sscanln 从实参字符串中读取。</li><li>Scanln、Fscanln 和<br>Sscanln在换行符处停止扫描，且需要条目紧随换行符之后；</li><li>Scanf、Fscanf 和<br>Sscanf需要输入换行符来匹配格式中的换行符；其它函数则将换行符视为空格。</li><li>Scanf、Fscanf 和 Sscanf 根据格式字符串解析实参，类似于<br>Printf。例如，%x会将一个整数扫描为十六进制数，而 %v<br>则会扫描该值的默认表现格式。</li></ol><blockquote><p><code>Scan</code>、<code>Fscan</code> 和 <code>Sscan</code> 是由以下单词缩写而来：</p><ul><li><code>Scan</code>: “Scan” 表示从输入中扫描数据。</li><li><code>Fscan</code>: “F” 代表 “Formatted”，表示使用格式化的输入来扫描数据。</li><li><code>Sscan</code>: “S” 代表 “String”，表示从字符串中扫描数据。</li></ul></blockquote><blockquote><p>在 <code>Scan</code>、<code>Scanf</code> 和 <code>Scanln</code> 中，后缀 <code>f</code> 和 <code>ln</code> 有以下含义：</p><ol><li>后缀 <code>f</code>：<code>f</code> 表示<br>“formatted”，即格式化输入。这意味着你可以使用指定的格式来读取输入数据，而不仅仅是按照空格或换行符进行分隔。使用<br><code>Scanf</code> 可以指定输入的格式，以确保正确地解析输入数据。</li><li>后缀 <code>ln</code>：<code>ln</code> 表示 “line”，即按行读取输入。与 <code>Scan</code><br>不同，<code>Scanln</code><br>在读取输入时以换行符为结束标志，因此可以读取一整行输入。这使得<br><code>Scanln</code><br>在读取多个值时更加方便，而无需手动输入空格或换行符来分隔输入。</li></ol><p>综合起来，<code>Scan</code> 是以空格为分隔符的基本扫描函数，<code>Scanf</code><br>是格式化输入函数，而 <code>Scanln</code><br>是以换行符为结束标志的按行扫描函数。根据输入的特点和需求，你可以选择适合的函数来读取输入数据。记住后缀的含义有助于理解这些函数的用途。</p></blockquote><blockquote><p>当涉及到标准输入和读取的时候，Go语言提供了一系列函数，包括<br><code>Scan</code>、<code>Scanf</code>、<code>Scanln</code>、<code>Fscan</code>、<code>Fscanf</code>、<code>Fscanln</code>、<code>Sscan</code>、<code>Sscanf</code><br>和 <code>Sscanln</code>。这些函数有不同的特点和用途，下面我会对它们进行解释。</p><ol><li><code>Scan</code>、<code>Scanf</code> 和 <code>Scanln</code>：<ul><li>这些函数从标准输入流 <code>os.Stdin</code> 中读取输入。</li><li><code>Scan</code><br>以空格为分隔符，读取多个输入值时需要手动输入空格或换行符。</li><li><code>Scanf</code> 允许你指定输入格式，以特定的格式从标准输入中读取数据。</li><li><code>Scanln</code> 以换行符为输入结束标志，可以读取一行输入。</li><li>这些函数将输入数据存储在传入的参数中，并返回读取的项目数量和可能的错误。</li></ul></li><li><code>Fscan</code>、<code>Fscanf</code> 和 <code>Fscanln</code>：<ul><li>这些函数从指定的 <code>io.Reader</code> 接口中读取输入。</li><li><code>Fscan</code><br>以空格为分隔符，读取多个输入值时需要手动输入空格或换行符。</li><li><code>Fscanf</code> 允许你指定输入格式，以特定的格式从输入中读取数据。</li><li><code>Fscanln</code> 以换行符为输入结束标志，可以读取一行输入。</li><li>这些函数将输入数据存储在传入的参数中，并返回读取的项目数量和可能的错误。</li></ul></li><li><code>Sscan</code>、<code>Sscanf</code> 和 <code>Sscanln</code>：<ul><li>这些函数从指定的字符串中读取输入。</li><li><code>Sscan</code><br>以空格为分隔符，读取多个输入值时需要手动输入空格或换行符。</li><li><code>Sscanf</code> 允许你指定输入格式，以特定的格式从字符串中读取数据。</li><li><code>Sscanln</code> 以换行符为输入结束标志，可以读取一行输入。</li><li>这些函数将输入数据存储在传入的参数中，并返回读取的项目数量和可能的错误。</li></ul></li></ol><p>总结起来，<code>Scan</code> 系列函数用于从标准输入中读取，<code>Fscan</code><br>系列函数用于从指定的 <code>io.Reader</code> 中读取，而 <code>Sscan</code><br>系列函数用于从字符串中读取。它们的区别在于读取的数据源不同，但都提供了类似的功能和参数用法。你可以根据实际的输入来源选择适合的函数来读取数据。</p></blockquote><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// scan</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;请输入年龄：&quot;</span>)</span><br><span class="line">    fmt.Scan(&amp;age)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scanf</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">    fmt.Scanf(<span class="string">&quot;%s&quot;</span>, &amp;name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scanln</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;请输入年龄：&quot;</span>)</span><br><span class="line">    fmt.Scanln(&amp;age)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// test2()</span></span><br><span class="line">    test3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他实例参考官网</p></blockquote><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span></span><br></pre></td></tr></table></figure><p><code>Errorf</code> 根据于格式说明符进行格式化，并将字符串作为满足 error<br>的值返回，其返回类型是error．</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprint</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>)　</span><br></pre></td></tr></table></figure><p><code>Fprint</code> 使用其操作数的默认格式进行格式化并写入到<br>w。当两个连续的操作数均不为字符串时，它们之间就会添加空格。它返回写入的字节数以及任何遇到的错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) <span class="comment">//</span></span><br></pre></td></tr></table></figure><p><code>Fprintf</code> 根据于格式说明符进行格式化并写入到<br>w。它返回写入的字节数以及任何遇到的写入错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintln</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) </span><br></pre></td></tr></table></figure><p><code>Fprintln</code> 使用其操作数的默认格式进行格式化并写入到<br>w。其操作数之间总是添加空格，且总在最后追加一个换行符。它返回写入的字节数以及任何遇到的错误。</p><p><strong>实例</strong></p><p>参考官网</p><h1 id="golang标准库bufio"><a href="#golang标准库bufio" class="headerlink" title="golang标准库bufio"></a>golang标准库bufio</h1><h3 id="bufio-（buffer缓冲区-io）"><a href="#bufio-（buffer缓冲区-io）" class="headerlink" title="bufio （buffer缓冲区 io）"></a>bufio （buffer缓冲区 io）</h3><blockquote><p>bufio包实现了有缓冲的I&#x2F;O。它包装一个io.Reader或io.Writer接口对象，创建另一个也实现了该接口，且同时还提供了缓冲和一些文本I&#x2F;O的帮助函数的对象。</p></blockquote><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    defaultBufSize = <span class="number">4096</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ErrInvalidUnreadByte = errors.New(<span class="string">&quot;bufio: invalid use of UnreadByte&quot;</span>)</span><br><span class="line">    ErrInvalidUnreadRune = errors.New(<span class="string">&quot;bufio: invalid use of UnreadRune&quot;</span>)</span><br><span class="line">    ErrBufferFull        = errors.New(<span class="string">&quot;bufio: buffer full&quot;</span>)</span><br><span class="line">    ErrNegativeCount     = errors.New(<span class="string">&quot;bufio: negative count&quot;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ErrTooLong         = errors.New(<span class="string">&quot;bufio.Scanner: token too long&quot;</span>)</span><br><span class="line">    ErrNegativeAdvance = errors.New(<span class="string">&quot;bufio.Scanner: SplitFunc returns negative advance count&quot;</span>)</span><br><span class="line">    ErrAdvanceTooFar   = errors.New(<span class="string">&quot;bufio.Scanner: SplitFunc returns advance count beyond input&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>会被Scanner类型返回的错误。</p></blockquote><h4 id="type-Reader"><a href="#type-Reader" class="headerlink" title="type Reader"></a>type Reader</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</span><br><span class="line">    buf          []<span class="type">byte</span></span><br><span class="line">    rd           io.Reader <span class="comment">// reader provided by the client</span></span><br><span class="line">    r, w         <span class="type">int</span>       <span class="comment">// buf read and write positions</span></span><br><span class="line">    err          <span class="type">error</span></span><br><span class="line">    lastByte     <span class="type">int</span> <span class="comment">// last byte read for UnreadByte; -1 means invalid</span></span><br><span class="line">    lastRuneSize <span class="type">int</span> <span class="comment">// size of last rune read for UnreadRune; -1 means invalid</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Reader实现了给一个io.Reader接口对象附加缓冲。</p></blockquote><h4 id="func-NewReader"><a href="#func-NewReader" class="headerlink" title="func NewReader"></a>func NewReader</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(rd io.Reader)</span></span> *Reader</span><br></pre></td></tr></table></figure><blockquote><p>NewReader创建一个具有默认大小缓冲、从r读取的*Reader。NewReader 相当于<br>NewReaderSize(rd, 4096)</p></blockquote><h4 id="func-NewReaderSize"><a href="#func-NewReaderSize" class="headerlink" title="func NewReaderSize"></a>func NewReaderSize</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReaderSize</span><span class="params">(rd io.Reader, size <span class="type">int</span>)</span></span> *Reader</span><br></pre></td></tr></table></figure><blockquote><p>NewReaderSize创建一个具有最少有size尺寸的缓冲、从r读取的<em>Reader。如果参数r已经是一个具有足够大缓冲的</em><br>Reader类型值，会返回r。</p></blockquote><h4 id="func-Reader-Reset-r-io-Reader"><a href="#func-Reader-Reset-r-io-Reader" class="headerlink" title="func (*Reader)Reset(r io.Reader)"></a>func (*Reader)Reset(r io.Reader)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> Reset(r io.Reader)</span><br></pre></td></tr></table></figure><blockquote><p>Reset丢弃缓冲中的数据，清除任何错误，将b重设为其下层从r读取数据。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABCEFG&quot;</span>)</span><br><span class="line">   str := strings.NewReader(<span class="string">&quot;123455&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line">   b, _ := br.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   fmt.Println(b)    </span><br><span class="line">   br.Reset(str)</span><br><span class="line">   b, _ = br.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   fmt.Println(b)     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Reader-Read"><a href="#func-Reader-Read" class="headerlink" title="func (*Reader)Read"></a>func (*Reader)Read</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Read读取数据写入p。本方法返回写入p的字节数。本方法一次调用最多会调用下层Reader接口一次Read方法，因此返回值n可能小于len(p)。读取到达结尾时，返回值n将为0而err将为io.EOF。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := strings.NewReader(<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;</span>)</span><br><span class="line">    br := bufio.NewReader(s)</span><br><span class="line">    p := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := br.Read(p)</span><br><span class="line">        <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;string(p): %v\n&quot;</span>, <span class="type">string</span>(p[<span class="number">0</span>:n]))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Reader-ReadByte"><a href="#func-Reader-ReadByte" class="headerlink" title="func (*Reader)ReadByte"></a>func (*Reader)ReadByte</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> ReadByte() (c <span class="type">byte</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ReadByte读取并返回一个字节。如果没有可用的数据，会返回错误。</p></blockquote><h4 id="func-Reader-UnreadByte"><a href="#func-Reader-UnreadByte" class="headerlink" title="func (*Reader)UnreadByte"></a>func (*Reader)UnreadByte</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> UnreadByte() <span class="type">error</span></span><br></pre></td></tr></table></figure><blockquote><p>UnreadByte吐出最近一次读取操作读取的最后一个字节。（只能吐出最后一个，多次调用会出问题）</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABCDEFG&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line"></span><br><span class="line">   c, _ := br.ReadByte()</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">   c, _ = br.ReadByte()</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">   br.UnreadByte()</span><br><span class="line">   c, _ = br.ReadByte()</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Reader-ReadRune"><a href="#func-Reader-ReadRune" class="headerlink" title="func (*Reader)ReadRune"></a>func (*Reader)ReadRune</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> ReadRune() (r <span class="type">rune</span>, size <span class="type">int</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ReadRune读取一个utf-8编码的unicode码值，返回该码值、其编码长度和可能的错误。如果utf-8编码非法，读取位置只移动1字节，返回U+FFFD，返回值size为1而err为nil。如果没有可用的数据，会返回错误。</p></blockquote><h4 id="func-Reader-UnreadRune"><a href="#func-Reader-UnreadRune" class="headerlink" title="func (*Reader)UnreadRune"></a>func (*Reader)UnreadRune</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> UnreadRune() <span class="type">error</span></span><br></pre></td></tr></table></figure><blockquote><p>UnreadRune吐出最近一次ReadRune调用读取的unicode码值。如果最近一次读取不是调用的ReadRune，会返回错误。（从这点看，UnreadRune比UnreadByte严格很多）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">   s := strings.<span class="built_in">NewReader</span>(<span class="string">&quot;你好，世界！&quot;</span>)</span><br><span class="line">   br := bufio.<span class="built_in">NewReader</span>(s)</span><br><span class="line"></span><br><span class="line">   c, size, _ := br.<span class="built_in">ReadRune</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%c %v\n&quot;</span>, c, size)</span><br><span class="line"></span><br><span class="line">   c, size, _ = br.<span class="built_in">ReadRune</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%c %v\n&quot;</span>, c, size)</span><br><span class="line"></span><br><span class="line">   br.<span class="built_in">UnreadRune</span>()</span><br><span class="line">   c, size, _ = br.<span class="built_in">ReadRune</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%c %v\n&quot;</span>, c, size)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Reader-ReadLine"><a href="#func-Reader-ReadLine" class="headerlink" title="func (*Reader)ReadLine"></a>func (*Reader)ReadLine</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> ReadLine() (line []<span class="type">byte</span>, isPrefix <span class="type">bool</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ReadLine是一个低水平的行数据读取原语。大多数调用者应使用ReadBytes(‘<code>\n</code>{&#x3D;tex}’)或ReadString(‘<code>\n</code>{&#x3D;tex}’)代替，或者使用Scanner。</p><p>ReadLine尝试返回一行数据，不包括行尾标志的字节。如果行太长超过了缓冲，返回值isPrefix会被设为true，并返回行的前面一部分。该行剩下的部分将在之后的调用中返回。返回值isPrefix会在返回该行最后一个片段时才设为false。返回切片是缓冲的子切片，只在下一次读取操作之前有效。ReadLine要么返回一个非nil的line，要么返回一个非nil的err，两个返回值至少一个非nil。</p><p>返回的文本不包含行尾的标志字节（”<code>\r\n</code>{&#x3D;tex}”或”<code>\n</code>{&#x3D;tex}”）。如果输入流结束时没有行尾标志字节，方法不会出错，也不会指出这一情况。在调用ReadLine之后调用UnreadByte会总是吐出最后一个读取的字节（很可能是该行的行尾标志字节），即使该字节不是ReadLine返回值的一部分。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">   s := strings.<span class="built_in">NewReader</span>(<span class="string">&quot;ABC\nDEF\r\nGHI\r\nGHI&quot;</span>)</span><br><span class="line">   br := bufio.<span class="built_in">NewReader</span>(s)</span><br><span class="line"></span><br><span class="line">   w, isPrefix, _ := br.<span class="built_in">ReadLine</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q %v\n&quot;</span>, w, isPrefix)</span><br><span class="line"></span><br><span class="line">   w, isPrefix, _ = br.<span class="built_in">ReadLine</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q %v\n&quot;</span>, w, isPrefix)</span><br><span class="line"></span><br><span class="line">   w, isPrefix, _ = br.<span class="built_in">ReadLine</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q %v\n&quot;</span>, w, isPrefix)</span><br><span class="line"></span><br><span class="line">   w, isPrefix, _ = br.<span class="built_in">ReadLine</span>()</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q %v\n&quot;</span>, w, isPrefix)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Reader-ReadSlice"><a href="#func-Reader-ReadSlice" class="headerlink" title="func (*Reader)ReadSlice"></a>func (*Reader)ReadSlice</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> ReadSlice(delim <span class="type">byte</span>) (line []<span class="type">byte</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ReadSlice读取直到第一次遇到delim字节，返回缓冲里的包含已读取的数据和delim字节的切片。该返回值只在下一次读取操作之前合法。如果ReadSlice放在在读取到delim之前遇到了错误，它会返回在错误之前读取的数据在缓冲中的切片以及该错误（一般是io.EOF）。如果在读取到delim之前缓冲就被写满了，ReadSlice失败并返回ErrBufferFull。因为ReadSlice的返回值会被下一次I&#x2F;O操作重写，调用者应尽量使用ReadBytes或ReadString替代本法功法。当且仅当ReadBytes方法返回的切片不以delim结尾时，会返回一个非nil的错误。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">   s := strings.<span class="built_in">NewReader</span>(<span class="string">&quot;ABC,DEF,GHI,JKL&quot;</span>)</span><br><span class="line">   br := bufio.<span class="built_in">NewReader</span>(s)</span><br><span class="line"></span><br><span class="line">   w, _ := br.<span class="built_in">ReadSlice</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.<span class="built_in">ReadSlice</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.<span class="built_in">ReadSlice</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">   fmt.<span class="built_in">Printf</span>(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Reader-ReadBytes"><a href="#func-Reader-ReadBytes" class="headerlink" title="func (*Reader)ReadBytes"></a>func (*Reader)ReadBytes</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> ReadBytes(delim <span class="type">byte</span>) (line []<span class="type">byte</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ReadBytes读取直到第一次遇到delim字节，返回一个包含已读取的数据和delim字节的切片。如果ReadBytes方法在读取到delim之前遇到了错误，它会返回在错误之前读取的数据以及该错误（一般是io.EOF）。当且仅当ReadBytes方法返回的切片不以delim结尾时，会返回一个非nil的错误。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABC DEF GHI JKL&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line"></span><br><span class="line">   w, _ := br.ReadBytes(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.ReadBytes(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.ReadBytes(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Reader-ReadString"><a href="#func-Reader-ReadString" class="headerlink" title="func (*Reader)ReadString"></a>func (*Reader)ReadString</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> ReadString(delim <span class="type">byte</span>) (line <span class="type">string</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ReadString读取直到第一次遇到delim字节，返回一个包含已读取的数据和delim字节的字符串。如果ReadString方法在读取到delim之前遇到了错误，它会返回在错误之前读取的数据以及该错误（一般是io.EOF）。当且仅当ReadString方法返回的切片不以delim结尾时，会返回一个非nil的错误。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABC DEF GHI JKL&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line"></span><br><span class="line">   w, _ := br.ReadString(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.ReadString(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line"></span><br><span class="line">   w, _ = br.ReadString(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Reader-WriteTo"><a href="#func-Reader-WriteTo" class="headerlink" title="func (*Reader)WriteTo"></a>func (*Reader)WriteTo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span></span> WriteTo(w io.Writer) (n <span class="type">int64</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>WriteTo方法实现了io.WriterTo接口。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABCEFGHIJKLMN&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">   br.WriteTo(b)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="type-Writer"><a href="#type-Writer" class="headerlink" title="type Writer"></a>type Writer</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Writer <span class="keyword">struct</span> &#123;</span><br><span class="line">    err <span class="type">error</span></span><br><span class="line">    buf []<span class="type">byte</span></span><br><span class="line">    n   <span class="type">int</span></span><br><span class="line">    wr  io.Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Writer实现了为io.Writer接口对象提供缓冲。如果在向一个Writer类型值写入时遇到了错误，该对象将不再接受任何数据，且所有写操作都会返回该错误。在说有数据都写入后，调用者有义务调用Flush方法以保证所有的数据都交给了下层的io.Writer。</p></blockquote><h4 id="func-NewWriter"><a href="#func-NewWriter" class="headerlink" title="func NewWriter"></a>func NewWriter</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWriter</span><span class="params">(w io.Writer)</span></span> *Writer</span><br></pre></td></tr></table></figure><blockquote><p>NewWriter创建一个具有默认大小缓冲、写入w的*Writer。NewWriter 相当于<br>NewWriterSize(wr, 4096)</p></blockquote><h4 id="func-NewWriterSize"><a href="#func-NewWriterSize" class="headerlink" title="func NewWriterSize"></a>func NewWriterSize</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWriterSize</span><span class="params">(w io.Writer, size <span class="type">int</span>)</span></span> *Writer</span><br></pre></td></tr></table></figure><blockquote><p>NewWriterSize创建一个具有最少有size尺寸的缓冲、写入w的<em>Writer。如果参数w已经是一个具有足够大缓冲的</em>Writer类型值，会返回w。</p></blockquote><h4 id="func-Writer-Reset"><a href="#func-Writer-Reset" class="headerlink" title="func (*Writer)Reset"></a>func (*Writer)Reset</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span></span> Reset(w io.Writer)</span><br></pre></td></tr></table></figure><blockquote><p>Reset丢弃缓冲中的数据，清除任何错误，将b重设为将其输出写入w。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   bw.WriteString(<span class="string">&quot;123456789&quot;</span>)</span><br><span class="line">   c := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw.Reset(c)</span><br><span class="line">   bw.WriteString(<span class="string">&quot;456&quot;</span>)</span><br><span class="line">   bw.Flush()</span><br><span class="line">   fmt.Println(b)       </span><br><span class="line">   fmt.Println(c) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Writer-Bufferd"><a href="#func-Writer-Bufferd" class="headerlink" title="func (*Writer)Bufferd"></a>func (*Writer)Bufferd</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span></span> Buffered() <span class="type">int</span></span><br></pre></td></tr></table></figure><blockquote><p>Buffered返回缓冲中已使用的字节数。</p></blockquote><h4 id="func-Writer-Available"><a href="#func-Writer-Available" class="headerlink" title="func (*Writer)Available"></a>func (*Writer)Available</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span></span> Available() <span class="type">int</span></span><br></pre></td></tr></table></figure><blockquote><p>Available返回缓冲中还有多少字节未使用。</p></blockquote><h4 id="func-Writer-Write"><a href="#func-Writer-Write" class="headerlink" title="func (*Writer) Write"></a>func (*Writer) Write</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span></span> Write(p []<span class="type">byte</span>) (nn <span class="type">int</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Write将p的内容写入缓冲。返回写入的字节数。如果返回值nn &lt;<br>len(p)，还会返回一个错误说明原因。</p></blockquote><h4 id="func-Writer-WriteString"><a href="#func-Writer-WriteString" class="headerlink" title="func (*Writer) WriteString"></a>func (*Writer) WriteString</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span></span> WriteString(s <span class="type">string</span>) (<span class="type">int</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>WriteString写入一个字符串。返回写入的字节数。如果返回值nn &lt;<br>len(s)，还会返回一个错误说明原因。</p></blockquote><h4 id="func-Writer-WriteByte"><a href="#func-Writer-WriteByte" class="headerlink" title="func (*Writer) WriteByte"></a>func (*Writer) WriteByte</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span></span> WriteByte(c <span class="type">byte</span>) <span class="type">error</span></span><br></pre></td></tr></table></figure><blockquote><p>WriteByte写入单个字节。</p></blockquote><h4 id="func-Writer-WriteRune"><a href="#func-Writer-WriteRune" class="headerlink" title="func (*Writer) WriteRune"></a>func (*Writer) WriteRune</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span></span> WriteRune(r <span class="type">rune</span>) (size <span class="type">int</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>WriteRune写入一个unicode码值（的utf-8编码），返回写入的字节数和可能的错误。</p></blockquote><h4 id="func-Writer-Flush"><a href="#func-Writer-Flush" class="headerlink" title="func (*Writer) Flush"></a>func (*Writer) Flush</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span></span> Flush() <span class="type">error</span></span><br></pre></td></tr></table></figure><blockquote><p>Flush方法将缓冲中的数据写入下层的io.Writer接口。</p></blockquote><h4 id="func-Writer-ReadFrom"><a href="#func-Writer-ReadFrom" class="headerlink" title="func (*Writer) ReadFrom"></a>func (*Writer) ReadFrom</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span></span> ReadFrom(r io.Reader) (n <span class="type">int64</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ReadFrom实现了io.ReaderFrom接口。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   fmt.Println(bw.Available()) <span class="comment">// 4096</span></span><br><span class="line">   fmt.Println(bw.Buffered())  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">   bw.WriteString(<span class="string">&quot;ABCDEFGHIJKLMN&quot;</span>)</span><br><span class="line">   fmt.Println(bw.Available()) </span><br><span class="line">   fmt.Println(bw.Buffered())  </span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, b)      </span><br><span class="line"></span><br><span class="line">   bw.Flush()</span><br><span class="line">   fmt.Println(bw.Available())</span><br><span class="line">   fmt.Println(bw.Buffered())  </span><br><span class="line">   fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, b)     </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   <span class="comment">// 写入缓存</span></span><br><span class="line">   <span class="comment">// byte等同于 int8</span></span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">   bw.WriteByte(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">   <span class="comment">// rune等同于int32</span></span><br><span class="line">   bw.WriteRune(<span class="string">&#x27;世&#x27;</span>)</span><br><span class="line">   bw.WriteRune(<span class="string">&#x27;界&#x27;</span>)</span><br><span class="line">   bw.WriteRune(<span class="string">&#x27;！&#x27;</span>)</span><br><span class="line">   <span class="comment">// 写入b</span></span><br><span class="line">   bw.Flush()</span><br><span class="line">   fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>))</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;Hello 世界！&quot;</span>)</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   bw.ReadFrom(s)</span><br><span class="line">   <span class="comment">//bw.Flush()            //ReadFrom无需使用Flush，其自己已经写入．</span></span><br><span class="line">   fmt.Println(b) <span class="comment">// Hello 世界！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="type-ReadWriter"><a href="#type-ReadWriter" class="headerlink" title="type ReadWriter"></a>type ReadWriter</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReadWriter</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    *Reader</span><br><span class="line">    *Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ReadWriter类型保管了指向Reader和Writer类型的指针，（因此）实现了io.ReadWriter接口。</p></blockquote><h4 id="func-NewReadWriter"><a href="#func-NewReadWriter" class="headerlink" title="func NewReadWriter"></a>func NewReadWriter</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReadWriter</span><span class="params">(r *Reader, w *Writer)</span></span> *ReadWriter</span><br></pre></td></tr></table></figure><blockquote><p>NewReadWriter申请创建一个新的、将读写操作分派给r和w 的ReadWriter。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>))</span><br><span class="line">   bw := bufio.NewWriter(b)</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">   br := bufio.NewReader(s)</span><br><span class="line">   rw := bufio.NewReadWriter(br, bw)</span><br><span class="line">   p, _ := rw.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   fmt.Println(<span class="type">string</span>(p))              <span class="comment">//123</span></span><br><span class="line">   rw.WriteString(<span class="string">&quot;asdf&quot;</span>)</span><br><span class="line">   rw.Flush()</span><br><span class="line">   fmt.Println(b)                          <span class="comment">//asdf</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="type-SplitFunc"><a href="#type-SplitFunc" class="headerlink" title="type SplitFunc"></a>type SplitFunc</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SplitFunc <span class="function"><span class="keyword">func</span><span class="params">(data []<span class="type">byte</span>, atEOF <span class="type">bool</span>)</span></span> (advance <span class="type">int</span>, token []<span class="type">byte</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>SplitFunc类型代表用于对输出作词法分析的分割函数。</p><p>参数data是尚未处理的数据的一个开始部分的切片，参数atEOF表示是否Reader接口不能提供更多的数据。返回值是解析位置前进的字节数，将要返回给调用者的token切片，以及可能遇到的错误。如果数据不足以（保证）生成一个完整的token，例如需要一整行数据但data里没有换行符，SplitFunc可以返回(0,<br>nil,<br>nil)来告诉Scanner读取更多的数据写入切片然后用从同一位置起始、长度更长的切片再试一次（调用SplitFunc类型函数）。</p><p>如果返回值err非nil，扫描将终止并将该错误返回给Scanner的调用者。</p><p>除非atEOF为真，永远不会使用空切片data调用SplitFunc类型函数。然而，如果atEOF为真，data却可能是非空的、且包含着未处理的文本。</p><p>SplitFunc 的作用很简单，从 data<br>中找出你感兴趣的数据，然后返回并告诉调用者，data<br>中有多少数据你已经处理过了</p></blockquote><h3 id="func-ScanBytes"><a href="#func-ScanBytes" class="headerlink" title="func ScanBytes"></a>func ScanBytes</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanBytes</span><span class="params">(data []<span class="type">byte</span>, atEOF <span class="type">bool</span>)</span></span> (advance <span class="type">int</span>, token []<span class="type">byte</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ScanBytes是用于Scanner类型的分割函数（符合SplitFunc），本函数会将每个字节作为一个token返回。</p></blockquote><h3 id="func-ScanRunes"><a href="#func-ScanRunes" class="headerlink" title="func ScanRunes"></a>func ScanRunes</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanRunes</span><span class="params">(data []<span class="type">byte</span>, atEOF <span class="type">bool</span>)</span></span> (advance <span class="type">int</span>, token []<span class="type">byte</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><h1 id="ScanRunes是用于Scanner类型的分割函数（符合SplitFunc），本函数会将每个utf-8编码的unicode码值作为一个token返回。本函数返回的rune序列和range一个字符串的输出rune序列相同。错误的utf-8编码会翻译为U-FFFD"><a href="#ScanRunes是用于Scanner类型的分割函数（符合SplitFunc），本函数会将每个utf-8编码的unicode码值作为一个token返回。本函数返回的rune序列和range一个字符串的输出rune序列相同。错误的utf-8编码会翻译为U-FFFD" class="headerlink" title="ScanRunes是用于Scanner类型的分割函数（符合SplitFunc），本函数会将每个utf-8编码的unicode码值作为一个token返回。本函数返回的rune序列和range一个字符串的输出rune序列相同。错误的utf-8编码会翻译为U+FFFD"></a>ScanRunes是用于Scanner类型的分割函数（符合SplitFunc），本函数会将每个utf-8编码的unicode码值作为一个token返回。本函数返回的rune序列和range一个字符串的输出rune序列相同。错误的utf-8编码会翻译为U+FFFD</h1><p>“<code>\xef</code>{&#x3D;tex}<code>\xbf</code>{&#x3D;tex}<code>\xbd</code>{&#x3D;tex}”，但只会消耗一个字节。调用者无法区分正确编码的rune和错误编码的rune。</p></blockquote><h3 id="func-ScanWords"><a href="#func-ScanWords" class="headerlink" title="func ScanWords"></a>func ScanWords</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanWords</span><span class="params">(data []<span class="type">byte</span>, atEOF <span class="type">bool</span>)</span></span> (advance <span class="type">int</span>, token []<span class="type">byte</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ScanRunes是用于Scanner类型的分割函数（符合SplitFunc），本函数会将空白（参见unicode.IsSpace）分隔的片段（去掉前后空白后）作为一个token返回。本函数永远不会返回空字符串。用来找出<br>data 中的单行数据并返回（包括空行）</p></blockquote><h3 id="func-ScanLines"><a href="#func-ScanLines" class="headerlink" title="func ScanLines"></a>func ScanLines</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanLines</span><span class="params">(data []<span class="type">byte</span>, atEOF <span class="type">bool</span>)</span></span> (advance <span class="type">int</span>, token []<span class="type">byte</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>ScanLines是用于Scanner类型的分割函数（符合SplitFunc），本函数会将每一行文本去掉末尾的换行标记作为一个token返回。返回的行可以是空字符串。换行标记为一个可选的回车后跟一个必选的换行符。最后一行即使没有换行符也会作为一个token返回。</p></blockquote><h3 id="type-Scanner"><a href="#type-Scanner" class="headerlink" title="type Scanner"></a>type Scanner</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scanner <span class="keyword">struct</span> &#123;</span><br><span class="line">    r            io.Reader <span class="comment">// The reader provided by the client.</span></span><br><span class="line">    split        SplitFunc <span class="comment">// The function to split the tokens.</span></span><br><span class="line">    maxTokenSize <span class="type">int</span>       <span class="comment">// Maximum size of a token; modified by tests.</span></span><br><span class="line">    token        []<span class="type">byte</span>    <span class="comment">// Last token returned by split.</span></span><br><span class="line">    buf          []<span class="type">byte</span>    <span class="comment">// Buffer used as argument to split.</span></span><br><span class="line">    start        <span class="type">int</span>       <span class="comment">// First non-processed byte in buf.</span></span><br><span class="line">    end          <span class="type">int</span>       <span class="comment">// End of data in buf.</span></span><br><span class="line">    err          <span class="type">error</span>     <span class="comment">// Sticky error.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Scanner类型提供了方便的读取数据的接口，如从换行符分隔的文本里读取每一行。成功调用的Scan方法会逐步提供文件的token，跳过token之间的字节。token由SplitFunc类型的分割函数指定；默认的分割函数会将输入分割为多个行，并去掉行尾的换行标志。本包预定义的分割函数可以将文件分割为行、字节、unicode码值、空白分隔的word。调用者可以定制自己的分割函数。扫描会在抵达输入流结尾、遇到的第一个I&#x2F;O错误、token过大不能保存进缓冲时，不可恢复的停止。当扫描停止后，当前读取位置可能会远在最后一个获得的token后面。需要更多对错误管理的控制或token很大，或必须从reader连续扫描的程序，应使用bufio.Reader代替。</p></blockquote><h4 id="func-NewScanner"><a href="#func-NewScanner" class="headerlink" title="func NewScanner"></a>func NewScanner</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewScanner</span><span class="params">(r io.Reader)</span></span> *Scanner</span><br></pre></td></tr></table></figure><blockquote><p>NewScanner创建并返回一个从r读取数据的Scanner，默认的分割函数是ScanLines。</p></blockquote><h4 id="func-Scanner-Split"><a href="#func-Scanner-Split" class="headerlink" title="func (*Scanner) Split"></a>func (*Scanner) Split</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span></span> Split(split SplitFunc)</span><br></pre></td></tr></table></figure><blockquote><p>Split设置该Scanner的分割函数。本方法必须在Scan之前调用。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;ABC DEF GHI JKL&quot;</span>)</span><br><span class="line">   bs := bufio.NewScanner(s)</span><br><span class="line">   bs.Split(bufio.ScanWords)</span><br><span class="line">   <span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">      fmt.Println(bs.Text())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Scanner-Scan"><a href="#func-Scanner-Scan" class="headerlink" title="func (*Scanner) Scan"></a>func (*Scanner) Scan</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span></span> Scan() <span class="type">bool</span></span><br></pre></td></tr></table></figure><blockquote><p>Scan方法获取当前位置的token（该token可以通过Bytes或Text方法获得），并让Scanner的扫描位置移动到下一个token。当扫描因为抵达输入流结尾或者遇到错误而停止时，本方法会返回false。在Scan方法返回false后，Err方法将返回扫描时遇到的任何错误；除非是io.EOF，此时Err会返回nil。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := strings.NewReader(<span class="string">&quot;Hello 世界！&quot;</span>)</span><br><span class="line">    bs := bufio.NewScanner(s)</span><br><span class="line">    bs.Split(bufio.ScanBytes)</span><br><span class="line">    <span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s &quot;</span>, bs.Text())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Scanner-Bytes"><a href="#func-Scanner-Bytes" class="headerlink" title="func (*Scanner) Bytes"></a>func (*Scanner) Bytes</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span></span> Bytes() []<span class="type">byte</span></span><br></pre></td></tr></table></figure><blockquote><p>Bytes方法返回最近一次Scan调用生成的token。底层数组指向的数据可能会被下一次Scan的调用重写。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := strings.NewReader(<span class="string">&quot;Hello 世界！&quot;</span>)</span><br><span class="line">   bs := bufio.NewScanner(s)</span><br><span class="line">   bs.Split(bufio.ScanRunes)</span><br><span class="line">   <span class="keyword">for</span> bs.Scan() &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;%s &quot;</span>, bs.Text())</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="func-Scanner-Text"><a href="#func-Scanner-Text" class="headerlink" title="func (*Scanner) Text"></a>func (*Scanner) Text</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span></span> Text() <span class="type">string</span></span><br></pre></td></tr></table></figure><blockquote><p>Bytes方法返回最近一次Scan调用生成的token，会申请创建一个字符串保存token并返回该字符串。</p></blockquote><h4 id="func-Scanner-Err"><a href="#func-Scanner-Err" class="headerlink" title="func (*Scanner) Err"></a>func (*Scanner) Err</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span></span> Err() <span class="type">error</span></span><br></pre></td></tr></table></figure><blockquote><p>Err返回Scanner遇到的第一个非EOF的错误。</p></blockquote><h1 id="golang标准库log"><a href="#golang标准库log" class="headerlink" title="golang标准库log"></a>golang标准库log</h1><h2 id="log简介"><a href="#log简介" class="headerlink" title="log简介"></a>log简介</h2><p>golang内置了<code>log</code>包，实现简单的日志服务。通过调用<code>log</code>包的函数，可以实现简单的日志打印功能。</p><h2 id="log使用"><a href="#log使用" class="headerlink" title="log使用"></a>log使用</h2><p><code>log</code>包中有3个系列的日志打印函数，分别<code>print</code>系列、<code>panic</code>系列、<code>fatal</code>系列。</p><p>  函数系列   作用</p><hr><p>  print      单纯打印日志<br>  panic      打印日志，抛出panic异常<br>  fatal      打印日志，强制结束程序(os.Exit(1))，<code>defer</code>函数不会执行</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;发生了 panic错误！&quot;</span>)</span><br><span class="line">    log.Print(<span class="string">&quot;my log&quot;</span>)</span><br><span class="line">    log.Printf(<span class="string">&quot;my log %d&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">    age := <span class="number">20</span></span><br><span class="line">    log.Println(name, <span class="string">&quot;,&quot;</span>, age)</span><br><span class="line">    log.Panic(<span class="string">&quot;致命错误！&quot;</span>)</span><br><span class="line">    <span class="comment">// log.Fatal(&quot;致命错误！&quot;)</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果示例（实际结果不是这样的哦，因为panic,fatal会影响程序的执行）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>/<span class="number">11</span>/<span class="number">29</span> <span class="number">16</span>:<span class="number">45</span>:<span class="number">59</span> my log</span><br><span class="line"><span class="number">2021</span>/<span class="number">11</span>/<span class="number">29</span> <span class="number">16</span>:<span class="number">45</span>:<span class="number">59</span> my log <span class="number">100</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">11</span>/<span class="number">29</span> <span class="number">16</span>:<span class="number">45</span>:<span class="number">59</span> tom , <span class="number">20</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">11</span>/<span class="number">29</span> <span class="number">16</span>:<span class="number">45</span>:<span class="number">59</span> 致命错误！</span><br><span class="line">发生了 <span class="built_in">panic</span>错误！</span><br><span class="line"><span class="built_in">panic</span>: 致命错误！</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [running]:</span><br><span class="line">log.Panic(&#123;<span class="number">0xc000107f00</span>, <span class="number">0x3</span>, <span class="number">0xc000107f00</span>&#125;)</span><br><span class="line">    C:/Program Files/Go/src/log/log.<span class="keyword">go</span>:<span class="number">354</span> +<span class="number">0x65</span></span><br><span class="line">main.main()</span><br><span class="line">    c:/Users/<span class="number">52406</span>/Desktop/golangprojects/ryanchou612.github.io/pro01/demo.<span class="keyword">go</span>:<span class="number">15</span> +<span class="number">0x19e</span></span><br><span class="line">exit status <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="log配置"><a href="#log配置" class="headerlink" title="log配置"></a>log配置</h1><h3 id="标准log配置"><a href="#标准log配置" class="headerlink" title="标准log配置"></a>标准log配置</h3><p>默认情况下log只会打印出时间，但是实际情况下我们可能还需要获取文件名，行号等信息，<code>log</code>包提供给我们定制的接口。<br><code>log</code>包提供两个标准log配置的相关方法：</p><pre><code>func Flags() int  // 返回标准log输出配置func SetFlags(flag int)  // 设置标准log输出配置</code></pre><h4 id="flag参数"><a href="#flag参数" class="headerlink" title="flag参数"></a>flag参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">    // 控制输出日志信息的细节，不能控制输出的顺序和格式。</span><br><span class="line">    // 输出的日志在每一项后会有一个冒号分隔：例如2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message</span><br><span class="line">    Ldate         = 1 &lt;&lt; iota     // 日期：2009/01/23</span><br><span class="line">    Ltime                         // 时间：01:23:23</span><br><span class="line">    Lmicroseconds                 // 微秒级别的时间：01:23:23.123123（用于增强Ltime位）</span><br><span class="line">    Llongfile                     // 文件全路径名+行号： /a/b/c/d.go:23</span><br><span class="line">    Lshortfile                    // 文件名+行号：d.go:23（会覆盖掉Llongfile）</span><br><span class="line">    LUTC                          // 使用UTC时间</span><br><span class="line">    LstdFlags     = Ldate | Ltime // 标准logger的初始值</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="标准日志配置示例"><a href="#标准日志配置示例" class="headerlink" title="标准日志配置示例"></a>标准日志配置示例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := log.Flags()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">    log.SetFlags(log.Ldate | log.Ltime | log.Llongfile)</span><br><span class="line">    log.Print(<span class="string">&quot;my log&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><pre><code>i: 32021/11/29 16:49:53 c:/Users/52406/Desktop/golangprojects/ryanchou612.github.io/pro01/demo.go:12: my log</code></pre><h3 id="日志前缀配置"><a href="#日志前缀配置" class="headerlink" title="日志前缀配置"></a>日志前缀配置</h3><p><code>log</code>包提供两个日志前缀配置的相关函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Prefix</span><span class="params">()</span></span> <span class="type">string</span>  <span class="comment">// 返回日志的前缀配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetPrefix</span><span class="params">(prefix <span class="type">string</span>)</span></span>  <span class="comment">// 设置日志前缀</span></span><br></pre></td></tr></table></figure><h4 id="日志前缀配置实例"><a href="#日志前缀配置实例" class="headerlink" title="日志前缀配置实例"></a>日志前缀配置实例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := log.Prefix()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    log.SetPrefix(<span class="string">&quot;MyLog: &quot;</span>)</span><br><span class="line">    s = log.Prefix()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    log.Print(<span class="string">&quot;my log...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><pre><code>s: s: MyLog: MyLog: 2021/11/29 16:51:55 my log...</code></pre><h3 id="日志输出位置配置"><a href="#日志输出位置配置" class="headerlink" title="日志输出位置配置"></a>日志输出位置配置</h3><p>前面介绍的都是将日志输出到控制台上，golang的<code>log</code>包还支持将日志输出到文件中。<code>log</code>包提供了<code>func SetOutput(w io.Writer)</code>函数，将日志输出到文件中。</p><h4 id="日志输出位置配置-1"><a href="#日志输出位置配置-1" class="headerlink" title="日志输出位置配置"></a>日志输出位置配置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f, err := os.OpenFile(<span class="string">&quot;a.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Panic(<span class="string">&quot;打开日志文件异常&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    log.SetOutput(f)</span><br><span class="line">    log.Print(<span class="string">&quot;my log...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong>日志输出到当前目录下a.log文件中</p><pre><code>2021/11/29 16:57:13 my log...</code></pre><h3 id="自定义logger"><a href="#自定义logger" class="headerlink" title="自定义logger"></a>自定义logger</h3><p><code>log</code>包为我们提供了内置函数，让我们能自定义logger。从效果上来看，就是将标题3中的标准日志配置、日志前缀配置、日志输出位置配置整合到一个函数中，使日志配置不在那么繁琐。<br><code>log</code>包中提供了<code>func New(out io.Writer, prefix string, flag int) *Logger</code>函数来实现自定义logger。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> logger *log.Logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    logFile, err := os.OpenFile(<span class="string">&quot;a.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Panic(<span class="string">&quot;打开日志文件异常&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    logger = log.New(logFile, <span class="string">&quot;success&quot;</span>, log.Ldate | log.Ltime | log.Lshortfile)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    logger.Println(<span class="string">&quot;自定义logger&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang标准库builtin"><a href="#golang标准库builtin" class="headerlink" title="golang标准库builtin"></a>golang标准库builtin</h1><p>这个包提供了一些类型声明、变量和常量声明，还有一些便利函数，这个包不需要导入，这些变量和函数就可以直接使用。</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(slice []Type, elems ...Type)</span></span> []Type</span><br><span class="line"></span><br><span class="line">slice = <span class="built_in">append</span>(slice, elem1, elem2)　　<span class="comment">//直接在slice后面添加单个元素，添加元素类型可以和slice相同，也可以不同</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, anotherSlice...)　　<span class="comment">//直接将另外一个slice添加到slice后面，但其本质还是将anotherSlice中的元素一个一个添加到slice中，和第一种方式类似．</span></span><br></pre></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    i := <span class="built_in">append</span>(s1, <span class="number">4</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">    s2 := []<span class="type">int</span>&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">    i2 := <span class="built_in">append</span>(s1, s2...)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;i2: %v\n&quot;</span>, i2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="len"><a href="#len" class="headerlink" title="len"></a>len</h2><p>返回，数组、切片、字符串、通道的长度</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    s1 := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    i := <span class="built_in">len</span>(s1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">    s2 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len(s2): %v\n&quot;</span>, <span class="built_in">len</span>(s2))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="print、println"><a href="#print、println" class="headerlink" title="print、println"></a>print、println</h2><p>打印输出到控制台。</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">    age := <span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(name, <span class="string">&quot; &quot;</span>, age, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    <span class="built_in">println</span>(name, <span class="string">&quot; &quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h3><p>抛出一个panic异常</p><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;panic 异常后执行...&quot;</span>)</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;panic 错误...&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="new和make"><a href="#new和make" class="headerlink" title="new和make"></a>new和make</h3><p><code>new</code>和<code>make</code>区别：</p><ol><li><code>make</code>只能用来分配及<strong>初始化</strong>类型为<code>slice</code>，<code>map</code>，<code>chan</code>的数据；<code>new</code>可以分配任意类型的数据</li><li><code>new</code>分配返回的是指针，即类型<code>*T</code>；<code>make</code>返回引用，即<code>T</code>；</li><li><code>new</code>分配的空间被清零，<code>make</code>分配后，会进行<strong>初始化</strong>。</li></ol><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p><strong>new</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testNew</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b := <span class="built_in">new</span>(<span class="type">bool</span>)</span><br><span class="line">    fmt.Println(*b)</span><br><span class="line">    i := <span class="built_in">new</span>(<span class="type">int</span>)</span><br><span class="line">    fmt.Println(*i)</span><br><span class="line">    s := <span class="built_in">new</span>(<span class="type">string</span>)</span><br><span class="line">    fmt.Println(*s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    testNew()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>make</strong></p><blockquote><p>内建函数make(T,<br>args)与new(T)的用途不一样。它只用来创建slice，map和channel，并且返回一个初始化的(而不是置零)，类型为T的值（而不是*T）。之所以有所不同，是因为这三个类型的背后引用了使用前必须初始化的数据结构。例如，slice是一个三元描述符，包含一个指向数据（在数组中）的指针，长度，以及容量，在这些项被初始化之前，slice都是nil的。对于slice，map和channel，make初始化这些内部数据结构，并准备好可用的值。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>分配一个有100个int的数组，然后创建一个长度为10，容量为100的slice结构，该slice引用包含前10个元素的数组。对应的，new([]int)返回一个指向新分配的，被置零的slice结构体的指针，即指向值为nil的slice的指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p *[]<span class="type">int</span> = <span class="built_in">new</span>([]<span class="type">int</span>)       <span class="comment">// allocates slice structure; *p == nil; rarely useful</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> v  []<span class="type">int</span> = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">100</span>) <span class="comment">// the slice v now refers to a new array of 100 ints</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Unnecessarily complex:这种做法实在是很蛋疼</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p *[]<span class="type">int</span> = <span class="built_in">new</span>([]<span class="type">int</span>)</span><br><span class="line">*p = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Idiomatic:习惯的做法</span></span><br><span class="line">v := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">p: &amp;[]</span><br><span class="line">v: [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;golang标准库os模块-文件目录相关&quot;&gt;&lt;a href=&quot;#golang标准库os模块-文件目录相关&quot; class=&quot;headerlink&quot; title=&quot;golang标准库os模块-文件目录相关&quot;&gt;&lt;/a&gt;golang标准库os模块-文件目录相关&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://ryanchou612.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记｜Golang并发编程</title>
    <link href="https://ryanchou612.github.io/posts/eae62c98.html"/>
    <id>https://ryanchou612.github.io/posts/eae62c98.html</id>
    <published>2023-05-10T05:21:32.000Z</published>
    <updated>2023-07-14T15:05:48.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang并发编程之协程"><a href="#golang并发编程之协程" class="headerlink" title="golang并发编程之协程"></a>golang并发编程之协程</h1><p>Golang 中的并发是<strong>函数</strong>相互独立运行的能力。<strong>Goroutines</strong><br>是并发运行的函数。Golang 提供了 Goroutines 作为并发处理操作的一种方式。</p><p>创建一个协程非常简单，就是在一个任务函数前面添加一个go关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> task()</span><br></pre></td></tr></table></figure><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">        time.Sleep(time.Millisecond * <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> show(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">    show(<span class="string">&quot;golang&quot;</span>) <span class="comment">// 在main协程中执行，如果它前面也添加go，程序没有输出</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>查看 go 关键字去掉的运行效果</p></blockquote><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">responseSize</span><span class="params">(url <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Step1: &quot;</span>, url)</span><br><span class="line">    response, err := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Step2: &quot;</span>, url)</span><br><span class="line">    <span class="keyword">defer</span> response.Body.Close()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Step3: &quot;</span>, url)</span><br><span class="line">    body, err := ioutil.ReadAll(response.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Step4: &quot;</span>, <span class="built_in">len</span>(body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> responseSize(<span class="string">&quot;https://ryanchou612.github.io&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> responseSize(<span class="string">&quot;https://baidu.com&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> responseSize(<span class="string">&quot;https://jd.com&quot;</span>)</span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang并发编程之通道channel"><a href="#golang并发编程之通道channel" class="headerlink" title="golang并发编程之通道channel"></a>golang并发编程之通道channel</h1><p>Go 提供了一种称为通道的机制，用于在 goroutine 之间<strong>共享数据</strong>。当您作为<br>goroutine 执行并发活动时，需要在 goroutine 之间共享资源或数据，通道充当<br>goroutine 之间的管道（管道）并提供一种机制来保证同步交换。</p><p>需要在声明通道时指定<strong>数据类型</strong>。我们可以共享内置、命名、结构和引用类型的值和指针。数据在通道上传递：在任何给定时间只有一个<br>goroutine 可以访问数据项：因此按照设计不会发生数据竞争。</p><p>根据数据交换的行为，有两种类型的通道：无缓冲通道和缓冲通道。无缓冲通道用于执行<br>goroutine<br>之间的同步通信，而缓冲通道用于执行异步通信。无缓冲通道保证在发送和接收发生的瞬间执行两个<br>goroutine 之间的交换。缓冲通道没有这样的保证。</p><p><strong>通道由 make 函数创建，该函数指定 chan 关键字和通道的元素类型。</strong></p><h3 id="这是创建无缓冲和缓冲通道的代码块："><a href="#这是创建无缓冲和缓冲通道的代码块：" class="headerlink" title="这是创建无缓冲和缓冲通道的代码块："></a>这是创建无缓冲和缓冲通道的代码块：</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Unbuffered</span> := <span class="title function_">make</span>(chan int) <span class="comment">// 整型无缓冲通道</span></span><br><span class="line">buffered := <span class="title function_">make</span>(chan int, <span class="number">10</span>)  <span class="comment">// 整型有缓冲通道</span></span><br></pre></td></tr></table></figure><p>使用内置函数<code>make</code>创建无缓冲和缓冲通道。<code>make</code>的第一个参数需要关键字<code>chan</code>，然后是通道允许交换的数据类型。</p><h3 id="这是将值发送到通道的代码块需要使用-lt-运算符："><a href="#这是将值发送到通道的代码块需要使用-lt-运算符：" class="headerlink" title="这是将值发送到通道的代码块需要使用 &lt;- 运算符："></a>这是将值发送到通道的代码块需要使用 <code>&lt;-</code> 运算符：</h3><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">goroutine1 := <span class="title function_">make</span>(chan string, <span class="number">5</span>) <span class="comment">// 字符串缓冲通道</span></span><br><span class="line">goroutine1 &lt;- <span class="string">&quot;Australia&quot;</span> <span class="comment">// 通过通道发送字符串</span></span><br></pre></td></tr></table></figure><p>一个包含 5 个值的缓冲区的字符串类型的 goroutine1<br>通道。然后我们通过通道发送字符串”Australia”。</p><h3 id="这是从通道接收值的代码块："><a href="#这是从通道接收值的代码块：" class="headerlink" title="这是从通道接收值的代码块："></a>这是从通道接收值的代码块：</h3><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data := <span class="language-xml">&lt;-goroutine1 // 从通道接收字符串</span></span><br></pre></td></tr></table></figure><p><code>&lt;-</code> 运算符附加到通道变量（goroutine1）的左侧，以接收来自通道的值。</p><h2 id="无缓冲通道"><a href="#无缓冲通道" class="headerlink" title="无缓冲通道"></a>无缓冲通道</h2><p>在无缓冲通道中，在接收到任何值之前没有能力保存它。在这种类型的通道中，发送和接收<br>goroutine 在任何发送或接收操作完成之前的同一时刻都准备就绪。如果两个<br>goroutine 没有在同一时刻准备好，则通道会让执行其各自发送或接收操作的<br>goroutine<br>首先等待。同步是通道上发送和接收之间交互的基础。没有另一个就不可能发生。</p><h2 id="缓冲通道"><a href="#缓冲通道" class="headerlink" title="缓冲通道"></a>缓冲通道</h2><p>在缓冲通道中，有能力在接收到一个或多个值之前保存它们。在这种类型的通道中，不要强制<br>goroutine<br>在同一时刻准备好执行发送和接收。当发送或接收阻塞时也有不同的条件。只有当通道中没有要接收的值时，接收才会阻塞。仅当没有可用缓冲区来放置正在发送的值时，发送才会阻塞。</p><h2 id="通道的发送和接收特性"><a href="#通道的发送和接收特性" class="headerlink" title="通道的发送和接收特性"></a>通道的发送和接收特性</h2><ol><li>对于同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的。</li><li>发送操作和接收操作中对元素值的处理都是不可分割的。</li><li>发送操作在完全完成之前会被阻塞。接收操作也是如此。</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建int类型通道，只能传入int类型值</span></span><br><span class="line"><span class="keyword">var</span> values = <span class="title function_">make</span>(chan int)</span><br><span class="line"></span><br><span class="line">func <span class="title function_">send</span>(<span class="params"></span>) &#123;</span><br><span class="line">    rand.<span class="title class_">Seed</span>(time.<span class="title class_">Now</span>().<span class="title class_">UnixNano</span>())</span><br><span class="line">    value := rand.<span class="title class_">Intn</span>(<span class="number">10</span>)</span><br><span class="line">    fmt.<span class="title class_">Printf</span>(<span class="string">&quot;send: %v\n&quot;</span>, value)</span><br><span class="line">    <span class="comment">// time.Sleep(time.Second * 5)</span></span><br><span class="line">    values &lt;- value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 从通道接收值</span></span><br><span class="line">    defer <span class="title function_">close</span>(values)</span><br><span class="line">    go <span class="title function_">send</span>()</span><br><span class="line">    fmt.<span class="title class_">Println</span>(<span class="string">&quot;wait...&quot;</span>)</span><br><span class="line">    value := <span class="language-xml">&lt;-values</span></span><br><span class="line"><span class="language-xml">    fmt.Printf(&quot;receive: %v\n&quot;, value)</span></span><br><span class="line"><span class="language-xml">    fmt.Println(&quot;end...&quot;)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wait...</span><br><span class="line">send: <span class="number">2</span></span><br><span class="line">receive: <span class="number">2</span></span><br><span class="line">end...</span><br></pre></td></tr></table></figure><h1 id="golang并发编程之WaitGroup实现同步"><a href="#golang并发编程之WaitGroup实现同步" class="headerlink" title="golang并发编程之WaitGroup实现同步"></a>golang并发编程之WaitGroup实现同步</h1><p><strong>实例演示</strong></p><p>查看添加<code>WaitGroup</code>和不添加<code>WaitGroup</code>的区别</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done() <span class="comment">// goroutine结束就登记-1</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello Goroutine!&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>) <span class="comment">// 启动一个goroutine就登记+1</span></span><br><span class="line">        <span class="keyword">go</span> hello(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有登记的goroutine都结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang并发编程之runtime包"><a href="#golang并发编程之runtime包" class="headerlink" title="golang并发编程之runtime包"></a>golang并发编程之runtime包</h1><p>runtime包里面定义了一些协程管理相关的api</p><h2 id="runtime-Gosched"><a href="#runtime-Gosched" class="headerlink" title="runtime.Gosched()"></a>runtime.Gosched()</h2><p>让出CPU时间片，重新等待安排任务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        fmt.Println(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> show(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">    <span class="comment">// 主协程</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="comment">// 切一下，再次分配任务</span></span><br><span class="line">        runtime.Gosched() <span class="comment">// 注释掉查看结果</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="runtime-Goexit"><a href="#runtime-Goexit" class="headerlink" title="runtime.Goexit()"></a>runtime.Goexit()</h2><p>退出当前协程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">5</span> &#123;</span><br><span class="line">            runtime.Goexit()</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> show()</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="runtime-GOMAXPROCS"><a href="#runtime-GOMAXPROCS" class="headerlink" title="runtime.GOMAXPROCS"></a>runtime.GOMAXPROCS</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;A:&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;B:&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;runtime.NumCPU(): %v\n&quot;</span>, runtime.NumCPU())</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">2</span>) <span class="comment">// 修改为1查看效果</span></span><br><span class="line">    <span class="keyword">go</span> a()</span><br><span class="line">    <span class="keyword">go</span> b()</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang并发编程之Mutex互斥锁实现同步"><a href="#golang并发编程之Mutex互斥锁实现同步" class="headerlink" title="golang并发编程之Mutex互斥锁实现同步"></a>golang并发编程之Mutex互斥锁实现同步</h1><p>除了使用channel实现同步之外，还可以使用Mutex互斥锁的方式实现同步。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wt sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wt.Done()</span><br><span class="line">    lock.Lock()</span><br><span class="line">    m += <span class="number">1</span></span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">10</span>)</span><br><span class="line">    lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wt.Done()</span><br><span class="line">    lock.Lock()</span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">2</span>)</span><br><span class="line">    m -= <span class="number">1</span></span><br><span class="line">    lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> add()</span><br><span class="line">        wt.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> sub()</span><br><span class="line">        wt.Add(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wt.Wait()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;m: %v\n&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang并发编程之channel的遍历"><a href="#golang并发编程之channel的遍历" class="headerlink" title="golang并发编程之channel的遍历"></a>golang并发编程之channel的遍历</h1><h2 id="方法1-for循环-if判断"><a href="#方法1-for循环-if判断" class="headerlink" title="方法1 for循环+if判断"></a>方法1 for循环+if判断</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            c &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(c)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> data, ok := &lt;-c; ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;data: %v\n&quot;</span>, data)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法2-for-range"><a href="#方法2-for-range" class="headerlink" title="方法2 for range"></a>方法2 for range</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            c &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(c)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> c &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果通道关闭，读多写少，没有了就是默认值，例如，int<br>就是0，如果没有关闭就会死锁。</p><p>这句话的意思是：在从一个已经关闭的通道中读取数据时，如果通道中没有任何数据可以读取，那么读取操作就会立即返回一个默认值，例如，对于类型为<br><code>int</code> 的通道，如果没有数据可读，那么读取操作就会返回默认值<br>0。但是，如果通道没有关闭，而且当前没有数据可读，那么读取操作就会一直等待直到有数据可读，如果一直没有数据可读，那么程序就会出现死锁的情况。</p><p>在 Go<br>语言中，如果在一个已经关闭的通道中读取数据，那么读取操作会一直返回通道中的数据，直到通道中的数据全部被读取完毕为止。如果通道中没有数据可以读取，那么读取操作就会返回默认值。这个默认值取决于通道的元素类型，例如，对于类型为<br><code>int</code> 的通道，如果没有数据可读，那么读取操作就会返回默认值<br>0。这种机制使得从已经关闭的通道中读取数据更加安全和方便。</p></blockquote><h1 id="golang并发编程之select"><a href="#golang并发编程之select" class="headerlink" title="golang并发编程之select"></a>golang并发编程之select</h1><ol><li><p>select是Go中的一个控制结构，类似于<code>switch</code>语句，用于处理异步IO操作。<code>select</code>会监听case语句中channel的读写操作，当case中channel读写操作为非阻塞状态（即能读写）时，将会触发相应的动作。</p><blockquote><p>select中的case语句必须是一个channel操作</p><p>select中的default子句总是可运行的。</p></blockquote></li><li><p>如果有多个<code>case</code>都可以运行，<code>select</code>会随机公平地选出一个执行，其他不会执行。</p></li><li><p>如果没有可运行的<code>case</code>语句，且有<code>default</code>语句，那么就会执行<code>default</code>的动作。</p></li><li><p>如果没有可运行的<code>case</code>语句，且没有<code>default</code>语句，<code>select</code>将阻塞，直到某个<code>case</code>通信可以运行</p></li></ol><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chanInt = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">var</span> chanStr = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        chanInt &lt;- <span class="number">100</span></span><br><span class="line">        chanStr &lt;- <span class="string">&quot;hello&quot;</span></span><br><span class="line">        <span class="built_in">close</span>(chanInt)</span><br><span class="line">        <span class="built_in">close</span>(chanStr)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> r := &lt;-chanInt:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;chanInt: %v\n&quot;</span>, r)</span><br><span class="line">        <span class="keyword">case</span> r := &lt;-chanStr:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;chanStr: %v\n&quot;</span>, r)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;default...&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码创建了两个通道 <code>chanInt</code> 和<br><code>chanStr</code>，并启动了一个协程，该协程会向这两个通道中写入数据并在写入完成后关闭这两个通道。主函数中使用了<br><code>select</code> 语句从这两个通道中读取数据，并通过 <code>default</code><br>分支处理通道中没有数据可读的情况。具体解释如下：</p><ol><li>在主函数中创建了两个通道 <code>chanInt</code> 和 <code>chanStr</code>。</li><li>启动一个匿名协程，该协程会向 <code>chanInt</code> 和 <code>chanStr</code><br>中写入数据并在写入完成后关闭这两个通道。</li><li>在主函数中使用 <code>select</code> 语句从 <code>chanInt</code> 和 <code>chanStr</code><br>中读取数据。<code>select</code><br>语句会在多个通道上等待数据的到来，并在其中任意一个通道中有数据可读时立即执行对应的<br>case 语句块。如果没有任何一个通道中有数据可读，那么就执行<br><code>default</code> 分支。</li><li>在 <code>case r := &lt;-chanInt:</code> 分支中，使用 <code>r</code> 变量接收 <code>chanInt</code><br>中的数据。如果 <code>chanInt</code><br>已经被关闭，并且其中没有数据可读，那么读取操作就会立即返回一个默认值。在这个例子中，因为<br><code>chanInt</code> 被关闭时已经写入了数据 <code>100</code>，所以在读取 <code>chanInt</code><br>中的数据时，实际上会读取到这个数据。</li><li>在 <code>case r := &lt;-chanStr:</code> 分支中，使用 <code>r</code> 变量接收 <code>chanStr</code><br>中的数据。如果 <code>chanStr</code><br>已经被关闭，并且其中没有数据可读，那么读取操作就会立即返回一个默认值。在这个例子中，因为<br><code>chanStr</code> 被关闭时已经写入了数据 <code>&quot;hello&quot;</code>，所以在读取 <code>chanStr</code><br>中的数据时，实际上会读取到这个数据。</li><li>在 <code>default</code><br>分支中，打印一条提示信息。在这个例子中，因为协程只在启动时向通道中写入了一次数据并关闭了通道，所以在之后的循环中，每个通道只会有一次机会返回数据。在第一次循环结束后，这两个通道就已经没有数据可读了。因此，在之后的循环中，程序会一直执行<br><code>default</code> 分支，并打印出 “default…” 的提示信息。</li><li>在每次循环结束后，程序使用 <code>time.Sleep(time.Second)</code><br>函数使当前协程休眠一秒钟。这样做的目的是为了让程序可以看到输出的结果，因为输出的结果不会瞬间出现，而是需要一定的时间来输出。</li></ol></blockquote><blockquote><p>这是因为在你的程序中，协程在主函数开始后立即启动，向两个通道发送了数据，然后关闭这两个通道。而在主函数中，使用<br>select 语句监听这两个通道，并在没有数据可以读取时打印<br>“default…”。由于你的时间间隔为 1 秒，因此 select<br>语句会一直监听这两个通道，直到协程中的数据全部被读取完毕。由于通道在被关闭后仍然可以读取数据，因此<br>select<br>语句会一直从已关闭的通道中读取数据，但是读取到的数据已经变成了默认值，例如<br>int 类型的默认值为 0，string<br>类型的默认值为空字符串。因此你看到的输出中，最后的两行是 “chanInt:<br>0”，而不是 “chanInt: 100”。、</p><p>在你的程序中，由于协程在主函数开始后立即启动，并向两个通道发送了数据，因此<br>select 语句会在数据发送到通道后立即执行 case<br>语句，并将数据打印出来，不会进入 default<br>语句。如果你想要在没有数据可以读取时执行 default<br>语句，可以尝试将通道中的数据读取完毕后等待一段时间，再次执行 select<br>语句。例如，将时间间隔改为 3<br>秒，然后在协程中向通道发送一条额外的数据，在主函数中使用 for<br>循环将所有数据从通道中读取完毕，最后再执行一次 select<br>语句即可看到输出结果中包含 default 语句。</p></blockquote><h1 id="golang并发编程之Timer"><a href="#golang并发编程之Timer" class="headerlink" title="golang并发编程之Timer"></a>golang并发编程之Timer</h1><p>Timer顾名思义，就是定时器的意思，可以实现一些定时操作，内部也是通过channel来实现的。</p><p><strong>实例演示</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    timer1 := time.NewTimer(time.Second * <span class="number">2</span>)</span><br><span class="line">    t1 := time.Now()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;t1:%v\n&quot;</span>, t1)</span><br><span class="line"></span><br><span class="line">    t2 := &lt;-timer1.C</span><br><span class="line">    fmt.Printf(<span class="string">&quot;t2:%v\n&quot;</span>, t2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果只是想单纯的等待的话，可以使用 time.Sleep 来实现</span></span><br><span class="line">    timer2 := time.NewTimer(time.Second * <span class="number">2</span>)</span><br><span class="line">    &lt;-timer2.C</span><br><span class="line">    fmt.Println(<span class="string">&quot;2s后&quot;</span>)</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;再一次2s后&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &lt;-time.After(time.Second * <span class="number">2</span>) <span class="comment">//time.After函数的返回值是chan Time</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;再再一次2s后&quot;</span>)</span><br><span class="line"></span><br><span class="line">    timer3 := time.NewTimer(time.Second)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        &lt;-timer3.C</span><br><span class="line">        fmt.Println(<span class="string">&quot;Timer 3 expired&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    stop := timer3.Stop() <span class="comment">//停止定时器</span></span><br><span class="line">    <span class="comment">////阻止timer事件发生，当该函数执行后，timer计时器停止，相应的事件不再执行</span></span><br><span class="line">    <span class="keyword">if</span> stop &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Timer 3 stopped&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;before&quot;</span>)</span><br><span class="line">    timer4 := time.NewTimer(time.Second * <span class="number">5</span>) <span class="comment">//原来设置5s</span></span><br><span class="line">    timer4.Reset(time.Second * <span class="number">1</span>)            <span class="comment">//重新设置时间,即修改NewTimer的时间</span></span><br><span class="line">    &lt;-timer4.C</span><br><span class="line">    fmt.Println(<span class="string">&quot;after&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码演示了Go语言中的时间和定时器相关操作。</p><p>首先，代码导入了”fmt”和”time”两个包。</p><p>在主函数中，首先创建了一个定时器timer1，它会在2秒钟后触发。然后获取当前时间t1，并将其打印出来。接着，通过timer1的通道C来等待定时器的触发，一旦触发，当前时间t2将被接收并打印出来。</p><p>接下来，代码展示了其他几种等待时间的方式。首先是使用time.Sleep函数进行简单的等待，然后是使用time.After函数，它返回一个通道，当指定的时间过去后，通道将会接收到一个值，通过接收这个值来等待指定的时间。</p><p>然后，代码创建了一个定时器timer3，并在一个单独的协程中等待定时器的触发。然后调用timer3的Stop()方法来停止定时器，如果停止成功，将打印出”Timer<br>3 stopped”。</p><p>最后，代码演示了定时器的Reset()方法的使用。首先创建了一个定时器timer4，设置为5秒后触发。然后使用Reset()方法将定时器的时间重新设置为1秒。在等待定时器触发后，会打印出”after”。</p><p>总的来说，这段代码展示了Go语言中定时器的创建、等待和停止等操作，以及时间的获取和延时等操作。</p></blockquote><h1 id="golang并发编程之Ticker"><a href="#golang并发编程之Ticker" class="headerlink" title="golang并发编程之Ticker"></a>golang并发编程之Ticker</h1><p>Timer只执行一次，Ticker可以周期的执行。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Ticker 表示一个定时触发的通道（Channel），它会以固定的时间间隔重复发送值。</span></span><br><span class="line"><span class="comment">你可以使用 time.NewTicker() 函数来创建一个 Ticker，指定触发的时间间隔。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">下面是一个简单的示例代码，演示了如何使用 Ticker 每隔一秒钟打印一次时间： */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ticker := time.NewTicker(time.Second * <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">                fmt.Println(time.Now())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">    ticker.Stop()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Ticker stopped&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在上面的代码中，我们创建了一个每隔一秒钟触发一次的 Ticker，并在一个单独的 goroutine 中使用 ticker.C 来接收触发的时间，然后打印当前时间。在 main 函数中，我们让程序休眠 5 秒钟，然后停止 Ticker。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这样，每秒钟就会打印一次当前时间，直到 Ticker 停止。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结起来，Go语言中的 Ticker 提供了一种方便的方式来实现定时触发的操作，可用于定时任务、周期性的操作等场景。 */</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ticker := time.NewTicker(time.Second)</span><br><span class="line">    counter := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ = <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;ticker 1&quot;</span>)</span><br><span class="line">        counter++</span><br><span class="line">        <span class="keyword">if</span> counter &gt;= <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ticker.Stop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    chanInt := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    ticker := time.NewTicker(time.Second)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _ = <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> chanInt &lt;- <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> chanInt &lt;- <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> chanInt &lt;- <span class="number">3</span>:</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> chanInt &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;接收: %v\n&quot;</span>, v)</span><br><span class="line">        sum += v</span><br><span class="line">        <span class="keyword">if</span> sum &gt;= <span class="number">10</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;sum: %v\n&quot;</span>, sum)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang并发编程之原子变量的引入"><a href="#golang并发编程之原子变量的引入" class="headerlink" title="golang并发编程之原子变量的引入"></a>golang并发编程之原子变量的引入</h1><p><strong>先看一个实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lock.Lock()</span><br><span class="line">    i++</span><br><span class="line">    lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lock.Lock()</span><br><span class="line">    i--</span><br><span class="line">    lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> add()</span><br><span class="line">        <span class="keyword">go</span> sub()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这是我们之前的写法，使用锁实现协程的同步</p></blockquote><p><strong>下面使用原子操作</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int32</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">    atomic.AddInt32(&amp;i, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">    atomic.AddInt32(&amp;i, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> add()</span><br><span class="line">        <span class="keyword">go</span> sub()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang并发编程之原子操作详解"><a href="#golang并发编程之原子操作详解" class="headerlink" title="golang并发编程之原子操作详解"></a>golang并发编程之原子操作详解</h1><p>atomic<br>提供的原子操作能够确保任一时刻只有一个goroutine对变量进行操作，善用<br>atomic 能够避免程序中出现大量的锁操作。</p><p>atomic常见操作有：</p><ul><li>增减</li><li>载入 read</li><li>比较并交换 cas</li><li>交换</li><li>存储 write</li></ul><p>下面将分别介绍这些操作。</p><h2 id="增减操作"><a href="#增减操作" class="headerlink" title="增减操作"></a>增减操作</h2><p>atomic 包中提供了如下以Add为前缀的增减操作:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddInt32</span><span class="params">(addr *<span class="type">int32</span>, delta <span class="type">int32</span>)</span></span> (<span class="built_in">new</span> <span class="type">int32</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddInt64</span><span class="params">(addr *<span class="type">int64</span>, delta <span class="type">int64</span>)</span></span> (<span class="built_in">new</span> <span class="type">int64</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddUint32</span><span class="params">(addr *<span class="type">uint32</span>, delta <span class="type">uint32</span>)</span></span> (<span class="built_in">new</span> <span class="type">uint32</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddUint64</span><span class="params">(addr *<span class="type">uint64</span>, delta <span class="type">uint64</span>)</span></span> (<span class="built_in">new</span> <span class="type">uint64</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">AddUintptr</span><span class="params">(addr *<span class="type">uintptr</span>, delta <span class="type">uintptr</span>)</span></span> (<span class="built_in">new</span> <span class="type">uintptr</span>)</span><br></pre></td></tr></table></figure><h2 id="载入操作"><a href="#载入操作" class="headerlink" title="载入操作"></a>载入操作</h2><p>atomic 包中提供了如下以Load为前缀的增减操作:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadInt32</span><span class="params">(addr *<span class="type">int32</span>)</span></span> (val <span class="type">int32</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadInt64</span><span class="params">(addr *<span class="type">int64</span>)</span></span> (val <span class="type">int64</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadPointer</span><span class="params">(addr *unsafe.Pointer)</span></span> (val unsafe.Pointer)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadUint32</span><span class="params">(addr *<span class="type">uint32</span>)</span></span> (val <span class="type">uint32</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadUint64</span><span class="params">(addr *<span class="type">uint64</span>)</span></span> (val <span class="type">uint64</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LoadUintptr</span><span class="params">(addr *<span class="type">uintptr</span>)</span></span> (val <span class="type">uintptr</span>)</span><br></pre></td></tr></table></figure><blockquote><p>载入操作能够保证原子的读变量的值，当读取的时候，任何其他CPU操作都无法对该变量进行读写，其实现机制受到底层硬件的支持。</p></blockquote><h2 id="比较并交换"><a href="#比较并交换" class="headerlink" title="比较并交换"></a>比较并交换</h2><p>该操作简称 CAS(Compare And Swap)。 这类操作的前缀为 <code>CompareAndSwap</code> :</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapInt32</span><span class="params">(addr *<span class="type">int32</span>, old, <span class="built_in">new</span> <span class="type">int32</span>)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapInt64</span><span class="params">(addr *<span class="type">int64</span>, old, <span class="built_in">new</span> <span class="type">int64</span>)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapPointer</span><span class="params">(addr *unsafe.Pointer, old, <span class="built_in">new</span> unsafe.Pointer)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapUint32</span><span class="params">(addr *<span class="type">uint32</span>, old, <span class="built_in">new</span> <span class="type">uint32</span>)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapUint64</span><span class="params">(addr *<span class="type">uint64</span>, old, <span class="built_in">new</span> <span class="type">uint64</span>)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapUintptr</span><span class="params">(addr *<span class="type">uintptr</span>, old, <span class="built_in">new</span> <span class="type">uintptr</span>)</span></span> (swapped <span class="type">bool</span>)</span><br></pre></td></tr></table></figure><blockquote><p>该操作在进行交换前首先确保变量的值未被更改，即仍然保持参数 <code>old</code><br>所记录的值，满足此前提下才进行交换操作。CAS的做法类似操作数据库时常见的乐观锁机制。</p></blockquote><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>此类操作的前缀为 <code>Swap</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapInt32</span><span class="params">(addr *<span class="type">int32</span>, <span class="built_in">new</span> <span class="type">int32</span>)</span></span> (old <span class="type">int32</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapInt64</span><span class="params">(addr *<span class="type">int64</span>, <span class="built_in">new</span> <span class="type">int64</span>)</span></span> (old <span class="type">int64</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapPointer</span><span class="params">(addr *unsafe.Pointer, <span class="built_in">new</span> unsafe.Pointer)</span></span> (old unsafe.Pointer)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapUint32</span><span class="params">(addr *<span class="type">uint32</span>, <span class="built_in">new</span> <span class="type">uint32</span>)</span></span> (old <span class="type">uint32</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapUint64</span><span class="params">(addr *<span class="type">uint64</span>, <span class="built_in">new</span> <span class="type">uint64</span>)</span></span> (old <span class="type">uint64</span>)</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">SwapUintptr</span><span class="params">(addr *<span class="type">uintptr</span>, <span class="built_in">new</span> <span class="type">uintptr</span>)</span></span> (old <span class="type">uintptr</span>)</span><br></pre></td></tr></table></figure><blockquote><p>相对于CAS，明显此类操作更为暴力直接，并不管变量的旧值是否被改变，直接赋予新值然后返回背替换的值。</p></blockquote><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>此类操作的前缀为 <code>Store</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreInt32</span><span class="params">(addr *<span class="type">int32</span>, val <span class="type">int32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreInt64</span><span class="params">(addr *<span class="type">int64</span>, val <span class="type">int64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StorePointer</span><span class="params">(addr *unsafe.Pointer, val unsafe.Pointer)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreUint32</span><span class="params">(addr *<span class="type">uint32</span>, val <span class="type">uint32</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreUint64</span><span class="params">(addr *<span class="type">uint64</span>, val <span class="type">uint64</span>)</span></span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">StoreUintptr</span><span class="params">(addr *<span class="type">uintptr</span>, val <span class="type">uintptr</span>)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>此类操作确保了写变量的原子性，避免其他操作读到了修改变量过程中的脏数据。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;golang并发编程之协程&quot;&gt;&lt;a href=&quot;#golang并发编程之协程&quot; class=&quot;headerlink&quot; title=&quot;golang并发编程之协程&quot;&gt;&lt;/a&gt;golang并发编程之协程&lt;/h1&gt;&lt;p&gt;Golang 中的并发是&lt;strong&gt;函数&lt;/st</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://ryanchou612.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记｜Golang基础语法</title>
    <link href="https://ryanchou612.github.io/posts/3e97faf3.html"/>
    <id>https://ryanchou612.github.io/posts/3e97faf3.html</id>
    <published>2023-05-09T09:56:51.000Z</published>
    <updated>2023-07-14T15:03:55.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang标识符、关键字、命名规则"><a href="#golang标识符、关键字、命名规则" class="headerlink" title="golang标识符、关键字、命名规则"></a>golang标识符、关键字、命名规则</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符的英文是<code>identifier</code>，通俗的讲，就是给变量、常量、函数、方法、结构体、数组、切片、接口起名字。</p><h3 id="标识符的组成"><a href="#标识符的组成" class="headerlink" title="标识符的组成"></a>标识符的组成</h3><ol><li>标识符由数字、字母和下划线(<code>_</code>)组成。123 abc _</li><li>只能以字母和下划线(<code>_</code>)<strong>开头</strong>。abc123 _sysVar 123abc</li><li>标识符区分大小写。 name Name NAME</li></ol><h3 id="举例说明标识符的命名"><a href="#举例说明标识符的命名" class="headerlink" title="举例说明标识符的命名"></a>举例说明标识符的命名</h3><p>正确的命名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">  <span class="keyword">var</span> age<span class="type">int</span></span><br><span class="line">  <span class="keyword">var</span> _sys <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误的标识符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="number">1</span>name <span class="type">string</span></span><br><span class="line">  <span class="keyword">var</span> &amp;age<span class="type">int</span></span><br><span class="line">  <span class="keyword">var</span> !email</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go语言关键字"><a href="#go语言关键字" class="headerlink" title="go语言关键字"></a>go语言关键字</h3><hr><p>go语言提供了25个关键字，如下所示</p><table><thead><tr><th>braek</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符，其中包含了基本类型的名称和一些基本的内置函数，见下表：</p><table><thead><tr><th align="left">append</th><th align="left">bool</th><th align="left">byte</th><th align="left">cap</th><th align="left">close</th><th align="left">complex</th><th align="left">complex64</th><th align="left">complex128</th><th align="left">uint16</th></tr></thead><tbody><tr><td align="left">copy</td><td align="left">false</td><td align="left">float32</td><td align="left">float64</td><td align="left">imag</td><td align="left">int</td><td align="left">int8</td><td align="left">int16</td><td align="left">uint32</td></tr><tr><td align="left">int32</td><td align="left">int64</td><td align="left">iota</td><td align="left">len</td><td align="left">make</td><td align="left">new</td><td align="left">nil</td><td align="left">panic</td><td align="left">uint64</td></tr><tr><td align="left">print</td><td align="left">println</td><td align="left">real</td><td align="left">recover</td><td align="left">string</td><td align="left">true</td><td align="left">uint</td><td align="left">uint8</td><td align="left">uintptr</td></tr></tbody></table><h2 id="go语言命名规范"><a href="#go语言命名规范" class="headerlink" title="go语言命名规范"></a>go语言命名规范</h2><h5 id="Go是一门区分大小写的语言"><a href="#Go是一门区分大小写的语言" class="headerlink" title="Go是一门区分大小写的语言"></a>Go是一门区分大小写的语言</h5><p>命名规则涉及变量、常量、全局函数、结构、接口、方法等的命名。 Go语言从语法层面进行了以下限定：任何需要对外暴露的名字必须以大写字母开头，不需要对外暴露的则应该以小写字母开头。</p><p>当命名（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：<code>GetUserName</code>，那么使用这种形式的标识符的对象就<strong>可以被外部包的代码所使用</strong>（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 <code>public</code>）； <strong>命名如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的</strong>（像面向对象语言中的 <code>private</code> ）</p><h3 id="包名称"><a href="#包名称" class="headerlink" title="包名称"></a>包名称</h3><p>保持<code>package</code>的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，尽量和标准库不要冲突。包名应该为<strong>小写</strong>单词，不要使用下划线或者混合大小写。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"><span class="keyword">package</span> service</span><br></pre></td></tr></table></figure><h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>尽量采取有意义的文件名，简短，有意义，应该为<strong>小写</strong>单词，使用<strong>下划线</strong>分隔各个单词。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customer_dao.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><h3 id="结构体命名"><a href="#结构体命名" class="headerlink" title="结构体命名"></a>结构体命名</h3><p>采用<strong>驼峰命名法</strong>，首字母根据访问控制大写或者小写</p><p><code>struct</code> 申明和初始化格式采用多行，例如下面：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CustomerOrder <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> </span><br><span class="line">    Address <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">order := CustomerOrder&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;北京海淀&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="接口命名"><a href="#接口命名" class="headerlink" title="接口命名"></a>接口命名</h3><p>命名规则基本和上面的结构体类型</p><p>单个函数的结构名以 <strong>“er”</strong> 作为后缀，例如 <code>Reader</code> , <code>Writer</code> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">     Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>和结构体类似，变量名称一般遵循<strong>驼峰法</strong>，首字母根据访问控制原则大写或者小写，但遇到特有名词时，需要遵循以下规则：</p><p>如果变量为私有，且特有名词为首个单词，则使用小写，如 appService 若变量类型为 bool 类型，则名称应以 Has, Is, Can 或 Allow 开头</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isExist <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> hasConflict <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> canManage <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> allowGitHook <span class="type">bool</span></span><br></pre></td></tr></table></figure><h3 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h3><p>常量均需使用全部<strong>大写</strong>字母组成，并使用<strong>下划线分词</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> APP_URL = <span class="string">&quot;https://www.duoke360.com&quot;</span></span><br></pre></td></tr></table></figure><p>如果是枚举类型的常量，需要先创建相应类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scheme <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    HTTP  Scheme = <span class="string">&quot;http&quot;</span></span><br><span class="line">    HTTPS Scheme = <span class="string">&quot;https&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>错误处理的原则就是不能丢弃任何有返回err的调用，不要使用 _ 丢弃，必须全部处理。接收到错误，要么返回err，或者使用log记录下来尽早return：一旦有错误发生，马上返回，尽量不要使用panic，除非你知道你在做什么，错误描述如果是英文必须为小写，不需要标点结尾，采用独立的错误流进行处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 正常代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// 或者继续</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正常代码</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元测试文件名命名规范为 <code>example_test.go</code> 测试用例的函数名称必须以 <code>Test</code> 开头，例如：<code>TestExample</code> 每个重要的函数都要首先编写测试用例，测试用例和正规代码一起提交方便进行回归测试 。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量是计算机语言中能<strong>储存</strong>计算结果或能表示值的抽象概念。不同的变量保存的<strong>数据类型</strong>可能会不一样。</p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。<br>并且Go语言的变量声明后<strong>必须使用</strong>。</p><p><strong>声明变量的语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier <span class="keyword">type</span></span><br></pre></td></tr></table></figure><p><code>var</code>：声明变量关键字</p><p><code>identifier</code>：变量名称</p><p><code>type</code>：变量类型</p><p><strong>例如</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">    <span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> ok <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量声明"><a href="#批量声明" class="headerlink" title="批量声明"></a>批量声明</h3><p>使用一个<code>var</code>关键字，把一些变量写在一个括号<code>()</code>里</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">        age  <span class="type">int</span></span><br><span class="line">        ok   <span class="type">bool</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h2><p>Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如：<br>整型和浮点型变量的默认值为<code>0</code>。 字符串变量的默认值为空字符串<code>“”</code>。<br>布尔型变量默认为<code>false</code>。 切片、函数、指针变量的默认为<code>nil</code>。</p><p><strong>变量初始化语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure><p><strong>例如</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    <span class="keyword">var</span> site <span class="type">string</span> = <span class="string">&quot;ryanchou612.github.io&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age <span class="type">int</span> = <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类型推导</strong></p><p>我们在声明变量时，可以根据初始化值进行类型推导，从而省略类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    <span class="keyword">var</span> site = <span class="string">&quot;ryanchou612.github.io&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化多个变量</strong></p><p>可以一次初始化多个变量，中间用逗号分隔。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name, site, age = <span class="string">&quot;RyanChou&quot;</span>, <span class="string">&quot;ryanchou612.github.io&quot;</span>, <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h2><p>在<strong>函数内部</strong>，可以使用 <code>:=</code>运算符对变量进行声明和初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    site := <span class="string">&quot;ryanchou612.github.io&quot;</span></span><br><span class="line">    age := <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这种方法只适合在函数内部，函数外面不能使用。</p></blockquote><h2 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h2><p>如果我们接收到多个变量，有一些变量使用不到，可以使用下划线<code>_</code>表示变量名称，这种变量叫做匿名变量。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNameAndAge</span><span class="params">()</span></span> (<span class="type">string</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;RyanChou&quot;</span>, <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name, _ := getNameAndAge()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量，就是在程序<strong>编译阶段</strong>就确定下来的值，而程序在<strong>运行时</strong>则无法改变该值。在Go程序中，常量可以是数值类型（包括整型、浮点型和复数类型）、布尔类型、字符串类型等。</p><h2 id="定义常量的语法"><a href="#定义常量的语法" class="headerlink" title="定义常量的语法"></a>定义常量的语法</h2><p>定义一个常量使用<code>const</code>关键字，语法格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> constantName [<span class="keyword">type</span>]= value</span><br></pre></td></tr></table></figure><p><code>const</code>：定义常量关键字</p><p><code>constantName</code>：常量名称</p><p><code>type</code>：常量类型</p><p><code>value</code>：常量的值</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> PI <span class="type">float64</span> = <span class="number">3.14</span></span><br><span class="line">    <span class="keyword">const</span> PI2 = <span class="number">3.1415</span> <span class="comment">// 可以省略类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        width  = <span class="number">100</span></span><br><span class="line">        height = <span class="number">200</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> i, j = <span class="number">1</span>, <span class="number">2</span> <span class="comment">// 多重赋值</span></span><br><span class="line">    <span class="keyword">const</span> a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;foo&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>const</code>同时声明多个常量时，如果省略了值则表示和上面一行的值相同</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a1 = <span class="number">100</span></span><br><span class="line">        a2</span><br><span class="line">        a3</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a2: %v\n&quot;</span>, a2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a3: %v\n&quot;</span>, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 100a2: 100a3: 100</code></pre><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a><code>iota</code></h2><p>iota<br>比较特殊，可以被认为是一个可被编译器修改的常量，它默认开始值是<code>0</code>，每调用一次加<code>1</code>。遇到<br><code>const</code> 关键字时被重置为 <code>0</code>。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a1 = <span class="literal">iota</span></span><br><span class="line">        a2 = <span class="literal">iota</span></span><br><span class="line">        a3 = <span class="literal">iota</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a2: %v\n&quot;</span>, a2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a3: %v\n&quot;</span>, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 0a2: 1a3: 2</code></pre><p><strong>使用<code>_</code>跳过某些值</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a1 = <span class="literal">iota</span></span><br><span class="line">        _</span><br><span class="line">        a2 = <span class="literal">iota</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a2: %v\n&quot;</span>, a2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 0a2: 2</code></pre><p><strong><code>iota</code>声明中间插队</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a1 = <span class="literal">iota</span></span><br><span class="line">        a2 = <span class="number">100</span></span><br><span class="line">        a3 = <span class="literal">iota</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a2: %v\n&quot;</span>, a2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a3: %v\n&quot;</span>, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 0a2: 100a3: 2</code></pre><h1 id="go语言数据类型"><a href="#go语言数据类型" class="headerlink" title="go语言数据类型"></a>go语言数据类型</h1><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p><p>数据类型的出现是为了把数据分成所需<strong>内存大小</strong>不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p><p>Go 语言按类别有以下几种数据类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool &#x3D; true。</td></tr><tr><td align="left">2</td><td align="left"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td align="left">3</td><td align="left"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td align="left">4</td><td align="left"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型(c) 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td></tr></tbody></table><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>uint8</strong> 无符号 8 位整型 (0 到 255)</td></tr><tr><td align="left">2</td><td align="left"><strong>uint16</strong> 无符号 16 位整型 (0 到 65535)</td></tr><tr><td align="left">3</td><td align="left"><strong>uint32</strong> 无符号 32 位整型 (0 到 4294967295)</td></tr><tr><td align="left">4</td><td align="left"><strong>uint64</strong> 无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td align="left">5</td><td align="left"><strong>int8</strong> 有符号 8 位整型 (-128 到 127)</td></tr><tr><td align="left">6</td><td align="left"><strong>int16</strong> 有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td align="left">7</td><td align="left"><strong>int32</strong> 有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td align="left">8</td><td align="left"><strong>int64</strong> 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>float32</strong> IEEE-754 32位浮点型数</td></tr><tr><td align="left">2</td><td align="left"><strong>float64</strong> IEEE-754 64位浮点型数</td></tr><tr><td align="left">3</td><td align="left"><strong>complex64</strong> 32 位实数和虚数</td></tr><tr><td align="left">4</td><td align="left"><strong>complex128</strong> 64 位实数和虚数</td></tr></tbody></table><h2 id="其他数字类型"><a href="#其他数字类型" class="headerlink" title="其他数字类型"></a>其他数字类型</h2><p>以下列出了其他更多的数字类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>byte</strong> 类似 uint8</td></tr><tr><td align="left">2</td><td align="left"><strong>rune</strong> 类似 int32</td></tr><tr><td align="left">3</td><td align="left"><strong>uint</strong> 32 或 64 位</td></tr><tr><td align="left">4</td><td align="left"><strong>int</strong> 与 uint 一样大小</td></tr><tr><td align="left">5</td><td align="left"><strong>uintptr</strong> 无符号整型，用于存放一个指针</td></tr></tbody></table><h1 id="go语言布尔类型"><a href="#go语言布尔类型" class="headerlink" title="go语言布尔类型"></a>go语言布尔类型</h1><p>go语言中的布尔类型有两个常量值：<code>true</code>和<code>false</code>。布尔类型经常用在<strong>条件判断</strong>语句，或者<strong>循环语句</strong>。也可以用在<strong>逻辑表达式</strong>中。</p><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b1 <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> b2 <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> b3 = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> b4 = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    b5 := <span class="literal">true</span></span><br><span class="line">    b6 := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;b1: %v\n&quot;</span>, b1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b2: %v\n&quot;</span>, b2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b3: %v\n&quot;</span>, b3)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b4: %v\n&quot;</span>, b4)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b5: %v\n&quot;</span>, b5)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b6: %v\n&quot;</span>, b6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>b1: trueb2: falseb3: trueb4: falseb5: trueb6: false</code></pre><h2 id="用在条件判断中"><a href="#用在条件判断中" class="headerlink" title="用在条件判断中"></a>用在条件判断中</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    age := <span class="number">18</span></span><br><span class="line">    ok := age &gt;= <span class="number">18</span></span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你已经成年&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你还未成年&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>你已经成年</code></pre><h2 id="用在循环语句中"><a href="#用在循环语句中" class="headerlink" title="用在循环语句中"></a>用在循环语句中</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    count := <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; count; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用在逻辑表达式中"><a href="#用在逻辑表达式中" class="headerlink" title="用在逻辑表达式中"></a>用在逻辑表达式中</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    age := <span class="number">18</span></span><br><span class="line">    gender := <span class="string">&quot;男&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> age &gt;= <span class="number">18</span> &amp;&amp; gender == <span class="string">&quot;男&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年男子&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：不能使用<code>0</code>和非<code>0</code>表示真假</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &#123;</span><br><span class="line">        <span class="comment">// 编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="go语言数字类型"><a href="#go语言数字类型" class="headerlink" title="go语言数字类型"></a>go语言数字类型</h1><p>Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码。</p><p>Go 也有基于架构的类型，例如：<code>int</code>、<code>uint</code> 和 <code>uintptr</code>。</p><p>这些类型的长度都是根据运行程序所在的操作系统类型所决定的：</p><ul><li><code>int</code> 和 <code>uint</code> 在 32 位操作系统上，它们均使用 32 位（4 个字节），在<br>64 位操作系统上，它们均使用 64 位（8 个字节）。</li><li><code>uintptr</code> 的长度被设定为足够存放一个指针即可。</li></ul><p>Go 语言中没有 <code>float</code> 类型。（Go语言中只有 <code>float32</code> 和<br><code>float64</code>）没有double类型。</p><p>与操作系统架构无关的类型都有固定的大小，并在类型的名称中就可以看出来：</p><p>整数：</p><ul><li>int8（-128 -&gt; 127）</li><li>int16（-32768 -&gt; 32767）</li><li>int32（-2,147,483,648 -&gt; 2,147,483,647）</li><li>int64（-9,223,372,036,854,775,808 -&gt; 9,223,372,036,854,775,807）</li></ul><p>无符号整数：</p><ul><li>uint8（0 -&gt; 255）</li><li>uint16（0 -&gt; 65,535）</li><li>uint32（0 -&gt; 4,294,967,295）</li><li>uint64（0 -&gt; 18,446,744,073,709,551,615）</li></ul><p>浮点型（IEEE-754 标准）：</p><ul><li>float32（+- 1e-45 -&gt; +- 3.4 * 1e38）</li><li>float64（+- 5 * 1e-324 -&gt; 107 * 1e308）</li></ul><p>int 型是计算最快的一种类型。</p><p>整型的零值为 0，浮点型的零值为 0.0。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面实例演示了，各个数字类型的长度和取值范围</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i8 <span class="type">int8</span></span><br><span class="line">    <span class="keyword">var</span> i16 <span class="type">int16</span></span><br><span class="line">    <span class="keyword">var</span> i32 <span class="type">int32</span></span><br><span class="line">    <span class="keyword">var</span> i64 <span class="type">int64</span></span><br><span class="line">    <span class="keyword">var</span> ui8 <span class="type">uint8</span></span><br><span class="line">    <span class="keyword">var</span> ui16 <span class="type">uint16</span></span><br><span class="line">    <span class="keyword">var</span> ui32 <span class="type">uint32</span></span><br><span class="line">    <span class="keyword">var</span> ui64 <span class="type">uint64</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, i8, unsafe.Sizeof(i8), math.MinInt8, math.MaxInt8)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, i16, unsafe.Sizeof(i16), math.MinInt16, math.MaxInt16)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, i32, unsafe.Sizeof(i32), math.MinInt32, math.MaxInt32)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, i64, unsafe.Sizeof(i64), math.MinInt64, math.MaxInt64)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui8, unsafe.Sizeof(ui8), <span class="number">0</span>, math.MaxUint8)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui16, unsafe.Sizeof(ui16), <span class="number">0</span>, math.MaxUint16)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui32, unsafe.Sizeof(ui32), <span class="number">0</span>, math.MaxUint32)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui64, unsafe.Sizeof(ui64), <span class="number">0</span>, <span class="type">uint64</span>(math.MaxUint64))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> f32 <span class="type">float32</span></span><br><span class="line">    <span class="keyword">var</span> f64 <span class="type">float64</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, f32, unsafe.Sizeof(f32), -math.MaxFloat32, math.MaxFloat32)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, f64, unsafe.Sizeof(f64), -math.MaxFloat64, math.MaxFloat64)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ui <span class="type">uint</span></span><br><span class="line">    ui = <span class="type">uint</span>(math.MaxUint64) <span class="comment">//再+1会导致overflows错误</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui, unsafe.Sizeof(ui), <span class="number">0</span>, ui)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> imax, imin <span class="type">int</span></span><br><span class="line">    imax = <span class="type">int</span>(math.MaxInt64) <span class="comment">//再+1会导致overflows错误</span></span><br><span class="line">    imin = <span class="type">int</span>(math.MinInt64) <span class="comment">//再-1会导致overflows错误</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, imax, unsafe.Sizeof(imax), imin, imax)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>int8 1B -128~127int16 2B -32768~32767int32 4B -2147483648~2147483647int64 8B -9223372036854775808~9223372036854775807uint8 1B 0~255uint16 2B 0~65535uint32 4B 0~4294967295uint64 8B 0~18446744073709551615float32 4B -3.4028234663852886e+38~3.4028234663852886e+38float64 8B -1.7976931348623157e+308~1.7976931348623157e+308uint 8B 0~18446744073709551615int 8B -9223372036854775808~9223372036854775807</code></pre><h2 id="以二进制、八进制或十六进制浮点数的格式定义数字"><a href="#以二进制、八进制或十六进制浮点数的格式定义数字" class="headerlink" title="以二进制、八进制或十六进制浮点数的格式定义数字"></a>以二进制、八进制或十六进制浮点数的格式定义数字</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 十进制</span></span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d \n&quot;</span>, a) <span class="comment">// 10</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b \n&quot;</span>, a) <span class="comment">// 1010  占位符%b表示二进制</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 八进制  以0开头</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">077</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%o \n&quot;</span>, b) <span class="comment">// 77</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 十六进制  以0x开头</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">int</span> = <span class="number">0xff</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%x \n&quot;</span>, c) <span class="comment">// ff</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%X \n&quot;</span>, c) <span class="comment">// FF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>10 1010 77 ff FF </code></pre><h2 id="浮点型-1"><a href="#浮点型-1" class="headerlink" title="浮点型"></a>浮点型</h2><p>Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。这两种浮点型数据格式遵循<code>IEEE 754</code>标准：<br><code>float32</code> 的浮点数的最大范围约为<br><code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code>。 <code>float64</code><br>的浮点数的最大范围约为<br><code>1.8e308</code>，可以使用一个常量定义：<code>math.MaxFloat64</code>。</p><p>打印浮点数时，可以使用<code>fmt</code>包配合动词<code>%f</code>，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%f\n&quot;</span>, math.Pi)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%.2f\n&quot;</span>, math.Pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>complex64和complex128</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c1 <span class="type">complex64</span></span><br><span class="line">c1 = <span class="number">1</span> + <span class="number">2i</span></span><br><span class="line"><span class="keyword">var</span> c2 <span class="type">complex128</span></span><br><span class="line">c2 = <span class="number">2</span> + <span class="number">3i</span></span><br><span class="line">fmt.Println(c1)</span><br><span class="line">fmt.Println(c2)</span><br></pre></td></tr></table></figure><p>复数有实部和虚部，complex64的实部和虚部为32位，complex128的实部和虚部为64位。</p><h1 id="golang字符串"><a href="#golang字符串" class="headerlink" title="golang字符串"></a>golang字符串</h1><p>一个Go语言字符串是一个任意<strong>字节的常量序列</strong>。[] byte</p><h2 id="go语言字符串字面量"><a href="#go语言字符串字面量" class="headerlink" title="go语言字符串字面量"></a>go语言字符串字面量</h2><p>在Go语言中，字符串字面量使用双引号 <code>&quot;&quot;</code> 或者反引号 <code>&#39;</code><br>来创建。双引号用来创建可解析的字符串，支持转义，但不能用来引用多行；反引号用来创建原生的字符串字面量，可能由多行组成，但不支持转义，并且可以包含除了反引号外其他所有字符。双引号创建可解析的字符串应用最广泛，反引号用来创建原生的字符串则多用于书写多行消息，HTML以及正则表达式。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str1 <span class="type">string</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    <span class="keyword">var</span> html <span class="type">string</span> = </span><br><span class="line">        &lt;html&gt;</span><br><span class="line">            &lt;head&gt;&lt;title&gt;hello golang&lt;/title&gt;</span><br><span class="line">        &lt;/html&gt;</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    fmt.Printf(&quot;str1: %v\n&quot;, str1)</span></span><br><span class="line"><span class="string">    fmt.Printf(&quot;html: %v\n&quot;, html)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1: hello world</span><br><span class="line">html: </span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;hello golang&lt;/title&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="go语言字符串连接"><a href="#go语言字符串连接" class="headerlink" title="go语言字符串连接"></a>go语言字符串连接</h2><p><strong>使用加号</strong></p><p>虽然Go语言中的字符串是不可变的，但是字符串支持 <code>+</code><br>级联操作和<code>+=</code>追加操作，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">    age := <span class="string">&quot;20&quot;</span></span><br><span class="line">    msg := name + <span class="string">&quot; &quot;</span> + age</span><br><span class="line">    fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">    fmt.Println(<span class="string">&quot;-------------&quot;</span>)</span><br><span class="line">    msg = <span class="string">&quot;&quot;</span></span><br><span class="line">    msg += name</span><br><span class="line">    msg += <span class="string">&quot; &quot;</span></span><br><span class="line">    msg += age</span><br><span class="line">    fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>golang<br>里面的字符串都是不可变的，每次运算都会产生一个新的字符串，所以会产生很多临时的无用的字符串，不仅没有用，还会给<br>gc 带来额外的负担，所以性能比较差</p></blockquote><p><strong>使用<code>fmt.Sprintf()</code>函数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">    age := <span class="string">&quot;20&quot;</span></span><br><span class="line">    msg := fmt.Sprintf(<span class="string">&quot;%s,%s&quot;</span>, name, age)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msg: tom,<span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>内部使用 <code>[]byte</code><br>实现，不像直接运算符这种会产生很多临时的字符串，但是内部的逻辑比较复杂，有很多额外的判断，还用到了<br><code>interface</code>，所以性能也不是很好</p></blockquote><p><strong><code>strings.Join()</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">    age := <span class="string">&quot;20&quot;</span></span><br><span class="line">    msg := strings.Join([]<span class="type">string</span>&#123;name, age&#125;, <span class="string">&quot;,&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>msg: tom,20</code></pre><blockquote><p>join会先根据字符串数组的内容，计算出一个拼接之后的长度，然后申请对应大小的内存，一个一个字符串填入，在已有一个数组的情况下，这种效率会很高，但是本来没有，去构造这个数据的代价也不小</p></blockquote><p><strong><code>buffer.WriteString()</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">    buffer.WriteString(<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">    buffer.WriteString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    buffer.WriteString(<span class="string">&quot;20&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;buffer.String(): %v\n&quot;</span>, buffer.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个比较理想，可以当成可变字符使用，对内存的增长也有优化，如果能预估字符串的长度，还可以用<br><code>buffer.Grow()</code> 接口来设置 capacity</p></blockquote><h2 id="go语言字符串转义字符"><a href="#go语言字符串转义字符" class="headerlink" title="go语言字符串转义字符"></a>go语言字符串转义字符</h2><p>Go<br>语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p><p>  转义符   含义</p><hr><p>  <code>\r</code>     回车符（返回行首）<br>  <code>\n</code>     换行符（直接跳到下一行的同列位置）<br>  <code>\t</code>     制表符<br>  <code>\&#39;</code>     单引号<br>  <code>\&quot;</code>     双引号<br>  <code>\\</code>     反斜杠</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Print(<span class="string">&quot;hello\tworld\n&quot;</span>)</span><br><span class="line">    fmt.Print(<span class="string">&quot;\&quot;c:\\test\\\&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>hello   world&quot;c:\test\&quot;</code></pre><h2 id="go语言字符串切片操作"><a href="#go语言字符串切片操作" class="headerlink" title="go语言字符串切片操作"></a>go语言字符串切片操作</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    n := <span class="number">3</span></span><br><span class="line">    m := <span class="number">5</span></span><br><span class="line">    fmt.Println(str[n])   <span class="comment">//获取字符串索引位置为n的原始字节</span></span><br><span class="line">    fmt.Println(str[n:m]) <span class="comment">//截取得字符串索引位置为 n 到 m-1 的字符串</span></span><br><span class="line">    fmt.Println(str[n:])  <span class="comment">//截取得字符串索引位置为 n 到 len(s)-1 的字符串</span></span><br><span class="line">    fmt.Println(str[:m])  <span class="comment">//截取得字符串索引位置为 0 到 m-1 的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>108lolo worldhello</code></pre><h2 id="go语言字符串常用方法"><a href="#go语言字符串常用方法" class="headerlink" title="go语言字符串常用方法"></a>go语言字符串常用方法</h2><p>  方法                                    介绍</p><hr><p>  len(str)                                求长度<br>  +或fmt.Sprintf                          拼接字符串<br>  strings.Split                           分割<br>  strings.contains                        判断是否包含<br>  strings.HasPrefix,strings.HasSuffix     前缀&#x2F;后缀判断<br>  strings.Index(),strings.LastIndex()     子串出现的位置<br>  strings.Join(a[]string, sep string)   join操作</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := <span class="string">&quot;hello world！&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;len(s): %v\n&quot;</span>, <span class="built_in">len</span>(s))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.Split(s, \&quot;\&quot;): %v\n&quot;</span>, strings.Split(s, <span class="string">&quot; &quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.Contains(s, \&quot;hello\&quot;): %v\n&quot;</span>, strings.Contains(s, <span class="string">&quot;hello&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.HasPrefix(s, \&quot;hello\&quot;): %v\n&quot;</span>, strings.HasPrefix(s, <span class="string">&quot;hello&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.HasSuffix(s, \&quot;world！\&quot;): %v\n&quot;</span>, strings.HasSuffix(s, <span class="string">&quot;world！&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.Index(s, \&quot;l\&quot;): %v\n&quot;</span>, strings.Index(s, <span class="string">&quot;l&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.LastIndex(s, \&quot;l\&quot;): %v\n&quot;</span>, strings.LastIndex(s, <span class="string">&quot;l&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>len(s): 14strings.Split(s, &quot;&quot;): [hello world！]strings.Contains(s, &quot;hello&quot;): truestrings.HasPrefix(s, &quot;hello&quot;): truestrings.HasSuffix(s, &quot;world！&quot;): truestrings.Index(s, &quot;l&quot;): 2strings.LastIndex(s, &quot;l&quot;): 9</code></pre><h2 id="byte和rune类型"><a href="#byte和rune类型" class="headerlink" title="byte和rune类型"></a>byte和rune类型</h2><p>组成每个字符串的元素叫做”字符”，可以通过遍历或者单个获取字符串元素获得字符。<br>字符用单引号（’）包裹起来，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;华&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v,%c\n&quot;</span>, a, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v,%c\n&quot;</span>, b, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: 21326,华b: 97,a</code></pre><p>Go 语言的字符有以下两种：</p><ol><li><code>uint8</code>类型，或者叫 byte 型，代表了<code>ASCII码</code>的一个字符。</li><li><code>rune</code>类型，代表一个 <code>UTF-8字符</code>。</li></ol><p>当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。</p><p>Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode<br>的文本处理更为方便，也可以使用 byte<br>型进行默认字符串处理，性能和扩展性都有照顾。</p><h1 id="golang格式化输出"><a href="#golang格式化输出" class="headerlink" title="golang格式化输出"></a>golang格式化输出</h1><p>下面实例使用到的结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Website <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义结构体变量</span></span><br><span class="line"><span class="keyword">var</span> site = Website&#123;Name:<span class="string">&quot;duoke360&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><p><strong>普通占位符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                      举例                                      输出</span><br><span class="line">%v      相应值的默认格式。                               Printf(<span class="string">&quot;%v&quot;</span>, site)，Printf(<span class="string">&quot;%+v&quot;</span>, site)  &#123;duoke360&#125;，&#123;Name:duoke360&#125;</span><br><span class="line">        在打印结构体时，“加号”标记（%+v）会添加字段名</span><br><span class="line">%#v     相应值的Go语法表示                          Printf(<span class="string">&quot;#v&quot;</span>, site)                      main.Website&#123;Name:<span class="string">&quot;duoke360&quot;</span>&#125;</span><br><span class="line">%T      相应值的类型的Go语法表示                       Printf(<span class="string">&quot;%T&quot;</span>, site)                      main.Website</span><br><span class="line">%%      字面上的百分号，并非值的占位符                 Printf(<span class="string">&quot;%%&quot;</span>)                            %</span><br></pre></td></tr></table></figure><p><strong>布尔占位符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                      举例                                      输出</span><br><span class="line">%t      单词 <span class="literal">true</span> 或 <span class="literal">false</span>。                            Printf(<span class="string">&quot;%t&quot;</span>, <span class="literal">true</span>)                      <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>整数占位符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                      举例                                  输出</span><br><span class="line">%b      二进制表示                                   Printf(<span class="string">&quot;%b&quot;</span>, <span class="number">5</span>)                     <span class="number">101</span></span><br><span class="line">%c      相应Unicode码点所表示的字符                   Printf(<span class="string">&quot;%c&quot;</span>, <span class="number">0x4E2D</span>)                中</span><br><span class="line">%d      十进制表示                                   Printf(<span class="string">&quot;%d&quot;</span>, <span class="number">0x12</span>)                  <span class="number">18</span></span><br><span class="line">%o      八进制表示                                   Printf(<span class="string">&quot;%o&quot;</span>, <span class="number">10</span>)                    <span class="number">12</span></span><br><span class="line">%q      单引号围绕的字符字面值，由Go语法安全地转义      Printf(<span class="string">&quot;%q&quot;</span>, <span class="number">0x4E2D</span>)                <span class="string">&#x27;中&#x27;</span></span><br><span class="line">%x      十六进制表示，字母形式为小写 a-f              Printf(<span class="string">&quot;%x&quot;</span>, <span class="number">13</span>)                    d</span><br><span class="line">%X      十六进制表示，字母形式为大写 A-F              Printf(<span class="string">&quot;%x&quot;</span>, <span class="number">13</span>)                    D</span><br><span class="line">%U      Unicode格式：U+<span class="number">1234</span>，等同于 <span class="string">&quot;U+%04X&quot;</span>           Printf(<span class="string">&quot;%U&quot;</span>, <span class="number">0x4E2D</span>)                U+<span class="number">4E2</span>D</span><br></pre></td></tr></table></figure><p><strong>浮点数和复数的组成部分（实部和虚部）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                                              举例                                  输出</span><br><span class="line">%b      无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat   </span><br><span class="line">        的 <span class="string">&#x27;b&#x27;</span> 转换格式一致。例如 <span class="number">-123456</span>p<span class="number">-78</span></span><br><span class="line">%e      科学计数法，例如 <span class="number">-1234.456e+78</span>                                  Printf(<span class="string">&quot;%e&quot;</span>, <span class="number">10.2</span>)                          <span class="number">1.020000e+01</span></span><br><span class="line">%E      科学计数法，例如 <span class="number">-1234.456E+78</span>                                  Printf(<span class="string">&quot;%e&quot;</span>, <span class="number">10.2</span>)                          <span class="number">1.020000E+01</span></span><br><span class="line">%f      有小数点而无指数，例如 <span class="number">123.456</span>                                 Printf(<span class="string">&quot;%f&quot;</span>, <span class="number">10.2</span>)                          <span class="number">10.200000</span></span><br><span class="line">%g      根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的<span class="number">0</span>）输出             Printf(<span class="string">&quot;%g&quot;</span>, <span class="number">10.20</span>)                         <span class="number">10.2</span></span><br><span class="line">%G      根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的<span class="number">0</span>）输出             Printf(<span class="string">&quot;%G&quot;</span>, <span class="number">10.20</span>+<span class="number">2i</span>)                      (<span class="number">10.2</span>+<span class="number">2i</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串与字节切片</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                                              举例                                  输出</span><br><span class="line">%s      输出字符串表示（<span class="type">string</span>类型或[]<span class="type">byte</span>)                            Printf(<span class="string">&quot;%s&quot;</span>, []<span class="type">byte</span>(<span class="string">&quot;多课网&quot;</span>))     多课网</span><br><span class="line">%q      双引号围绕的字符串，由Go语法安全地转义                            Printf(<span class="string">&quot;%q&quot;</span>, <span class="string">&quot;多课网&quot;</span>)             <span class="string">&quot;多课网&quot;</span></span><br><span class="line">%x      十六进制，小写字母，每字节两个字符                               Printf(<span class="string">&quot;%x&quot;</span>, <span class="string">&quot;golang&quot;</span>)                      <span class="number">676</span>f6c616e67</span><br><span class="line">%X      十六进制，大写字母，每字节两个字符                               Printf(<span class="string">&quot;%X&quot;</span>, <span class="string">&quot;golang&quot;</span>)                      <span class="number">676</span>F6C616E67</span><br></pre></td></tr></table></figure><p><strong>指针</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                                              举例                                  输出</span><br><span class="line">%p      十六进制表示，前缀 <span class="number">0</span>x                                            Printf(<span class="string">&quot;%p&quot;</span>, &amp;site)                         <span class="number">0x4f57f0</span></span><br></pre></td></tr></table></figure><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    u := user&#123;<span class="string">&quot;guo&quot;</span>&#125;</span><br><span class="line">    <span class="comment">//Printf 格式化输出</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;% + v\n&quot;</span>, u)     <span class="comment">//格式化输出结构</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)       <span class="comment">//输出值的 Go 语言表示方法</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, u)        <span class="comment">//输出值的类型的 Go 语言表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%t\n&quot;</span>, <span class="literal">true</span>)     <span class="comment">//输出值的 true 或 false</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b\n&quot;</span>, <span class="number">1024</span>)     <span class="comment">//二进制表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, <span class="number">11111111</span>) <span class="comment">//数值对应的 Unicode 编码字符</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">10</span>)       <span class="comment">//十进制表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%o\n&quot;</span>, <span class="number">8</span>)        <span class="comment">//八进制表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, <span class="number">22</span>)       <span class="comment">//转化为十六进制并附上单引号</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, <span class="number">1223</span>)     <span class="comment">//十六进制表示，用a-f表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%X\n&quot;</span>, <span class="number">1223</span>)     <span class="comment">//十六进制表示，用A-F表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%U\n&quot;</span>, <span class="number">1233</span>)     <span class="comment">//Unicode表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b\n&quot;</span>, <span class="number">12.34</span>)    <span class="comment">//无小数部分，两位指数的科学计数法6946802425218990p-49</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%e\n&quot;</span>, <span class="number">12.345</span>)   <span class="comment">//科学计数法，e表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%E\n&quot;</span>, <span class="number">12.34455</span>) <span class="comment">//科学计数法，E表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%f\n&quot;</span>, <span class="number">12.3456</span>)  <span class="comment">//有小数部分，无指数部分</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%g\n&quot;</span>, <span class="number">12.3456</span>)  <span class="comment">//根据实际情况采用%e或%f输出</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%G\n&quot;</span>, <span class="number">12.3456</span>)  <span class="comment">//根据实际情况采用%E或%f输出</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;wqdew&quot;</span>)  <span class="comment">//直接输出字符串或者[]byte</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, <span class="string">&quot;dedede&quot;</span>) <span class="comment">//双引号括起来的字符串</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, <span class="string">&quot;abczxc&quot;</span>) <span class="comment">//每个字节用两字节十六进制表示，a-f表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%X\n&quot;</span>, <span class="string">&quot;asdzxc&quot;</span>) <span class="comment">//每个字节用两字节十六进制表示，A-F表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, <span class="number">0x123</span>)    <span class="comment">//0x开头的十六进制数表示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang运算符"><a href="#golang运算符" class="headerlink" title="golang运算符"></a>golang运算符</h1><p>Go 语言内置的运算符有：</p><ol><li>算术运算符：arithmetic operators</li><li>关系运算符：relational operators</li><li>逻辑运算符：logical operators</li><li>位运算符：bitwise operators</li><li>赋值运算符：assignment operators</li></ol><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">相加</td></tr><tr><td align="left">-</td><td align="left">相减</td></tr><tr><td align="left">*</td><td align="left">相乘</td></tr><tr><td align="left">&#x2F;</td><td align="left">相除</td></tr><tr><td align="left">%</td><td align="left">求余</td></tr></tbody></table><p><strong>注意：</strong> <code>++</code>（自增）和<code>--</code>（自减）在Go语言中是单独的语句，并不是运算符。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">100</span></span><br><span class="line">b := <span class="number">10</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;(a + b): %v\n&quot;</span>, (a + b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a - b): %v\n&quot;</span>, (a - b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a * b): %v\n&quot;</span>, (a * b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a / b): %v\n&quot;</span>, (a / b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a %% b): %v\n&quot;</span>, (a % b))</span><br><span class="line"></span><br><span class="line">a++</span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">b--</span><br><span class="line">fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">检查两个值是否相等，如果相等返回 True 否则返回 False。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">b := <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &gt; b): %v\n&quot;</span>, (a &gt; b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &lt; b): %v\n&quot;</span>, (a &lt; b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &gt;= b): %v\n&quot;</span>, (a &gt;= b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &lt;= b): %v\n&quot;</span>, (a &lt;= b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a == b): %v\n&quot;</span>, (a == b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a != b): %v\n&quot;</span>, (a != b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False。</td></tr><tr><td align="left">||</td><td align="left">逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False。</td></tr><tr><td align="left">!</td><td align="left">逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True。</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="literal">true</span></span><br><span class="line">b := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &amp;&amp; b): %v\n&quot;</span>, (a &amp;&amp; b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a || b): %v\n&quot;</span>, (a || b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(!a): %v\n&quot;</span>, (!a))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(!b): %v\n&quot;</span>, (!b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符对整数在内存中的二进制位进行操作。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">参与运算的两数各对应的二进位相与。 （两位均为1才为1）</td></tr><tr><td align="left">|</td><td align="left">参与运算的两数各对应的二进位相或。 （两位有一个为1就为1）</td></tr><tr><td align="left">^</td><td align="left">参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 （两位不一样则为1）</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移n位就是乘以2的n次方。 “a&lt;&lt;b”是把a的各二进位全部左移b位，高位丢弃，低位补0。</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移n位就是除以2的n次方。 “a&gt;&gt;b”是把a的各二进位全部右移b位。</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">4</span> <span class="comment">// 二进制 100</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %b\n&quot;</span>, a)</span><br><span class="line">b := <span class="number">8</span> <span class="comment">// 二进制 1000</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;b: %b\n&quot;</span>, b)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &amp; b): %v, %b \n&quot;</span>, (a &amp; b), (a &amp; b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a | b): %v, %b\n&quot;</span>, (a | b), (a | b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a ^ b): %v, %b\n&quot;</span>, (a ^ b), (a ^ b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &lt;&lt; 2): %v, %b\n&quot;</span>, (a &lt;&lt; <span class="number">2</span>), (a &lt;&lt; <span class="number">2</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(b &gt;&gt; 2): %v, %b\n&quot;</span>, (b &gt;&gt; <span class="number">2</span>), (b &gt;&gt; <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符，将一个表达式的值赋给一个左值</td></tr><tr><td align="left">+&#x3D;</td><td align="left">相加后再赋值</td></tr><tr><td align="left">-&#x3D;</td><td align="left">相减后再赋值</td></tr><tr><td align="left">*&#x3D;</td><td align="left">相乘后再赋值</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">相除后再赋值</td></tr><tr><td align="left">%&#x3D;</td><td align="left">求余后再赋值</td></tr><tr><td align="left">&lt;&lt;&#x3D;</td><td align="left">左移后赋值</td></tr><tr><td align="left">&gt;&gt;&#x3D;</td><td align="left">右移后赋值</td></tr><tr><td align="left">&amp;&#x3D;</td><td align="left">按位与后赋值</td></tr><tr><td align="left">|&#x3D;</td><td align="left">按位或后赋值</td></tr><tr><td align="left">^&#x3D;</td><td align="left">按位异或后赋值</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">a += <span class="number">1</span> <span class="comment">// a = a + 1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">a -= <span class="number">1</span> <span class="comment">// a = a -1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">a *= <span class="number">2</span> <span class="comment">// a = a * 2</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">a /= <span class="number">2</span> <span class="comment">// a = a / 2</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="go语言中的流程控制"><a href="#go语言中的流程控制" class="headerlink" title="go语言中的流程控制"></a>go语言中的流程控制</h1><h2 id="go语言中的条件"><a href="#go语言中的条件" class="headerlink" title="go语言中的条件"></a>go语言中的条件</h2><p><strong>条件语句</strong>是用来判断给定的条件是否满足(表达式值是否为<code>true</code>或者<code>false</code>)，并根据判断的结果(真或假)决定执行的语句，go语言中的条件语句也是这样的。</p><h2 id="go语言中的条件语句包含如下几种情况"><a href="#go语言中的条件语句包含如下几种情况" class="headerlink" title="go语言中的条件语句包含如下几种情况"></a>go语言中的条件语句包含如下几种情况</h2><ol><li><strong>if 语句</strong>：<code>if</code> 语句 由一个布尔表达式后紧跟一个或多个语句组成。</li><li><strong>if…else 语句</strong>: <code>if</code> 语句 后可以使用可选的 <code>else</code> 语句, <code>else</code><br>语句中的表达式在布尔表达式为 <code>false</code> 时执行。</li><li><strong>if 嵌套语句</strong>: 你可以在 <code>if</code> 或 <code>else if</code> 语句中嵌入一个或多个<br><code>if</code> 或 <code>else if</code> 语句。</li><li><strong>switch 语句</strong>: <code>switch</code> 语句用于基于不同条件执行不同动作。</li><li><strong>select 语句</strong>: <code>select</code> 语句类似于 <code>switch</code><br>语句，但是<code>select</code>会随机执行一个可运行的<code>case</code>。如果没有<code>case</code>可运行，它将阻塞，直到有<code>case</code>可运行。</li></ol><h2 id="go语言中的循环语句"><a href="#go语言中的循环语句" class="headerlink" title="go语言中的循环语句"></a>go语言中的循环语句</h2><p>go语言中的循环只有for循环，去除了<code>while</code>、<code>do while</code>循环，使用起来更加简洁。</p><ol><li>for循环。</li><li>for range循环。</li></ol><h2 id="go语言中的流程控制关键字"><a href="#go语言中的流程控制关键字" class="headerlink" title="go语言中的流程控制关键字"></a>go语言中的流程控制关键字</h2><ol><li>break</li><li>continue</li><li>goto</li></ol><h1 id="golang中的if语句"><a href="#golang中的if语句" class="headerlink" title="golang中的if语句"></a>golang中的if语句</h1><p><strong>go语言</strong>中的<strong>if语句</strong>和其他语言中的类似，都是根据给定的条件表达式运算结果来，判断执行流程。</p><h2 id="go语言if语句语法"><a href="#go语言if语句语法" class="headerlink" title="go语言if语句语法"></a>go语言if语句语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在go语言中 布尔表达式不用使用括号。</p></blockquote><h2 id="go语言if语句实例演示"><a href="#go语言if语句实例演示" class="headerlink" title="go语言if语句实例演示"></a>go语言if语句实例演示</h2><p><strong>根据布尔值flag判断</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> flag &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;flag is true&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag is <span class="literal">true</span></span><br><span class="line">程序运行结束</span><br></pre></td></tr></table></figure><p><strong>根据年龄判断是否成年</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">20</span></span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你是成年人</span><br><span class="line">程序运行结束</span><br></pre></td></tr></table></figure><blockquote><p><strong>初始变量可以声明在布尔表达式里面，注意它的作用域</strong></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> age := <span class="number">20</span>; age &gt; <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// test1()</span></span><br><span class="line">    <span class="comment">// test2()</span></span><br><span class="line">    test3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果</p><pre><code>你是成年人程序运行结束</code></pre><blockquote><p><strong>注意：不能使用0或非0表示真假</strong></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test4</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &#123; <span class="comment">// 编译失败</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;here&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>go语言if语句使用提示：</strong></p><ol><li>不需使用括号将<strong>条件包含起来</strong></li><li>大括号<code>&#123;&#125;</code>必须存在，即使只有一行语句</li><li>左括号必须在<code>if</code>或<code>else</code>的同一行</li><li>在<code>if</code>之后，条件语句之前，可以添加变量初始化语句，使用<code>；</code>进行分隔</li></ol><h1 id="golang中的if-else语句"><a href="#golang中的if-else语句" class="headerlink" title="golang中的if else语句"></a>golang中的if else语句</h1><p>go语言中的if else语句可以根据给定条件<strong>二选一</strong>。</p><h2 id="go语言的if-else语句语法"><a href="#go语言的if-else语句语法" class="headerlink" title="go语言的if else语句语法"></a>go语言的if else语句语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 在布尔表达式为 false 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言if-else语句实例"><a href="#go语言if-else语句实例" class="headerlink" title="go语言if else语句实例"></a>go语言if else语句实例</h2><p><strong>比较两个数的大小</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    b := <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;\&quot;a&gt;b\&quot;: %v\n&quot;</span>, <span class="string">&quot;a&gt;b&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;\&quot;a&lt;=b\&quot;: %v\n&quot;</span>, <span class="string">&quot;a&lt;b&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断一个数是奇数还是偶数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s <span class="type">int</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;输入一个数字：&quot;</span>)</span><br><span class="line">    fmt.Scan(&amp;s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Print(<span class="string">&quot;s 是偶数\n&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Print(<span class="string">&quot;s 不是偶数\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Print(<span class="string">&quot;s 的值是：&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断一个人是否成年</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    age := <span class="number">20</span></span><br><span class="line">    <span class="keyword">if</span> age &gt;= <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你还未成年&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特殊写法，在if前面添加执行语句</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> age := <span class="number">20</span>; age &gt;= <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你还未成年&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>go语言if语句使用提示：</strong></p><ol><li>不需使用括号将条件包含起来</li><li>大括号<code>&#123;&#125;</code>必须存在，即使只有<strong>一行语句</strong></li><li><strong>左括号</strong>必须在<code>if</code>或<code>else</code>的同一行</li><li>在<code>if</code>之后，条件语句之前，可以添加变量<strong>初始化语句</strong>，使用<code>；</code>进行分隔</li></ol><h1 id="golang中的if-else-if语句"><a href="#golang中的if-else-if语句" class="headerlink" title="golang中的if else if语句"></a>golang中的if else if语句</h1><p>go语言if语句可以进行多重嵌套使用，进行多重判断。</p><h2 id="go语言中的if-else-if语法"><a href="#go语言中的if-else-if语法" class="headerlink" title="go语言中的if else if语法"></a>go语言中的if else if语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式<span class="number">1</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 布尔表达式<span class="number">2</span> &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// catch-all or default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言中的if-else-if语法实例"><a href="#go语言中的if-else-if语法实例" class="headerlink" title="go语言中的if else if语法实例"></a>go语言中的if else if语法实例</h2><p><strong>根据分数判断等级</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    score := <span class="number">80</span></span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">90</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">90</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B</span><br></pre></td></tr></table></figure><p><strong>同样也可以写成这样</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> score := <span class="number">80</span>; score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">90</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">90</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f6</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//  Monday Tuesday Wednesday Thursday Friday Saturday Sunday</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">string</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;输入一个字符：&quot;</span>)</span><br><span class="line">    fmt.Scan(&amp;c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&quot;S&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;输入第二个字符：&quot;</span>)</span><br><span class="line">        fmt.Scan(&amp;c)</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&quot;a&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Saturday&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;u&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Sunday&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;F&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Friday&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;M&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Monday&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;T&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;输入第二个字符：&quot;</span>)</span><br><span class="line">        fmt.Scan(&amp;c)</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&quot;u&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Tuesday&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;h&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Thursday&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;W&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Wednesday&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang中嵌套if语句"><a href="#golang中嵌套if语句" class="headerlink" title="golang中嵌套if语句"></a>golang中嵌套if语句</h1><p>go语言if语句可以嵌套多级进行判断。</p><h2 id="go语言if嵌套语法"><a href="#go语言if嵌套语法" class="headerlink" title="go语言if嵌套语法"></a>go语言if嵌套语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 <span class="number">1</span> &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式 1 为 true 时执行 */</span></span><br><span class="line">   <span class="keyword">if</span> 布尔表达式 <span class="number">2</span> &#123;</span><br><span class="line">      <span class="comment">/* 在布尔表达式 2 为 true 时执行 */</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言if嵌套实例"><a href="#go语言if嵌套实例" class="headerlink" title="go语言if嵌套实例"></a>go语言if嵌套实例</h2><p><strong>判断三个数的大小</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a&gt;b a&gt;c a</span></span><br><span class="line"><span class="comment">// b&gt;a b&gt;c b else c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">100</span></span><br><span class="line">    b := <span class="number">200</span></span><br><span class="line">    c := <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">if</span> a &gt; c &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;a最大&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>  </span><br><span class="line">        <span class="keyword">if</span> b &gt; c &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;b最大&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;c最大&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断男生还是女生，还有是否成年</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 判断男女生及年龄</span></span><br><span class="line">    gender := <span class="string">&quot;女生&quot;</span></span><br><span class="line">    age := <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> gender == <span class="string">&quot;男生&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;男生&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;成年&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;未成年&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;女生&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;成年&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;未成年&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang-switch语句"><a href="#golang-switch语句" class="headerlink" title="golang switch语句"></a>golang switch语句</h1><p>go语言中的<code>switch</code>语句，可以非常容易的判断多个值的情况。</p><h2 id="go语言中switch语句的语法"><a href="#go语言中switch语句的语法" class="headerlink" title="go语言中switch语句的语法"></a>go语言中switch语句的语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言中switch语句实例"><a href="#go语言中switch语句实例" class="headerlink" title="go语言中switch语句实例"></a>go语言中<code>switch</code>语句实例</h2><p><strong>判断成绩</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    grade := <span class="string">&quot;A&quot;</span></span><br><span class="line">    <span class="keyword">switch</span> grade &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;一般&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>优秀</code></pre><p><strong>多条件匹配</strong></p><p>go语言<code>switch</code>语句，可以同时匹配多个条件，中间用逗号分隔，有其中一个匹配成功即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    day := <span class="number">3</span></span><br><span class="line">    <span class="keyword">switch</span> day &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;工作日&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;休息日&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>工作日</code></pre><p><strong>case可以是条件表达式</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    score := <span class="number">90</span></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;享受假期&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">90</span> &amp;&amp; score &gt;= <span class="number">80</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;好好学习吧！&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;玩命学习！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>享受假期</code></pre><p><strong><code>fallthrough</code>可以继续执行满足条件的下一个<code>case</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">100</span></span><br><span class="line">    <span class="keyword">switch</span> a &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;100&quot;</span>)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;200&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">300</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;300&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><h2 id="go语言中switch语句的注意事项"><a href="#go语言中switch语句的注意事项" class="headerlink" title="go语言中switch语句的注意事项"></a>go语言中<code>switch</code>语句的注意事项</h2><ol><li>支持多条件匹配</li><li>不同的 <code>case</code> 之间不使用 <code>break</code> 分隔，默认只会执行一个 <code>case</code>。</li><li>如果想要执行多个 <code>case</code>，需要使用 <code>fallthrough</code> 关键字，也可用<br><code>break</code> 终止。</li><li>分支还可以使用<strong>表达式</strong>，例如：<code>a&gt;10</code>.</li></ol><h1 id="golang-for循环语句"><a href="#golang-for循环语句" class="headerlink" title="golang for循环语句"></a>golang for循环语句</h1><p>go语言中的<code>for</code>循环，只有<code>for</code>关键字，去除了像其他语言中的<code>while</code>和<code>do while</code>.</p><h2 id="go语言for循环语法"><a href="#go语言for循环语法" class="headerlink" title="go语言for循环语法"></a>go语言for循环语法</h2><pre><code>for 初始语句;条件表达式;结束语句&#123;    循环体语句&#125;</code></pre><blockquote><p>注意：for表达式不用加括号</p></blockquote><h2 id="go语言for循环实例"><a href="#go语言for循环实例" class="headerlink" title="go语言for循环实例"></a>go语言for循环实例</h2><p><strong>循环输出1到10</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="number">1</span></span><br><span class="line">i: <span class="number">2</span></span><br><span class="line">i: <span class="number">3</span></span><br><span class="line">i: <span class="number">4</span></span><br><span class="line">i: <span class="number">5</span></span><br><span class="line">i: <span class="number">6</span></span><br><span class="line">i: <span class="number">7</span></span><br><span class="line">i: <span class="number">8</span></span><br><span class="line">i: <span class="number">9</span></span><br><span class="line">i: <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>初始条件，可以写到外面</strong></p><pre><code>func f() &#123;    i := 1    for ; i &lt;= 10; i++ &#123;        fmt.Printf(&quot;i: %v\n&quot;, i)    &#125;&#125;</code></pre><p>运行结果</p><pre><code>i: 1i: 2i: 3i: 4i: 5i: 6i: 7i: 8i: 9i: 10</code></pre><p><strong>初始条件和结束条件都可以省略</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">1</span> <span class="comment">// 初始条件</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">        i++ <span class="comment">// 结束条件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i: 1i: 2i: 3i: 4i: 5i: 6i: 7i: 8i: 9i: 10</code></pre><p>这种情况类似其他语言中的<code>while</code>循环</p><p><strong>永真循环</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;我一直在执行~&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~......</code></pre><p>for循环可以通过<code>break</code>、<code>goto</code>、<code>return</code>、<code>panic</code>语句强制退出循环。</p><h1 id="golang-for-range循环"><a href="#golang-for-range循环" class="headerlink" title="golang for range循环"></a>golang for range循环</h1><p>Go语言中可以使用<code>for range</code>遍历数组、切片、字符串、map<br>及通道（channel）。 通过<code>for range</code>遍历的返回值有以下规律：</p><ol><li>数组、切片、字符串返回<strong>索引和值</strong>。</li><li>map返回键和值。</li><li>通道（channel）只返回通道内的值。</li></ol><h2 id="go语言for-range实例"><a href="#go语言for-range实例" class="headerlink" title="go语言for range实例"></a>go语言for range实例</h2><p><strong>循环数组</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %d, v: %v\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="number">0</span>, v: <span class="number">1</span></span><br><span class="line">i: <span class="number">1</span>, v: <span class="number">2</span></span><br><span class="line">i: <span class="number">2</span>, v: <span class="number">3</span></span><br><span class="line">i: <span class="number">3</span>, v: <span class="number">4</span></span><br><span class="line">i: <span class="number">4</span>, v: <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>循环字符串</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&quot;多课网，go教程&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %d, v: %c\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// %c 按照字符输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="number">0</span>, v: 多</span><br><span class="line">i: <span class="number">3</span>, v: 课</span><br><span class="line">i: <span class="number">6</span>, v: 网</span><br><span class="line">i: <span class="number">9</span>, v: ，</span><br><span class="line">i: <span class="number">12</span>, v: g</span><br><span class="line">i: <span class="number">13</span>, v: o</span><br><span class="line">i: <span class="number">14</span>, v: 教</span><br><span class="line">i: <span class="number">17</span>, v: 程</span><br></pre></td></tr></table></figure><p><strong>循环切片</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i, %d, v: %v\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环map</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    m[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">    m[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;k: %v, v: %v\n&quot;</span>, k, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k: name, v: tom</span><br><span class="line">k: age, v: <span class="number">20</span></span><br><span class="line">k: email, v: tom@gmail.com</span><br></pre></td></tr></table></figure><p>当在循环中使用 <code>range</code><br>关键字时，它用于迭代数组、切片、映射或通道等数据结构。</p><p><code>range</code><br>返回两个值：索引和对应索引的元素值。在每次迭代中，索引和元素值都会被赋值给相应的变量。</p><p>对于数组和切片，<code>range</code> 返回索引和元素值。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    fmt.Println(index, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>0 11 22 3</code></pre><p>对于映射，<code>range</code> 返回键和对应键的值。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>, <span class="string">&quot;c&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>a 1b 2c 3</code></pre><p>对于通道，<code>range</code><br>在通道关闭之前迭代通道中的值。当通道关闭时，迭代将停止。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line">    ch &lt;- <span class="number">2</span></span><br><span class="line">    ch &lt;- <span class="number">3</span></span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> value := <span class="keyword">range</span> ch &#123;</span><br><span class="line">    fmt.Println(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>123</code></pre><p><code>range</code><br>的用法可以帮助我们遍历和处理数据结构中的元素，无论是数组、切片、映射还是通道。它提供了一种简洁和方便的方式来迭代和访问数据。</p><h1 id="golang流程控制关键字break"><a href="#golang流程控制关键字break" class="headerlink" title="golang流程控制关键字break"></a>golang流程控制关键字break</h1><p><code>break</code>语句可以结束<code>for</code>、<code>switch</code>和<code>select</code>的代码块。</p><h2 id="go语言使用break注意事项"><a href="#go语言使用break注意事项" class="headerlink" title="go语言使用break注意事项"></a>go语言使用break注意事项</h2><ol><li>单独在<code>select</code>中使用<code>break</code>和不使用<code>break</code>没有啥区别。</li><li>单独在表达式<code>switch</code>语句，并且没有<code>fallthough</code>，使用<code>break</code>和不使用<code>break</code>没有啥区别。</li><li>单独在表达式<code>switch</code>语句，并且有<code>fallthough</code>，使用<code>break</code>能够终止<code>fallthough</code>后面的<code>case</code>语句的执行。</li><li>带标签的<code>break</code>，可以跳出多层<code>select/ switch</code>作用域。让<code>break</code>更加灵活，写法更加简单灵活，不需要使用控制变量一层一层跳出循环，没有带<code>break</code>的只能跳出当前语句块。</li></ol><h2 id="go语言break关键字实例"><a href="#go语言break关键字实例" class="headerlink" title="go语言break关键字实例"></a>go语言break关键字实例</h2><p><strong>跳出for循环</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">// 退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="number">0</span></span><br><span class="line">i: <span class="number">1</span></span><br><span class="line">i: <span class="number">2</span></span><br><span class="line">i: <span class="number">3</span></span><br><span class="line">i: <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>跳出switch</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">2</span></span><br><span class="line">    <span class="keyword">switch</span> i &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;等于1&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;等于2&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;等于3&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;不关心&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>等于2</code></pre><p>注释掉<code>fallthrough</code>上面的<code>break</code>，运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">等于<span class="number">2</span></span><br><span class="line">等于<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>跳转到标签处</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">MY_LABEL:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> MY_LABEL</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>01234end...</code></pre><h1 id="golang关键字continue"><a href="#golang关键字continue" class="headerlink" title="golang关键字continue"></a>golang关键字continue</h1><p><code>continue</code>只能用在循环中，在go中只能用在<code>for</code>循环中，它可以终止本次循环，进行下一次循环。</p><p>在 <code>continue</code>语句后添加标签时，表示开始标签对应的循环。</p><h2 id="go语言continue实例"><a href="#go语言continue实例" class="headerlink" title="go语言continue实例"></a>go语言<code>continue</code>实例</h2><p><strong>输出1到10之间的偶数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i: 0i: 2i: 4i: 6i: 8</code></pre><p><strong>跳转到label</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// MY_LABEL:</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">    MY_LABEL:</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">2</span> &amp;&amp; j == <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span> MY_LABEL</span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i=%d,j=%d\n&quot;</span>, i, j)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="golang流程控制关键字goto"><a href="#golang流程控制关键字goto" class="headerlink" title="golang流程控制关键字goto"></a>golang流程控制关键字goto</h1><p><code>goto</code>语句通过标签进行代码间的<strong>无条件跳转</strong>。<code>goto</code>语句可以在快速跳出循环、避免重复退出上有一定的帮助。Go语言中使用<code>goto</code>语句能简化一些代码的实现过程。<br>例如双层嵌套的for循环要退出时：</p><h2 id="go语言关键字goto实例"><a href="#go语言关键字goto实例" class="headerlink" title="go语言关键字goto实例"></a>go语言关键字goto实例</h2><p><strong>跳转到指定标签</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> LABEL1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">LABEL1:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;next...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>next...</code></pre><p><strong>跳出双重循环</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">2</span> &amp;&amp; j == <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">goto</span> LABEL1</span><br><span class="line">            &#125;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;i=%d,j=%d\n&quot;</span>, i, j)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL1:</span><br><span class="line">    fmt.Println(<span class="string">&quot;label1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i=0,j=0i=0,j=1i=0,j=2i=0,j=3i=0,j=4i=1,j=0i=1,j=1i=1,j=2i=1,j=3i=1,j=4i=2,j=0i=2,j=1label1</code></pre><h1 id="golang数组"><a href="#golang数组" class="headerlink" title="golang数组"></a>golang数组</h1><p>数组是<strong>相同数据类型</strong>的一组数据的集合，数组一旦定义<strong>长度不能修改</strong>，数组可以通过<strong>下标（或者叫索引）</strong>来访问元素。</p><h2 id="go语言数组的定义"><a href="#go语言数组的定义" class="headerlink" title="go语言数组的定义"></a>go语言数组的定义</h2><p>数组定义的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name [SIZE] variable_type</span><br></pre></td></tr></table></figure><p><code>variable_name</code>：数组名称</p><p><code>SIZE</code>：数组长度，必须是常量</p><p><code>variable_type</code>：数组保存元素的类型</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span>    <span class="comment">// 定义一个int类型的数组a，长度是3</span></span><br><span class="line">    <span class="keyword">var</span> s [<span class="number">2</span>]<span class="type">string</span> <span class="comment">// 定义一个字符串类型的数组s，长度是2</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %T\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %T\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [3]ints: [2]string</code></pre><p>从上面运行结果，我们可以看出，数组和长度和元素类型共同组成了数组的类型。</p><h2 id="go语言数组的初始化"><a href="#go语言数组的初始化" class="headerlink" title="go语言数组的初始化"></a>go语言数组的初始化</h2><p>初始化，就是给数组的元素赋值，没有初始化的数组，默认元素值都是<strong>零值</strong>，布尔类型是<code>false</code>，字符串是空字符串。</p><h3 id="没有初始化的数组"><a href="#没有初始化的数组" class="headerlink" title="没有初始化的数组"></a>没有初始化的数组</h3><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span>    <span class="comment">// 定义一个int类型的数组a，长度是3</span></span><br><span class="line">    <span class="keyword">var</span> s [<span class="number">2</span>]<span class="type">string</span> <span class="comment">// 定义一个字符串类型的数组s，长度是2</span></span><br><span class="line">    <span class="keyword">var</span> b [<span class="number">2</span>]<span class="type">bool</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [0 0 0]s: [&quot;&quot; &quot;&quot;]b: [false false]</code></pre><h3 id="使用初始化列表"><a href="#使用初始化列表" class="headerlink" title="使用初始化列表"></a>使用初始化列表</h3><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> s = [<span class="number">2</span>]<span class="type">string</span>&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b = [<span class="number">2</span>]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    a1 := [<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [1 2 3]s: [tom kite]b: [true false]a1: [1 2]</code></pre><p>使用初始化列表，就是将值写在<strong>大括号</strong>里面。</p><h3 id="省略数组长度"><a href="#省略数组长度" class="headerlink" title="省略数组长度"></a>省略数组长度</h3><p>数组长度可以省略，使用<code>...</code>代替，更加初始化值得数量<strong>自动推断</strong>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> s = [...]<span class="type">string</span>&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b = [...]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    a1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [1 2 3]s: [tom kite]b: [true false]a1: [1 2]</code></pre><h3 id="指定索引值的方式来初始化"><a href="#指定索引值的方式来初始化" class="headerlink" title="指定索引值的方式来初始化"></a>指定索引值的方式来初始化</h3><p>可以通过指定所有的方式来初始化，未指定所有的默认未零值。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = [...]<span class="type">int</span>&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> s = [...]<span class="type">string</span>&#123;<span class="number">1</span>: <span class="string">&quot;tom&quot;</span>, <span class="number">2</span>: <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b = [...]<span class="type">bool</span>&#123;<span class="number">2</span>: <span class="literal">true</span>, <span class="number">5</span>: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    a1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [1 0 2]s: [ tom kite]b: [false false true false false false]a1: [1 2]</code></pre><h1 id="go语言访问数组元素"><a href="#go语言访问数组元素" class="headerlink" title="go语言访问数组元素"></a>go语言访问数组元素</h1><p>可以通过下标的方式，来访问数组元素。数组的最大下标为数组长度-1，大于这个下标会发生数组越界。</p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">2</span>]<span class="type">int</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a[0]: %v\n&quot;</span>, a[<span class="number">0</span>])</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a[1]: %v\n&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 a[0]  a[1]</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a[0]: %v\n&quot;</span>, a[<span class="number">0</span>])</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a[1]: %v\n&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a[0]: 100a[1]: 200-----------a[0]: 1a[1]: 2</code></pre><h2 id="根据数组长度遍历数组"><a href="#根据数组长度遍历数组" class="headerlink" title="根据数组长度遍历数组"></a>根据数组长度遍历数组</h2><p>可以根据数组长度，通过<code>for</code>循环的方式来遍历数组，数组的长度可以使用<code>len</code>函数获得。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a[%d]: %v\n&quot;</span>, i, a[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a[0]: 1a[1]: 2a[2]: 3a[3]: 4a[4]: 5a[5]: 6</code></pre><h2 id="使用for-range数组"><a href="#使用for-range数组" class="headerlink" title="使用for range数组"></a>使用<code>for range</code>数组</h2><p>还可以使用<code>for range</code>循环来遍历数组，range返回数组下标和对应的值</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a[%d]: %v\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>]: <span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>]: <span class="number">2</span></span><br><span class="line">a[<span class="number">2</span>]: <span class="number">3</span></span><br><span class="line">a[<span class="number">3</span>]: <span class="number">4</span></span><br><span class="line">a[<span class="number">4</span>]: <span class="number">5</span></span><br><span class="line">a[<span class="number">5</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><h1 id="golang切片"><a href="#golang切片" class="headerlink" title="golang切片"></a>golang切片</h1><p>前面我们学习了数组，数组是固定长度，可以容纳相同数据类型的元素的集合。当长度固定时，使用还是带来一些限制，比如：我们申请的长度太大浪费内存，太小又不够用。</p><p>鉴于上述原因，我们有了go语言的切片，可以把切片理解为，可变长度的数组，其实它底层就是使用数组实现的，增加了<strong>自动扩容</strong>功能。切片（Slice）是一个拥有相同类型元素的可变长度的序列。</p><h2 id="go语言切片的语法"><a href="#go语言切片的语法" class="headerlink" title="go语言切片的语法"></a>go语言切片的语法</h2><p>声明一个切片和声明一个数组类似，只要不添加长度就可以了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>切片是引用类型，可以使用<code>make</code>函数来创建切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">也可以简写为</span><br><span class="line"></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br></pre></td></tr></table></figure><p>也可以指定容量，其中capacity为可选参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]T, length, capacity)</span><br></pre></td></tr></table></figure><p>这里 len 是数组的长度并且也是切片的初始长度。</p><h2 id="go语言切片实例"><a href="#go语言切片实例" class="headerlink" title="go语言切片实例"></a>go语言切片实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> names []<span class="type">string</span></span><br><span class="line">    <span class="keyword">var</span> numbers []<span class="type">int</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;names: %v\n&quot;</span>, names)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;numbers: %v\n&quot;</span>, numbers)</span><br><span class="line">    fmt.Println(names == <span class="literal">nil</span>)</span><br><span class="line">    fmt.Println(numbers == <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>names: []numbers: []truetrue</code></pre><h2 id="go语言切片的长度和容量"><a href="#go语言切片的长度和容量" class="headerlink" title="go语言切片的长度和容量"></a>go语言切片的长度和容量</h2><p>切片拥有自己的长度和容量，我们可以通过使用内置的<code>len()</code>函数求长度，使用内置的<code>cap()</code>函数求切片的容量。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> names = []<span class="type">string</span>&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> numbers = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;len: %d cap: %d\n&quot;</span>, <span class="built_in">len</span>(names), <span class="built_in">cap</span>(names))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len: %d cap: %d\n&quot;</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s1 = <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len: %d cap: %d\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>len: 2 cap: 2len: 3 cap: 3len: 2 cap: 3</code></pre><h1 id="golang切片的初始化"><a href="#golang切片的初始化" class="headerlink" title="golang切片的初始化"></a>golang切片的初始化</h1><p>切片的初始化方法很多，可以直接初始化，也可以使用数组初始化等。</p><h2 id="切片如何切分"><a href="#切片如何切分" class="headerlink" title="切片如何切分"></a>切片如何切分</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s1 = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">    s2 := s1[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">// [)</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">    s3 := s1[<span class="number">3</span>:]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line">    s4 := s1[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s4: %v\n&quot;</span>, s4)</span><br><span class="line">    s5 := s1[:]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s5: %v\n&quot;</span>, s5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>s2: [1 2 3]s3: [4 5 6]s4: [3 4 5]s5: [1 2 3 4 5 6]</code></pre><h2 id="直接初始化"><a href="#直接初始化" class="headerlink" title="直接初始化"></a>直接初始化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s: [1 2 3]</code></pre><h2 id="使用数组初始化"><a href="#使用数组初始化" class="headerlink" title="使用数组初始化"></a>使用数组初始化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    s1 := arr[:]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [1 2 3]</code></pre><h2 id="使用数组的部分元素初始化（切片表达式）"><a href="#使用数组的部分元素初始化（切片表达式）" class="headerlink" title="使用数组的部分元素初始化（切片表达式）"></a>使用数组的部分元素初始化（切片表达式）</h2><p>切片的底层就是一个<strong>数组</strong>，所以我们可以<strong>基于数组通过切片表达式得到切片</strong>。<br>切片表达式中的low和high表示一个索引范围（<strong>左包含，右不包含</strong>），得到的切片<strong>长度</strong>&#x3D;high-low，容量等于得到的切片的底层数组的容量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">    s1 := arr[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">    s2 := arr[<span class="number">2</span>:]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">    s3 := arr[:<span class="number">3</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [3 4 5]s2: [3 4 5 6]s3: [1 2 3]</code></pre><h2 id="空-nil-切片"><a href="#空-nil-切片" class="headerlink" title="空(nil)切片"></a>空(nil)切片</h2><p>一个切片在未初始化之前默认为 nil，长度为 0，容量为0.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">    fmt.Println(s1 == <span class="literal">nil</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len: %d, cap: %d\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>truelen: 0, cap: 0</code></pre><h1 id="go语言切片的遍历"><a href="#go语言切片的遍历" class="headerlink" title="go语言切片的遍历"></a>go语言切片的遍历</h1><p>切片的遍历和数组的遍历非常类似，可以使用for循环索引遍历，或者for<br>range循环。</p><h2 id="for循环索引遍历"><a href="#for循环索引遍历" class="headerlink" title="for循环索引遍历"></a>for循环索引遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s1); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;s1[%d]: %v\n&quot;</span>, i, s1[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1[0]: 1s1[1]: 2s1[2]: 3s1[3]: 4s1[4]: 5</code></pre><h2 id="for-range循环"><a href="#for-range循环" class="headerlink" title="for range循环"></a>for range循环</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;s1[%d]: %v\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1[0]: 1s1[1]: 2s1[2]: 3s1[3]: 4s1[4]: 5</code></pre><h1 id="go语言切片元素的添加和删除copy"><a href="#go语言切片元素的添加和删除copy" class="headerlink" title="go语言切片元素的添加和删除copy"></a>go语言切片元素的添加和删除copy</h1><p>切片是一个动态数组，可以使用<code>append()</code>函数添加元素，go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。由于，切片是引用类型，通过赋值的方式，会修改原有内容，go提供了<code>copy()</code>函数来拷贝切片</p><p>db CRUD</p><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    s1 = <span class="built_in">append</span>(s1, <span class="number">1</span>)</span><br><span class="line">    s1 = <span class="built_in">append</span>(s1, <span class="number">2</span>)</span><br><span class="line">    s1 = <span class="built_in">append</span>(s1, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 添加多个元素</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line"></span><br><span class="line">    s3 := []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    s4 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    s4 = <span class="built_in">append</span>(s4, s3...) <span class="comment">// 添加另外一个切片</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s4: %v\n&quot;</span>, s4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [1 2 3 4 5]s4: [1 2 3 4 5]</code></pre><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="comment">// 删除索引为2的元素</span></span><br><span class="line">    s1 = <span class="built_in">append</span>(s1[:<span class="number">2</span>], s1[<span class="number">3</span>:]...)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [1 2 4 5]</code></pre><p>公式：要从切片a中删除索引为<code>index</code>的元素，操作方法是<code>a = append(a[:index], a[index+1:]...)</code></p><h2 id="拷贝切片"><a href="#拷贝切片" class="headerlink" title="拷贝切片"></a>拷贝切片</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    s2 := s1</span><br><span class="line">    s1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    s3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(s3, s1)</span><br><span class="line"></span><br><span class="line">    s1[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [100 2 3]s2: [100 2 3]-------------s1: [1 2 3]s3: [100 2 3]</code></pre><p>从运行结果，我们看到赋值的情况下，原来的变量被修改了，使用copy函数，原来的变量没有被修改。</p><h1 id="golang-map"><a href="#golang-map" class="headerlink" title="golang map"></a>golang map</h1><p>map是一种<code>key:value</code>键值对的数据结构容器。map内部实现是哈希表(<code>hash</code>)。</p><p>map 最重要的一点是通过 key 来快速检索数据，key<br>类似于索引，指向数据的值。</p><p>map是引用类型的。</p><h2 id="map的语法格式"><a href="#map的语法格式" class="headerlink" title="map的语法格式"></a>map的语法格式</h2><p>可以使用内建函数 make 也可以使用 map 关键字来定义 map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 声明变量，默认 map 是 nil */</span></span><br><span class="line"><span class="keyword">var</span> map_variable <span class="keyword">map</span>[key_data_type]value_data_type</span><br><span class="line"><span class="comment">/* 使用 make 函数 */</span></span><br><span class="line">map_variable = <span class="built_in">make</span>(<span class="keyword">map</span>[key_data_type]value_data_type)</span><br></pre></td></tr></table></figure><p><code>map_variable</code>：map变量名称</p><p><code>key_data_type</code>：key的数据类型</p><p><code>value_data_type</code>：值得数据类型</p><p><strong>实例</strong></p><p>下面声明一个保存个人信息的map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;m1: %v\n&quot;</span>, m1)</span><br><span class="line"></span><br><span class="line">    m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:  <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>:   <span class="string">&quot;20&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: <span class="string">&quot;kite@gmail.com&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;m2: %v\n&quot;</span>, m2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>m1: map[age:20 email:tom@gmail.com name:tom]m2: map[age:20 email:kite@gmail.com name:kite]</code></pre><h2 id="访问map"><a href="#访问map" class="headerlink" title="访问map"></a>访问map</h2><p>可以通过下标key获得其值，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">    name := m1[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    age := m1[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">    email := m1[<span class="string">&quot;email&quot;</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;email: %v\n&quot;</span>, email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断某个键是否存在"><a href="#判断某个键是否存在" class="headerlink" title="判断某个键是否存在"></a>判断某个键是否存在</h2><p>go语言中有个判断map中键是否存在的特殊写法，格式如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value, ok := <span class="keyword">map</span>[key]</span><br></pre></td></tr></table></figure><p>如果ok为<code>true</code>，存在；否则，不存在。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">    v, ok := m1[<span class="string">&quot;address&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;键存在&quot;</span>)</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;键不存在&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">键不存在</span><br></pre></td></tr></table></figure><h1 id="go语言遍历map"><a href="#go语言遍历map" class="headerlink" title="go语言遍历map"></a>go语言遍历map</h1><p>可以使用<code>for range</code>循环进行map遍历，得到key和value值。</p><h2 id="遍历key"><a href="#遍历key" class="headerlink" title="遍历key"></a>遍历key</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">     m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">     m[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">     m[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> key := <span class="keyword">range</span> m&#123;</span><br><span class="line">         fmt.Println(key)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>nameageemail</code></pre><h2 id="遍历key和value"><a href="#遍历key和value" class="headerlink" title="遍历key和value"></a>遍历key和value</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">     m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">     m[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">     m[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> key, value := <span class="keyword">range</span> m&#123;</span><br><span class="line">         fmt.Println(key + <span class="string">&quot;:&quot;</span> +value)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name:tom</span><br><span class="line">age:<span class="number">20</span></span><br><span class="line">email:tom@gmail.com</span><br></pre></td></tr></table></figure><h1 id="golang-函数"><a href="#golang-函数" class="headerlink" title="golang 函数"></a>golang 函数</h1><h2 id="golang函数简介"><a href="#golang函数简介" class="headerlink" title="golang函数简介"></a>golang函数简介</h2><p>函数是go语言中的<strong>一级公民</strong>，我们把所有的功能单元都定义在函数中，可以重复使用。函数包含函数的名称、参数列表和返回值类型，这些构成了函数的签名（signature）。</p><h3 id="go语言中函数特性"><a href="#go语言中函数特性" class="headerlink" title="go语言中函数特性"></a>go语言中函数特性</h3><ol><li>go语言中有3种函数：普通函数、匿名函数(没有名称的函数)、方法(定义在struct上的函数)。receiver</li><li>go语言中不允许函数重载(overload)，也就是说不允许函数同名。</li><li>go语言中的函数不能嵌套函数，但可以嵌套匿名函数。</li><li>函数是一个值，可以将函数赋值给变量，使得这个变量也成为函数。</li><li>函数可以作为参数传递给另一个函数。</li><li>函数的返回值可以是一个函数。</li><li>函数调用的时候，如果有参数传递给函数，则先拷贝参数的副本，再将副本传递给函数。</li><li>函数参数可以没有名称。</li></ol><h2 id="go语言中函数的定义和调用"><a href="#go语言中函数的定义和调用" class="headerlink" title="go语言中函数的定义和调用"></a>go语言中函数的定义和调用</h2><p>函数在使用之前必须先定义，可以调用函数来完成某个任务。函数可以重复调用，从而达到代码重用。</p><h3 id="go语言函数定义语法"><a href="#go语言函数定义语法" class="headerlink" title="go语言函数定义语法"></a>go语言函数定义语法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( [parameter list] )</span></span> [return_types]</span><br><span class="line">&#123;</span><br><span class="line">   函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>语法解析：</strong></p><ul><li><code>func</code>：函数由 <code>func</code> 开始声明</li><li><code>function_name</code>：函数名称，函数名和参数列表一起构成了函数签名。</li><li><code>[parameter list]</code>：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。</li><li><code>return_types</code>：返回类型，函数返回一列值。<code>return_types</code><br>是该列值的数据类型。有些功能不需要返回值，这种情况下 <code>return_types</code><br>不是必须的。</li><li>函数体：函数定义的代码集合。</li></ul><h3 id="go语言函数定义实例"><a href="#go语言函数定义实例" class="headerlink" title="go语言函数定义实例"></a>go语言函数定义实例</h3><p><strong>定义一个求和函数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> (ret <span class="type">int</span>) &#123;</span><br><span class="line">    ret = a + b</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个比较两个数大小的函数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> (max <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        max = a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        max = b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go语言函数调用"><a href="#go语言函数调用" class="headerlink" title="go语言函数调用"></a>go语言函数调用</h3><p>当我们要完成某个任务时，可以调用函数来完成。调用函数要传递参数，如何有返回值可以获得返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line"></span><br><span class="line">    max := compare(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;max: %v\n&quot;</span>, max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s: <span class="number">3</span></span><br><span class="line">max: <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="golang函数的返回值"><a href="#golang函数的返回值" class="headerlink" title="golang函数的返回值"></a>golang函数的返回值</h1><p>函数可以有0或多个返回值，返回值需要指定数据类型，返回值通过<code>return</code>关键字来指定。</p><p><code>return</code>可以有参数，也可以没有参数，这些返回值可以有名称，也可以没有名称。go中的函数可以有多个返回值。</p><ol><li><code>return</code>关键字中指定了参数时，返回值可以不用名称。如果<code>return</code>省略参数，则返回值部分必须带名称</li><li>当返回值有名称时，必须使用括号包围，逗号分隔，即使只有一个返回值</li><li>但即使返回值命名了，<code>return</code>中也可以强制指定其它返回值的名称，也就是说<code>return</code>的优先级更高</li><li>命名的返回值是预先声明好的，在函数内部可以直接使用，无需再次声明。命名返回值的名称不能和函数参数名称相同，否则报错提示变量重复定义</li><li><code>return</code>中可以有表达式，但不能出现赋值表达式，这和其它语言可能有所不同。例如<code>return a+b</code>是正确的，但<code>return c=a+b</code>是错误的。</li></ol><h2 id="go语言函数返回值实例"><a href="#go语言函数返回值实例" class="headerlink" title="go语言函数返回值实例"></a>go语言函数返回值实例</h2><p><strong>没有返回值</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;我没有返回值，只是进行一些计算&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有一个返回值</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> (ret <span class="type">int</span>) &#123;</span><br><span class="line">    ret = a + b</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多个返回值，且在return中指定返回的内容</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> (name <span class="type">string</span>, age <span class="type">int</span>) &#123;</span><br><span class="line">    name = <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    age = <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> name, age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多个返回值，返回值名称没有被使用</strong></p><pre><code>func f3() (name string, age int) &#123;    name = &quot;RyanChou&quot;    age = 30    return // 等价于return name, age&#125;</code></pre><p><strong>return覆盖命名返回值，返回值名称没有被使用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">()</span></span> (name <span class="type">string</span>, age <span class="type">int</span>) &#123;</span><br><span class="line">    n := <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    a := <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> n, a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Go中经常会使用其中一个返回值作为函数是否执行成功、是否有错误信息的判断条件。例如<code>return value,exists</code>、<code>return value,ok</code>、<code>return value,err</code>等。</p></blockquote><blockquote><p>当函数的<strong>返回值过多</strong>时，例如有4个以上的返回值，应该将这些返回值收集到容器中，然后以返回容器的方式去返回。例如，同类型的返回值可以放进slice中，不同类型的返回值可以放进map中。</p></blockquote><blockquote><p>但函数有多个返回值时，如果其中某个或某几个返回值不想使用，可以通过下划线<code>_</code>来丢弃这些返回值。例如下面的<code>f1</code>函数两个返回值，调用该函数时，丢弃了第二个返回值b，只保留了第一个返回值a赋值给了变量<code>a</code>。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    _, x := f1()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;x: %v\n&quot;</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>x: 2</code></pre><h1 id="golang函数的参数"><a href="#golang函数的参数" class="headerlink" title="golang函数的参数"></a>golang函数的参数</h1><p>go语言函数可以有0或多个参数，参数需要指定<strong>数据类型</strong>。</p><p>声明函数时的参数列表叫做形参，调用时传递的参数叫做实参。</p><p>go语言是通过<strong>传值的方式传参</strong>的，意味着传递给函数的是拷贝后的副本，所以函数内部访问、修改的也是这个副本。</p><p>go语言可以使用<strong>变长参数</strong>，有时候并不能确定参数的个数，可以使用变长参数，可以在函数定义语句的参数部分使用<code>ARGS...TYPE</code>的方式。这时会将<code>...</code>代表的参数全部保存到一个名为ARGS的slice中，注意这些参数的数据类型都是TYPE。</p><h2 id="go语言函数的参数实例"><a href="#go语言函数的参数实例" class="headerlink" title="go语言函数的参数实例"></a>go语言函数的参数实例</h2><p><strong>go语言传参</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形参列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 实参列表</span></span><br><span class="line">    r := f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>演示参数传递，按值传递</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">100</span></span><br><span class="line">    f1(a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 200a: 100</code></pre><p>从运行结果可以看到，调用函数f1后，a的值并没有被改变，说明参数传递是拷贝了一个副本，也就是拷贝了一份新的内容进行运算。</p><blockquote><p><code>map</code>、<code>slice</code>、<code>interface</code>、<code>channel</code>这些数据类型本身就是<strong>指针</strong>类型的，所以就算是拷贝传值也是拷贝的指针，拷贝后的参数仍然指向底层数据结构，所以修改它们<strong>可能</strong>会影响外部数据结构的值。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    f1(a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [1 2]a: [100 2]</code></pre><blockquote><p>从运行结果发现，调用函数后，slice内容被改变了。</p></blockquote><p><strong>变长参数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(args ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>, args ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line">    f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line">    f2(<span class="string">&quot;tom&quot;</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>v: 1v: 2v: 3------------v: 1v: 2v: 3v: 4v: 5v: 6------------name: tomage: 20v: 1v: 2v: 3</code></pre><h1 id="golang函数类型与函数变量"><a href="#golang函数类型与函数变量" class="headerlink" title="golang函数类型与函数变量"></a>golang函数类型与函数变量</h1><p>可以使用<code>type</code>关键字来定义一个函数类型，语法格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> fun <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span></span><br></pre></td></tr></table></figure><p>上面语句定义了一个<code>fun</code>函数类型，它是一种函数类型，这种函数接收两个<code>int</code>类型的参数，并且返回一个<code>int</code>类型的返回值。</p><p>下面我们定义两个这样结构的两个函数，一个求和，一个比较大小：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>下面定义一个</code>fun<code>函数类型，把</code>sum<code>和</code>max<code>赋值给它</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fun <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f fun</span><br><span class="line">    f = sum</span><br><span class="line">    s := f(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    f = max</span><br><span class="line">    m := f(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;m: %v\n&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s: <span class="number">3</span></span><br><span class="line">m: <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="golang高阶函数"><a href="#golang高阶函数" class="headerlink" title="golang高阶函数"></a>golang高阶函数</h1><p>go语言的函数，可以作为函数的参数，传递给另外一个函数，可以可以作为，另外一个函数的返回值返回。</p><h2 id="go语言函数作为参数"><a href="#go语言函数作为参数" class="headerlink" title="go语言函数作为参数"></a>go语言函数作为参数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Hello,%s&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(name <span class="type">string</span>, f <span class="keyword">func</span>(<span class="type">string</span>)</span></span>) &#123;</span><br><span class="line">    f(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1(<span class="string">&quot;tom&quot;</span>, sayHello)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>Hello,tom</code></pre><h2 id="go语言函数作为返回值"><a href="#go语言函数作为返回值" class="headerlink" title="go语言函数作为返回值"></a>go语言函数作为返回值</h2><pre><code>package mainimport &quot;fmt&quot;func add(x, y int) int &#123;    return x + y&#125;func sub(x, y int) int &#123;    return x - y&#125;func cal(s string) func(int, int) int &#123;    switch s &#123;    case &quot;+&quot;:        return add    case &quot;-&quot;:        return sub    default:        return nil    &#125;&#125;func main() &#123;    add := cal(&quot;+&quot;)    r := add(1, 2)    fmt.Printf(&quot;r: %v\n&quot;, r)    fmt.Println(&quot;-----------&quot;)    sub := cal(&quot;-&quot;)    r = sub(100, 50)    fmt.Printf(&quot;r: %v\n&quot;, r)&#125;</code></pre><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r: <span class="number">3</span></span><br><span class="line">-----------</span><br><span class="line">r: <span class="number">50</span></span><br></pre></td></tr></table></figure><h1 id="golang匿名函数"><a href="#golang匿名函数" class="headerlink" title="golang匿名函数"></a>golang匿名函数</h1><p>go语言函数不能嵌套，但是在函数内部可以定义匿名函数，实现一下简单功能调用。</p><p>所谓匿名函数就是，没有名称的函数。</p><p>语法格式如下：</p><pre><code>func (参数列表)(返回值)</code></pre><blockquote><p>当然可以既没有参数，可以没有返回值</p></blockquote><h2 id="匿名函数实例"><a href="#匿名函数实例" class="headerlink" title="匿名函数实例"></a>匿名函数实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    max := <span class="function"><span class="keyword">func</span> <span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i := max(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i: 2</code></pre><p>自己执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 自己执行</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        max := <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">            max = a</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            max = b</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;max: %v\n&quot;</span>, max)</span><br><span class="line">    &#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max: <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="golang闭包"><a href="#golang闭包" class="headerlink" title="golang闭包"></a>golang闭包</h1><p>闭包可以理解成<strong>定义在一个函数内部的函数</strong>。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。或者说是函数和其引用环境的组合体。</p><p>闭包指的是一个函数和与其相关的引用环境组合而成的实体。简单来说，<code>闭包=函数+引用环境</code>。<br>首先我们来看一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        x += y</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f = add()</span><br><span class="line">    fmt.Println(f(<span class="number">10</span>))</span><br><span class="line">    fmt.Println(f(<span class="number">20</span>))</span><br><span class="line">    fmt.Println(f(<span class="number">30</span>))</span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line">    f1 := add()</span><br><span class="line">    fmt.Println(f1(<span class="number">40</span>))</span><br><span class="line">    fmt.Println(f1(<span class="number">50</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>103060-----------4090</code></pre><p>变量<code>f</code>是一个函数并且它引用了其外部作用域中的<code>x</code>变量，此时<code>f</code>就是一个闭包。<br>在<code>f</code>的生命周期内，<strong>变量<code>x</code>也一直有效。</strong> 闭包进阶示例1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        x += y</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f = add(<span class="number">10</span>)</span><br><span class="line">    fmt.Println(f(<span class="number">10</span>))</span><br><span class="line">    fmt.Println(f(<span class="number">20</span>))</span><br><span class="line">    fmt.Println(f(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    f1 := add(<span class="number">20</span>)</span><br><span class="line">    fmt.Println(f1(<span class="number">40</span>))</span><br><span class="line">    fmt.Println(f1(<span class="number">50</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>204070----------60110</code></pre><p>闭包进阶示例2：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffixFunc</span><span class="params">(suffix <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line">            <span class="keyword">return</span> name + suffix</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    jpgFunc := makeSuffixFunc(<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">    txtFunc := makeSuffixFunc(<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">    fmt.Println(jpgFunc(<span class="string">&quot;test&quot;</span>)) </span><br><span class="line">    fmt.Println(txtFunc(<span class="string">&quot;test&quot;</span>)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>test.jpgtest.txt</code></pre><p>闭包进阶示例3：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(base <span class="type">int</span>)</span></span> (<span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span>, <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span>) &#123;</span><br><span class="line">    add := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        base += i</span><br><span class="line">        <span class="keyword">return</span> base</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sub := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        base -= i</span><br><span class="line">        <span class="keyword">return</span> base</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> add, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1, f2 := calc(<span class="number">10</span>)</span><br><span class="line">    fmt.Println(f1(<span class="number">1</span>), f2(<span class="number">2</span>)) </span><br><span class="line">    fmt.Println(f1(<span class="number">3</span>), f2(<span class="number">4</span>)) </span><br><span class="line">    fmt.Println(f1(<span class="number">5</span>), f2(<span class="number">6</span>)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>11 912 813 7</code></pre><p>闭包其实并不复杂，只要牢记<code>闭包=函数+引用环境</code>。</p><h1 id="golang递归"><a href="#golang递归" class="headerlink" title="golang递归"></a>golang递归</h1><p>函数内部调用函数自身的函数称为递归函数。</p><p>使用递归函数最重要的三点：</p><ol><li>递归就是自己调用自己。</li><li>必须先定义函数的退出条件，没有退出条件，递归将成为死循环。</li><li>go语言递归函数很可能会产生一大堆的goroutine，也很可能会出现栈空间内存溢出问题。</li></ol><h2 id="go语言递归实例"><a href="#go语言递归实例" class="headerlink" title="go语言递归实例"></a>go语言递归实例</h2><p><strong>阶乘</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 返回条件</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 自己调用自己</span></span><br><span class="line">        <span class="keyword">return</span> n * a(n<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">5</span></span><br><span class="line">    r := a(n)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>r: 120</code></pre><p><strong>斐波那契数列</strong></p><p>它的计算公式为<code>f(n)=f(n-1)+f(n-2)</code>且<code>f(2)=f(1)=1</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 退出点判断</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> || n == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归表达式</span></span><br><span class="line">    <span class="keyword">return</span> f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := f(<span class="number">5</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r: <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="golang-defer语句"><a href="#golang-defer语句" class="headerlink" title="golang defer语句"></a>golang defer语句</h1><p>go语言中的<code>defer</code>语句会将其后面跟随的语句进行<strong>延迟</strong>处理。在<code>defer</code>归属的函数即将返回时，将延迟处理的语句按<code>defer</code>定义的<strong>逆序</strong>进行执行，也就是说，先被<code>defer</code>的语句最后被执行，最后被<code>defer</code>的语句，最先被执行。stack</p><h2 id="defer特性"><a href="#defer特性" class="headerlink" title="defer特性"></a>defer特性</h2><ol><li>关键字 <code>defer</code> 用于注册延迟调用。</li><li>这些调用直到 <code>return</code> 前才被执。因此，可以用来做资源清理。</li><li>多个<code>defer</code>语句，按先进后出的方式执行。</li><li><code>defer</code>语句中的变量，在<code>defer</code>声明时就决定了。</li></ol><h2 id="defer用途"><a href="#defer用途" class="headerlink" title="defer用途"></a>defer用途</h2><ol><li>关闭文件句柄</li><li>锁资源释放</li><li>数据库连接释放</li></ol><h2 id="go语言defer语句实例"><a href="#go语言defer语句实例" class="headerlink" title="go语言defer语句实例"></a>go语言defer语句实例</h2><p><strong>查看执行顺序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;step2&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;step3&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">end</span><br><span class="line">step3</span><br><span class="line">step2</span><br><span class="line">step1</span><br></pre></td></tr></table></figure><h1 id="golang-init函数"><a href="#golang-init函数" class="headerlink" title="golang init函数"></a>golang init函数</h1><p>golang有一个特殊的函数<code>init</code>函数，先于<code>main</code>函数执行，实现包级别的一些<strong>初始化</strong>操作。</p><h2 id="init函数的主要特点"><a href="#init函数的主要特点" class="headerlink" title="init函数的主要特点"></a>init函数的主要特点</h2><ul><li>init函数先于main函数<strong>自动执行</strong>，不能被其他函数调用；</li><li>init函数没有输入参数、返回值；</li><li>每个包可以有多个init函数；</li><li><strong>包的每个源文件也可以有多个init函数</strong>，这点比较特殊；</li><li>同一个包的init执行顺序，golang没有明确定义，编程时要注意程序不要依赖这个执行顺序。</li><li>不同包的init函数按照包导入的依赖关系决定执行顺序。</li></ul><h2 id="golang-初始化顺序"><a href="#golang-初始化顺序" class="headerlink" title="golang 初始化顺序"></a>golang 初始化顺序</h2><p>初始化顺序：<strong>变量初始化-&gt;init()-&gt;main()</strong></p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = initVar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initVar</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init var...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;main...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init <span class="keyword">var</span>...</span><br><span class="line">init2</span><br><span class="line">init</span><br><span class="line">main...</span><br></pre></td></tr></table></figure><p>程序在运行时，会首先调用 <code>initVar()</code> 函数来初始化全局变量 <code>a</code> 的值。在<br><code>initVar()</code> 函数中，会先打印出 “init var…”。</p><p>然后，程序会按照定义顺序调用两个 <code>init()</code> 函数。因为 <code>init()</code><br>函数是在包被导入时自动调用的，所以这两个函数会在 <code>main()</code><br>函数之前被执行。因此，打印出的内容是 “init” 和 “init2”。</p><p>最后，程序调用 <code>main()</code> 函数，并打印出 “main…”。</p><h1 id="golang指针"><a href="#golang指针" class="headerlink" title="golang指针"></a>golang指针</h1><p>Go语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量。传递数据使用指针，而无须拷贝数据。</p><p>类型指针不能进行偏移和运算。</p><p>Go语言中的指针操作非常简单，只需要记住两个符号：<code>&amp;</code>（取地址）和<code>*</code>（根据地址取值）。</p><h3 id="指针地址和指针类型"><a href="#指针地址和指针类型" class="headerlink" title="指针地址和指针类型"></a>指针地址和指针类型</h3><p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用<code>&amp;</code>字符放在变量前面对变量进行<strong>取地址</strong>操作。<br>Go语言中的值类型<code>（int、float、bool、string、array、struct）</code>都有对应的指针类型，如：<code>*int、*int64、*string</code>等。</p><h2 id="指针语法"><a href="#指针语法" class="headerlink" title="指针语法"></a>指针语法</h2><p>一个指针变量指向了一个值的内存地址。（也就是我们声明了一个指针之后，可以像变量赋值一样，把一个值的内存地址放入到指针当中。）</p><p>类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> var_name *<span class="keyword">var</span>-<span class="keyword">type</span></span><br></pre></td></tr></table></figure><p><code>var-type</code> ：为指针类型</p><p><code>var_name</code> ：为指针变量名</p><p><code>*</code> ：用于指定变量是作为一个指针。</p><h2 id="指针声明实例"><a href="#指针声明实例" class="headerlink" title="指针声明实例"></a>指针声明实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ip *<span class="type">int</span>        <span class="comment">/* 指向整型*/</span></span><br><span class="line"><span class="keyword">var</span> fp *<span class="type">float32</span>    <span class="comment">/* 指向浮点型 */</span></span><br></pre></td></tr></table></figure><h2 id="指针使用实例"><a href="#指针使用实例" class="headerlink" title="指针使用实例"></a>指针使用实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span>= <span class="number">20</span>   <span class="comment">/* 声明实际变量 */</span></span><br><span class="line">    <span class="keyword">var</span> ip *<span class="type">int</span>        <span class="comment">/* 声明指针变量 */</span></span><br><span class="line">    ip = &amp;a  <span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a 变量的地址是: %x\n&quot;</span>, &amp;a  )</span><br><span class="line">    <span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;ip 变量储存的指针地址: %x\n&quot;</span>, ip )</span><br><span class="line">    <span class="comment">/* 使用指针访问值 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;*ip 变量的值: %d\n&quot;</span>, *ip )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a 变量的地址是: c00000a0a8</span><br><span class="line">ip 变量储存的指针地址: c00000a0a8</span><br><span class="line">*ip 变量的值: <span class="number">20</span></span><br></pre></td></tr></table></figure><h1 id="golang指向数组的指针"><a href="#golang指向数组的指针" class="headerlink" title="golang指向数组的指针"></a>golang指向数组的指针</h1><h2 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr [MAX]*<span class="type">int</span>; 表示数组里面的元素的类型是指针类型</span><br></pre></td></tr></table></figure><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MAX <span class="type">int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> ptr [MAX]*<span class="type">int</span>;</span><br><span class="line">    fmt.Println(ptr)   <span class="comment">//这个打印出来是[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]</span></span><br><span class="line">    <span class="keyword">for</span>  i = <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">        ptr[i] = &amp;a[i] <span class="comment">/* 整数地址赋值给指针数组 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>  i = <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a[%d] = %d\n&quot;</span>, i,*ptr[i] )   <span class="comment">//*ptr[i]就是打印出相关指针的值了。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt;]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="golang类型定义和类型别名"><a href="#golang类型定义和类型别名" class="headerlink" title="golang类型定义和类型别名"></a>golang类型定义和类型别名</h1><p>在介绍<strong>结构体</strong>之前，我们先来看看什么是类型定义和类型别名。</p><h1 id="go语言类型定义"><a href="#go语言类型定义" class="headerlink" title="go语言类型定义"></a>go语言类型定义</h1><p><strong>类型定义的语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewType Type</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 类型定义</span></span><br><span class="line">    <span class="keyword">type</span> MyInt <span class="type">int</span></span><br><span class="line">    <span class="comment">// i 为MyInt类型</span></span><br><span class="line">    <span class="keyword">var</span> i MyInt</span><br><span class="line">    i = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v i: %T\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i: 100 i: main.MyInt</code></pre><h2 id="go语言类型别名"><a href="#go语言类型别名" class="headerlink" title="go语言类型别名"></a>go语言类型别名</h2><p><strong>类型别名的语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewType = Type</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 类型别名定义</span></span><br><span class="line">    <span class="keyword">type</span> MyInt2 = <span class="type">int</span></span><br><span class="line">    <span class="comment">// i 其实还是int类型</span></span><br><span class="line">    <span class="keyword">var</span> i MyInt2</span><br><span class="line">    i = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v i: %T\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言类型定义和类型别名的区别"><a href="#go语言类型定义和类型别名的区别" class="headerlink" title="go语言类型定义和类型别名的区别"></a>go语言类型定义和类型别名的区别</h2><ol><li>类型定义相当于定义了一个<strong>全新的类型</strong>，与之前的类型不同；但是类型别名并没有定义一个新的类型，而是使用一个别名来替换之前的类型</li><li>类型别名只会在<strong>代码</strong>中存在，在<strong>编译完成</strong>之后并不会存在该别名</li><li>因为类型别名和原来的类型是一致的，所以原来类型所拥有的<strong>方法</strong>，类型别名中也<strong>可以</strong>调用，但是如果是重新定义的一个类型，那么<strong>不可以</strong>调用之前的任何方法</li></ol><h1 id="golang-结构体"><a href="#golang-结构体" class="headerlink" title="golang 结构体"></a>golang 结构体</h1><p>go语言没有面向对象的概念了，但是可以使用结构体来实现，面向对象编程的一些特性，例如：继承、组合等特性。</p><h2 id="go语言结构体的定义"><a href="#go语言结构体的定义" class="headerlink" title="go语言结构体的定义"></a>go语言结构体的定义</h2><p>上一节我们介绍了类型定义，结构体的定义和类型定义类似，只不过多了一个<code>struct</code>关键字，语法结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> struct_variable_type <span class="keyword">struct</span> &#123;</span><br><span class="line">   member definition;</span><br><span class="line">   member definition;</span><br><span class="line">   ...</span><br><span class="line">   member definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>type</code>：结构体定义关键字</p><p><code>struct_variable_type</code>：结构体类型名称</p><p><code>struct</code>：结构体定义关键字</p><p><code>member definition;</code>：成员定义</p><p><strong>实例</strong></p><p>下面我们定义一个人的结构体Person</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id    <span class="type">int</span></span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    age   <span class="type">int</span></span><br><span class="line">    email <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上我们定义一个Person结构体，有四个成员，来描述一个Person的信息。</p><p>形同类型的可以<strong>合并到一行</strong>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id, age     <span class="type">int</span></span><br><span class="line">    name, email <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明一个结构体变量"><a href="#声明一个结构体变量" class="headerlink" title="声明一个结构体变量"></a>声明一个结构体变量</h2><p>声明一个结构体变量和声明一个普通变量相同，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tom Person</span><br><span class="line">fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">kite := Person&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br></pre></td></tr></table></figure><p>也行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tom: &#123;<span class="number">0</span> <span class="number">0</span>  &#125;</span><br><span class="line">kite: &#123;<span class="number">0</span> <span class="number">0</span>  &#125;</span><br></pre></td></tr></table></figure><p>结构体成员，在没有赋值之前都是零值。</p><h2 id="访问结构体成员"><a href="#访问结构体成员" class="headerlink" title="访问结构体成员"></a>访问结构体成员</h2><p>可以使用点运算符(<code>.</code>)，来访问结构体成员，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tom Person</span><br><span class="line">    tom.id = <span class="number">1</span></span><br><span class="line">    tom.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    tom.age = <span class="number">20</span></span><br><span class="line">    tom.email = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tom: &#123;<span class="number">1</span> <span class="number">20</span> tom tom@gmail.com&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h2><p>如果结构体是临时使用，可以不用起名字，直接使用，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dog <span class="keyword">struct</span> &#123;</span><br><span class="line">        id   <span class="type">int</span></span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line">    dog.id = <span class="number">1</span></span><br><span class="line">    dog.name = <span class="string">&quot;花花&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %v\n&quot;</span>, dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang结构体的初始化"><a href="#golang结构体的初始化" class="headerlink" title="golang结构体的初始化"></a>golang结构体的初始化</h1><p>未初始化的结构体，成员都是零值 int 0 float 0.0 bool false string nil nil</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tom Person</span><br><span class="line">    fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>tom: &#123;0 0 &quot;&quot; &quot;&quot;&#125;</code></pre><h2 id="使用键值对对结构体进行初始化"><a href="#使用键值对对结构体进行初始化" class="headerlink" title="使用键值对对结构体进行初始化"></a>使用键值对对结构体进行初始化</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kite := Person&#123;</span><br><span class="line">        id:    <span class="number">1</span>,</span><br><span class="line">        name:  <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">        age:   <span class="number">20</span>,</span><br><span class="line">        email: <span class="string">&quot;kite@gmail.com&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>kite: &#123;1 20 kite kite@gmail.com&#125;</code></pre><h3 id="使用值的列表初始化"><a href="#使用值的列表初始化" class="headerlink" title="使用值的列表初始化"></a>使用值的列表初始化</h3><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kite := Person&#123;</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">20</span>,</span><br><span class="line">        <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">        <span class="string">&quot;kite@gmail.com&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>kite: &#123;1 20 kite kite@gmail.com&#125;</code></pre><blockquote><p>注意：</p><ol><li>必须初始化结构体的所有字段。</li><li>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li><li>该方式不能和键值初始化方式混用。</li></ol></blockquote><h2 id="部分成员初始化"><a href="#部分成员初始化" class="headerlink" title="部分成员初始化"></a>部分成员初始化</h2><p>用不到的成员，可以不进行初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kite := Person&#123;</span><br><span class="line">        id:   <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kite: &#123;<span class="number">1</span> <span class="number">0</span> kite <span class="string">&quot;&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h1 id="golang结构体指针"><a href="#golang结构体指针" class="headerlink" title="golang结构体指针"></a>golang结构体指针</h1><p>结构体指针和普通的变量指针相同，我先来回顾一下普通变量的指针，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">    name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    <span class="comment">// p_name 指针类型</span></span><br><span class="line">    <span class="keyword">var</span> p_name *<span class="type">string</span></span><br><span class="line">    <span class="comment">// &amp;name 取name地址</span></span><br><span class="line">    p_name = &amp;name</span><br><span class="line">    fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">    <span class="comment">// 输出指针地址</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;p_name: %v\n&quot;</span>, p_name)</span><br><span class="line">    <span class="comment">// 输出指针指向的内容值</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;*p_name: %v\n&quot;</span>, *p_name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>name: tomp_name: 0xc00010e120*p_name: tom</code></pre><h2 id="go结构体指针"><a href="#go结构体指针" class="headerlink" title="go结构体指针"></a>go结构体指针</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id   <span class="type">int</span></span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tom = Person&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p_person *Person</span><br><span class="line">    p_person = &amp;tom</span><br><span class="line">    fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p_person: %p\n&quot;</span>, p_person)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;*p_person: %v\n&quot;</span>, *p_person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>tom: &#123;1 tom&#125;p_person: 0xc000004078*p_person: &#123;1 tom&#125;</code></pre><h2 id="使用new关键字创建结构体指针"><a href="#使用new关键字创建结构体指针" class="headerlink" title="使用new关键字创建结构体指针"></a>使用<code>new</code>关键字创建结构体指针</h2><p>我们还可以通过使用<code>new</code>关键字对结构体进行实例化，得到的是结构体的地址，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id   <span class="type">int</span></span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p_person = <span class="built_in">new</span>(Person)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p_person: %T\n&quot;</span>, p_person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>p_person: *main.Person</code></pre><p>从运行结果，我们发现p_person为指针类型</p><h2 id="访问结构体指针成员"><a href="#访问结构体指针成员" class="headerlink" title="访问结构体指针成员"></a>访问结构体指针成员</h2><p>访问结构体指针成员，也使用点运算符(<code>.</code>)，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id   <span class="type">int</span></span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p_person = <span class="built_in">new</span>(Person)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p_person: %T\n&quot;</span>, p_person)</span><br><span class="line"></span><br><span class="line">    p_person.id = <span class="number">1</span></span><br><span class="line">    p_person.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;*p_person: %v\n&quot;</span>, *p_person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p_person: *main.Person</span><br><span class="line">*p_person: &#123;<span class="number">1</span> tom&#125;</span><br></pre></td></tr></table></figure><h1 id="golang结构体作为函数参数"><a href="#golang结构体作为函数参数" class="headerlink" title="golang结构体作为函数参数"></a>golang结构体作为函数参数</h1><p>go结构体可以像普通变量一样，作为函数的参数，传递给函数，这里分为两种情况：</p><ol><li>直接传递结构体，这是是一个副本（拷贝），在函数内部不会改变外面结构体内容。</li><li>传递结构体指针，这时在函数内部，能够改变外部结构体内容。</li></ol><h2 id="直接传递结构体"><a href="#直接传递结构体" class="headerlink" title="直接传递结构体"></a>直接传递结构体</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id   <span class="type">int</span></span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson</span><span class="params">(person Person)</span></span> &#123;</span><br><span class="line">    person.id = <span class="number">1</span></span><br><span class="line">    person.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person := Person&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">    showPerson(person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>person: &#123;1 tom&#125;----------------person: &#123;1 kite&#125;----------------person: &#123;1 tom&#125;</code></pre><p>从运行结果可以看出，函数内部改变了结构体内容，函数外面并没有被改变。</p><blockquote><p>从输出结果可以看出，showPerson 函数将传入的 “person” 变量的 “id” 和<br>“name” 成员变量分别修改为 1 和 “kite”，然后将修改后的 “person”<br>变量打印到控制台上。但是，在 main 函数中打印 “person”<br>变量时，其值没有发生变化，因为在 Go<br>语言中，结构体类型的参数是按值传递的，即传递的是该参数的副本，而不是其指针。因此，showPerson<br>函数修改的是其副本，而不是原始的 “person”<br>变量。如果要修改原始变量，可以将参数定义为指针类型，并使用 *<br>操作符来获取其指针。</p><p>在 Go 语言中，函数参数是按值传递的。也就是说，当 showPerson<br>函数被调用时，它会接收到一个 person 变量的副本，而不是原始的 person<br>变量。因此，当 showPerson 函数修改 person<br>副本的属性时，它实际上修改的是副本的值，而不是原始 person<br>变量的值。原始 person 变量的值仍然是创建时的值，即 id 为 1，name 为<br>“tom”。因此，在 main 函数中打印 person<br>变量的值时，输出的仍然是原始的值 “1,tom”，而不是 showPerson<br>函数修改后的值<br>“2,kite”。如果要修改原始变量，可以将参数定义为指针类型，并使用 *<br>操作符来获取其指针。</p></blockquote><h2 id="传递结构体指针"><a href="#传递结构体指针" class="headerlink" title="传递结构体指针"></a>传递结构体指针</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id   <span class="type">int</span></span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson</span><span class="params">(person *Person)</span></span> &#123;</span><br><span class="line">    person.id = <span class="number">1</span></span><br><span class="line">    person.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person := Person&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">    showPerson(&amp;person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>person: &#123;1 tom&#125;----------------person: &amp;&#123;1 kite&#125;----------------person: &#123;1 kite&#125;</code></pre><p>从运行结果，我们可以看到，调用函数后，参数被改变了。</p><h1 id="golang嵌套结构体"><a href="#golang嵌套结构体" class="headerlink" title="golang嵌套结构体"></a>golang嵌套结构体</h1><p>go语言没有面向对象编程思想，也没有继承关系，但是可以通过结构体嵌套来实现这种效果。</p><p>下面通过实例演示如何实现结构体嵌套，加入有一个人<code>Person</code>结构体，这个人还养了一个宠物<code>Dog</code>结构体。</p><p>下面我们来看一下：</p><p><strong>Dog结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    color <span class="type">string</span></span><br><span class="line">    age   <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Person结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">    dog  Dog</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问它们</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    color <span class="type">string</span></span><br><span class="line">    age   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">    dog  Dog</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> tom person</span><br><span class="line">    tom.dog.name = <span class="string">&quot;花花&quot;</span></span><br><span class="line">    tom.dog.color = <span class="string">&quot;黑白花&quot;</span></span><br><span class="line">    tom.dog.age = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    tom.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    tom.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tom: &#123;&#123;花花 黑白花 <span class="number">2</span>&#125; tom <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="golang方法"><a href="#golang方法" class="headerlink" title="golang方法"></a>golang方法</h1><p>go语言没有面向对象的特性，也没有类对象的概念。但是，可以使用结构体来模拟这些特性，我们都知道面向对象里面有类方法等概念。我们也可以声明一些方法，属于某个结构体。</p><h2 id="go语言方法的语法"><a href="#go语言方法的语法" class="headerlink" title="go语言方法的语法"></a>go语言方法的语法</h2><p>Go中的方法，是一种<strong>特殊的函数</strong>，定义于struct之上(与struct关联、绑定)，被称为struct的接受者(receiver)。</p><p>通俗的讲，方法就是有接收者的函数。</p><p>语法格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mytype <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recv mytype)</span></span> my_method(para) return_type &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recv *mytype)</span></span> my_method(para) return_type &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>mytype</code>：定义一个结构体</p><p><code>recv</code>：接受该方法的结构体(receiver)</p><p><code>my_method</code>：方法名称</p><p><code>para</code>：参数列表</p><p><code>return_type</code>：返回值类型</p><p>从语法格式可以看出，一个方法和一个函数非常相似，多了一个接受类型。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(per.name + <span class="string">&quot; eating....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(per.name + <span class="string">&quot; sleep....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> per Person</span><br><span class="line">    per.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    per.eat()</span><br><span class="line">    per.sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>tom eating....tom sleep....</code></pre><h2 id="go语言方法的注意事项"><a href="#go语言方法的注意事项" class="headerlink" title="go语言方法的注意事项"></a>go语言方法的注意事项</h2><ol><li>方法的receiver<br>type并非一定要是struct类型，type定义的类型别名、slice、map、channel、func类型等都可以。</li><li>struct结合它的方法就等价于面向对象中的类。只不过struct可以和它的方法分开，并非一定要属于同一个文件，但必须属于同一个包。</li><li>方法有两种接收类型：<code>(T Type)</code>和<code>(T *Type)</code>，它们之间有区别。</li><li>方法就是函数，所以Go中没有方法重载(overload)的说法，也就是说同一个类型中的所有方法名必须都唯一。</li><li>如果receiver是一个指针类型，则会自动解除引用。</li><li>方法和type是分开的，意味着实例的行为(behavior)和数据存储(field)是分开的，但是它们通过receiver建立起关联关系。</li></ol><h1 id="golang方法接收者类型"><a href="#golang方法接收者类型" class="headerlink" title="golang方法接收者类型"></a>golang方法接收者类型</h1><p>结构体实例，有值类型和指针类型，那么方法的接收者是结构体，那么也有值类型和指针类型。区别就是接收者是否复制结构体副本。值类型复制，指针类型不复制。</p><h2 id="值类型结构体和指针类型结构体"><a href="#值类型结构体和指针类型结构体" class="headerlink" title="值类型结构体和指针类型结构体"></a>值类型结构体和指针类型结构体</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %T\n&quot;</span>, p1)</span><br><span class="line">    p2 := &amp;Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %T\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>p1: main.Personp2: *main.Person</code></pre><p>从运行结果，我们可以看出p1是值类型，p2是指针类型。</p><p>下面看一个传参结构体的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson</span><span class="params">(per Person)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, &amp;per)</span><br><span class="line">    per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson2</span><span class="params">(per *Person)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, per)</span><br><span class="line">    per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %p\n&quot;</span>, &amp;p1)</span><br><span class="line">    showPerson(p1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %v\n&quot;</span>, p1)</span><br><span class="line">    fmt.Println(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">    p2 := &amp;Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %p\n&quot;</span>, p2)</span><br><span class="line">    showPerson2(p2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %v\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>p1: 0xc000046240per: 0xc000046250per: &#123;kite&#125;p1: &#123;tom&#125;---------------p2: 0xc000046280per: 0xc000046280per: &amp;&#123;kite&#125;p2: &amp;&#123;kite&#125;</code></pre><p>从运行结果，我们看到p1是值传递，拷贝了副本，地址发生了改变，而p2是指针类型，地址没有改变。</p><h2 id="方法的值类型和指针类型接收者"><a href="#方法的值类型和指针类型接收者" class="headerlink" title="方法的值类型和指针类型接收者"></a>方法的值类型和指针类型接收者</h2><p>值类型和指针类型接收者，本质上和函数传参道理相同。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> showPerson() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, &amp;per)</span><br><span class="line">    per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per *Person)</span></span> showPerson2() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, per)</span><br><span class="line">    per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %p\n&quot;</span>, &amp;p1)</span><br><span class="line">    p1.showPerson()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %v\n&quot;</span>, p1)</span><br><span class="line">    fmt.Println(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">    p2 := &amp;Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %p\n&quot;</span>, p2)</span><br><span class="line">    p2.showPerson2()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %v\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>p1: 0xc000046240per: 0xc000046250per: &#123;kite&#125;p1: &#123;tom&#125;---------------p2: 0xc000046280per: 0xc000046280per: &amp;&#123;kite&#125;p2: &amp;&#123;kite&#125;</code></pre><p>从运行结果，我们看到p1是值传递，拷贝了副本，地址发生了改变，而p2是指针类型，地址没有改变。</p><h1 id="golang接口"><a href="#golang接口" class="headerlink" title="golang接口"></a>golang接口</h1><p>接口像是一个公司里面的领导，他会定义一些通用规范，只设计规范，而不实现规范。</p><p>go语言的接口，是一种新的<strong>类型定义</strong>，它把所有的<strong>具有共性的方法</strong>定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。</p><p>语法格式和方法非常类似。</p><h2 id="接口的语法格式"><a href="#接口的语法格式" class="headerlink" title="接口的语法格式"></a>接口的语法格式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义接口 */</span></span><br><span class="line"><span class="keyword">type</span> interface_name <span class="keyword">interface</span> &#123;</span><br><span class="line">   method_name1 [return_type]</span><br><span class="line">   method_name2 [return_type]</span><br><span class="line">   method_name3 [return_type]</span><br><span class="line">   ...</span><br><span class="line">   method_namen [return_type]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义结构体 */</span></span><br><span class="line"><span class="keyword">type</span> struct_name <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">/* variables */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实现接口方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span></span> method_name1() [return_type] &#123;</span><br><span class="line">   <span class="comment">/* 方法实现 */</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span></span> method_namen() [return_type] &#123;</span><br><span class="line">   <span class="comment">/* 方法实现*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接口定义中定义，若干个空方法。这些方法都具有通用性。</p><h2 id="接口实例"><a href="#接口实例" class="headerlink" title="接口实例"></a>接口实例</h2><p>下面我定义一个USB接口，有读read和写write两个方法，再定义一个电脑Computer和一个手机Mobile来实现这个接口。</p><p><strong>USB接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> USB <span class="keyword">interface</span> &#123;</span><br><span class="line">    read()</span><br><span class="line">    write()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Computer结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Mobile结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Mobile <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Computer实现USB接口方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span></span> read() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;computer read...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span></span> write() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;computer write...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Mobile实现USB接口方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Mobile)</span></span> read() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;mobile read...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Mobile)</span></span> write() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;mobile write...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := Computer&#123;&#125;</span><br><span class="line">    m := Mobile&#123;&#125;</span><br><span class="line"></span><br><span class="line">    c.read()</span><br><span class="line">    c.write()</span><br><span class="line">    m.read()</span><br><span class="line">    m.write()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computer read...</span><br><span class="line">computer write...</span><br><span class="line">moblice read...</span><br><span class="line">moblice write...</span><br></pre></td></tr></table></figure><h2 id="实现接口必须实现接口中的所有方法"><a href="#实现接口必须实现接口中的所有方法" class="headerlink" title="实现接口必须实现接口中的所有方法"></a>实现接口必须实现接口中的所有方法</h2><p>下面我们定义一个OpenClose接口，里面有两个方法open和close，定义个Door结构体，实现其中一个方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OpenClose <span class="keyword">interface</span> &#123;</span><br><span class="line">    open()</span><br><span class="line">    <span class="built_in">close</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Door <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Door)</span></span> open() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;open door...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> oc OpenClose</span><br><span class="line">    oc = Door&#123;&#125; <span class="comment">// 这里编译错误，提示只实现了一个接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang接口值类型接收者和指针类型接收者"><a href="#golang接口值类型接收者和指针类型接收者" class="headerlink" title="golang接口值类型接收者和指针类型接收者"></a>golang接口值类型接收者和指针类型接收者</h1><p>这个话题，本质上和方法的值类型接收者和指针类型接收者，的思考方法是一样的，值接收者是一个拷贝，是一个副本，而指针接收者，传递的是指针。</p><h2 id="实例演示-1"><a href="#实例演示-1" class="headerlink" title="实例演示"></a>实例演示</h2><p><strong>定义一个Pet接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span><br><span class="line">    eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个Dog结构体</strong></p><pre><code>type Dog struct &#123;    name string&#125;</code></pre><p><strong>实现Pet接口（接收者是值类型）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> eat() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, &amp;dog)</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog eat..&quot;</span>)</span><br><span class="line">    dog.name = <span class="string">&quot;黑黑&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dog := Dog&#123;name: <span class="string">&quot;花花&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, &amp;dog)</span><br><span class="line">    dog.eat()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %v\n&quot;</span>, dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>dog: 0xc000046240dog: 0xc000046250dog eat..dog: &#123;花花&#125;</code></pre><p>从运行结果，我们看出dog的地址变了，说明是复制了一份，dog的name没有变说明，外面的dog变量没有被改变。</p><p><strong>将Pet接口改为指针接收者</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog *Dog)</span></span> eat() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, dog)</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog eat..&quot;</span>)</span><br><span class="line">    dog.name = <span class="string">&quot;黑黑&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>再测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dog := &amp;Dog&#123;name: <span class="string">&quot;花花&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, dog)</span><br><span class="line">    dog.eat()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %v\n&quot;</span>, dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog: <span class="number">0xc00008c230</span></span><br><span class="line">dog: <span class="number">0xc00008c230</span></span><br><span class="line">dog eat..</span><br><span class="line">dog: &amp;&#123;黑黑&#125;</span><br></pre></td></tr></table></figure><h1 id="golang接口和类型的关系"><a href="#golang接口和类型的关系" class="headerlink" title="golang接口和类型的关系"></a>golang接口和类型的关系</h1><ol><li>一个类型可以实现多个接口</li><li>多个类型可以实现同一个接口（多态）</li></ol><h2 id="一个类型实现多个接口"><a href="#一个类型实现多个接口" class="headerlink" title="一个类型实现多个接口"></a>一个类型实现多个接口</h2><p>一个类型实现多个接口，例如：有一个Player接口可以播放音乐，有一个Video接口可以播放视频，一个手机Mobile实现这两个接口，既可以播放音乐，又可以播放视频。</p><p><strong>定义一个Player接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Player <span class="keyword">interface</span> &#123;</span><br><span class="line">    playMusic()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个Video接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Video <span class="keyword">interface</span> &#123;</span><br><span class="line">    playVideo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义Mobile结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Mobile <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现两个接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mobile)</span></span> playMusic() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;播放音乐&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mobile)</span></span> playVideo() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;播放视频&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := Mobile&#123;&#125;</span><br><span class="line">    m.playMusic()</span><br><span class="line">    m.playVideo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>播放音乐播放视频</code></pre><h2 id="多个类型实现同一个接口"><a href="#多个类型实现同一个接口" class="headerlink" title="多个类型实现同一个接口"></a>多个类型实现同一个接口</h2><p>比如，一个宠物接口Pet，猫类型Cat和狗类型Dog都可以实现该接口，都可以把猫和狗当宠物类型对待，这在其他语言中叫做<strong>多态</strong>。</p><p><strong>定义一个Pet接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span><br><span class="line">    eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个Dog结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个Cat结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;cat eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog eat...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Pet</span><br><span class="line">    p = Cat&#123;&#125;</span><br><span class="line">    p.eat()</span><br><span class="line">    p = Dog&#123;&#125;</span><br><span class="line">    p.eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat eat...</span><br><span class="line">dog eat...</span><br></pre></td></tr></table></figure><h1 id="golang接口嵌套"><a href="#golang接口嵌套" class="headerlink" title="golang接口嵌套"></a>golang接口嵌套</h1><p>接口可以通过嵌套，创建新的接口。例如：飞鱼，既可以飞，又可以游泳。我们创建一个飞Fly接口，创建一个游泳接口Swim，飞鱼接口有这两个接口组成。</p><p><strong>飞Flyer接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Flyer <span class="keyword">interface</span> &#123;</span><br><span class="line">    fly()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建Swimmer接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Swimmer <span class="keyword">interface</span> &#123;</span><br><span class="line">    swim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组合一个接口FlyFish</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FlyFish <span class="keyword">interface</span> &#123;</span><br><span class="line">    Flyer</span><br><span class="line">    Swimmer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建一个结构体Fish</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Fish <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现这个组合接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fish Fish)</span></span> fly() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;fly...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fish Fish)</span></span> swim() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;swim...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ff FlyFish</span><br><span class="line">    ff = Fish&#123;&#125;</span><br><span class="line">    ff.fly()</span><br><span class="line">    ff.swim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>fly...swim...</code></pre><h1 id="golang-通过接口实现OCP设计原则"><a href="#golang-通过接口实现OCP设计原则" class="headerlink" title="golang 通过接口实现OCP设计原则"></a>golang 通过接口实现OCP设计原则</h1><p>而面向<strong>对象的可复用设计</strong>的第一块基石，便是所谓的”开-闭”原则（Open-Closed<br>Principle,常缩写为OCP）。虽然，go不是面向对象语言，但是也可以模拟实现这个原则。对<strong>扩展</strong>是开放的，对<strong>修改</strong>是关闭的。</p><h2 id="OCP设计原则实例"><a href="#OCP设计原则实例" class="headerlink" title="OCP设计原则实例"></a>OCP设计原则实例</h2><p>下面通过一个人养宠物的例子，来解释OCP设计原则。</p><p><strong>定义一个宠物接口Pet</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span><br><span class="line">    eat()</span><br><span class="line">    sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口有吃和睡两个方法。</p><p><strong>定义个Dog结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dog实现接口方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog sleep...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个Cat结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Cat实现接口方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;cat eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;cat sleep...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义个Person结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为Person添加一个养宠物方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> care(pet Pet) &#123;</span><br><span class="line">    pet.eat()</span><br><span class="line">    pet.sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后测试一下</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    dog := Dog&#123;&#125;</span><br><span class="line">    cat := Cat&#123;&#125;</span><br><span class="line">    per := Person&#123;&#125;</span><br><span class="line"></span><br><span class="line">    per.care(dog)</span><br><span class="line">    per.care(cat)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog eat...</span><br><span class="line">dog sleep...</span><br><span class="line">cat eat...</span><br><span class="line">cat sleep...</span><br></pre></td></tr></table></figure><p>使用接口的这种设计方法，可以很好的解耦合代码，实现软件设计的OCP原则（即开闭原则）</p><p>这样设计，如果再添加一个宠物，例如：一个鸟<code>Bird</code>，原有的代码不用修改，直接添加就可以。</p><h1 id="golang继承"><a href="#golang继承" class="headerlink" title="golang继承"></a>golang继承</h1><p>golang本质上没有oop的概念，也没有继承的概念，但是可以通过<strong>结构体嵌套</strong>实现这个特性。</p><p><strong>例如</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sleep&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">    Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dog := Dog&#123;</span><br><span class="line">        Animal&#123;</span><br><span class="line">            name: <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">            age:  <span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cat := Cat&#123;</span><br><span class="line">        Animal&#123;name: <span class="string">&quot;cat&quot;</span>,</span><br><span class="line">            age: <span class="number">3</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dog.eat()</span><br><span class="line">    dog.sleep()</span><br><span class="line"></span><br><span class="line">    cat.eat()</span><br><span class="line">    cat.sleep()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang模拟OOP的属性和方法"><a href="#golang模拟OOP的属性和方法" class="headerlink" title="golang模拟OOP的属性和方法"></a>golang模拟OOP的属性和方法</h1><p>golang没有面向对象的概念，也没有封装的概念，但是可以通过结构体<code>struct</code>和函数<strong>绑定</strong>来实现OOP的属性和方法等特性。接收者<br>receiver <strong>方法</strong>。</p><p><strong>例如</strong>，想要定义一个Person类，有name和age属性，有eat&#x2F;sleep&#x2F;work方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sleep...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> work() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;work...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    per := Person&#123;</span><br><span class="line">        name: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">        age:  <span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line"></span><br><span class="line">    per.eat()</span><br><span class="line">    per.sleep()</span><br><span class="line">    per.work()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang构造函数"><a href="#golang构造函数" class="headerlink" title="golang构造函数"></a>golang构造函数</h1><p>golang没有构造函数的概念，可以使用函数来模拟构造函数的的功能。</p><p><strong>例如</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span> <span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> (*Person, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;name 不能为空&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;age 不能小于0&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;Person&#123;name: name, age: age&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person, err := NewPerson(<span class="string">&quot;tom&quot;</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, *person)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang包"><a href="#golang包" class="headerlink" title="golang包"></a>golang包</h1><p>包可以区分命令空间（一个文件夹中不能有两个同名文件），也可以更好的管理项目。go中创建一个包，一般是创建一个文件夹，在该文件夹里面的go文件中，使用package关键字声明包名称，通常，文件夹名称和包名称相同。并且，同一个文件下面只有一个包</p><h2 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h2><ol><li><p>创建一个名为dao的文件夹。</p></li><li><p>创建一个dao.go文件。</p></li><li><p>在该文件中声明包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test1</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;test package&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><p>要使用某个包下面的变量或者方法，需要导入该包，导入包时，要导入从<code>GOPATH</code>开始的包路径，例如，在<code>service.go</code>中导入<code>dao</code>包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;dao&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dao.Test1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包注意事项"><a href="#包注意事项" class="headerlink" title="包注意事项"></a>包注意事项</h2><ul><li>一个文件夹下只能有一个package<ul><li><code>import</code>后面的其实是<code>GOPATH</code>开始的相对目录路径，包括最后一段。但由于一个目录下只能有一个package，所以<code>import</code>一个路径就等于是<code>import</code>了这个路径下的包。</li><li>注意，这里指的是”直接包含”的go文件。如果有子目录，那么子目录的父目录是完全两个包。</li></ul></li><li>比如你实现了一个计算器package，名叫<code>calc</code>，位于<code>calc</code>目录下；但又想给别人一个使用范例，于是在calc下可以建个example子目录（calc&#x2F;example&#x2F;），这个子目录里有个example.go（calc&#x2F;example&#x2F;example.go）。此时，example.go可以是main包，里面还可以有个main函数。</li><li>一个package的文件不能在多个文件夹下<ul><li>如果多个文件夹下有重名的package，它们其实是彼此无关的package。</li><li>如果一个go文件需要同时使用不同目录下的同名package，需要在<code>import</code>这些目录时为每个目录指定一个package的别名。</li></ul></li></ul><h1 id="golang-包管理工具go-module"><a href="#golang-包管理工具go-module" class="headerlink" title="golang 包管理工具go module"></a>golang 包管理工具go module</h1><h2 id="go-module简介"><a href="#go-module简介" class="headerlink" title="go module简介"></a>go module简介</h2><p>go modules 是 golang 1.11 新加的特性，用来管理模块中<strong>包的依赖关系</strong>。</p><h2 id="go-mod-使用方法"><a href="#go-mod-使用方法" class="headerlink" title="go mod 使用方法"></a>go mod 使用方法</h2><ul><li>初始化模块 <code>go mod init &lt;项目模块名称&gt;</code></li><li>依赖关系处理 ,根据go.mod文件 <code>go mod tidy</code></li><li>将依赖包复制到项目下的 vendor目录。 <code>go mod vendor</code><br><strong>如果包被屏蔽(墙),可以使用这个命令，随后使用go build<br>-mod&#x3D;vendor编译</strong></li><li>显示依赖关系 <code>go list -m all</code></li><li>显示详细依赖关系 <code>go list -m -json all</code></li><li>下载依赖 <code>go mod download [path@version]</code><br><strong>[path@version]是非必写的</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;golang标识符、关键字、命名规则&quot;&gt;&lt;a href=&quot;#golang标识符、关键字、命名规则&quot; class=&quot;headerlink&quot; title=&quot;golang标识符、关键字、命名规则&quot;&gt;&lt;/a&gt;golang标识符、关键字、命名规则&lt;/h1&gt;&lt;h2 id=&quot;标</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://ryanchou612.github.io/tags/Golang/"/>
    
  </entry>
  
</feed>
