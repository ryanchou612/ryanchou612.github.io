<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RyanChouBlog</title>
  
  
  <link href="https://ryanchou612.github.io/atom.xml" rel="self"/>
  
  <link href="https://ryanchou612.github.io/"/>
  <updated>2023-07-14T14:36:16.287Z</updated>
  <id>https://ryanchou612.github.io/</id>
  
  <author>
    <name>RyanChou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang基础语法</title>
    <link href="https://ryanchou612.github.io/posts/3e97faf3.html"/>
    <id>https://ryanchou612.github.io/posts/3e97faf3.html</id>
    <published>2023-07-14T13:56:22.340Z</published>
    <updated>2023-07-14T14:36:16.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang标识符、关键字、命名规则"><a href="#golang标识符、关键字、命名规则" class="headerlink" title="golang标识符、关键字、命名规则"></a>golang标识符、关键字、命名规则</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符的英文是<code>identifier</code>，通俗的讲，就是给变量、常量、函数、方法、结构体、数组、切片、接口起名字。</p><h3 id="标识符的组成"><a href="#标识符的组成" class="headerlink" title="标识符的组成"></a>标识符的组成</h3><ol><li>标识符由数字、字母和下划线(<code>_</code>)组成。123 abc _</li><li>只能以字母和下划线(<code>_</code>)<strong>开头</strong>。abc123 _sysVar 123abc</li><li>标识符区分大小写。 name Name NAME</li></ol><h3 id="举例说明标识符的命名"><a href="#举例说明标识符的命名" class="headerlink" title="举例说明标识符的命名"></a>举例说明标识符的命名</h3><p>正确的命名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">  <span class="keyword">var</span> age<span class="type">int</span></span><br><span class="line">  <span class="keyword">var</span> _sys <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误的标识符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="number">1</span>name <span class="type">string</span></span><br><span class="line">  <span class="keyword">var</span> &amp;age<span class="type">int</span></span><br><span class="line">  <span class="keyword">var</span> !email</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go语言关键字"><a href="#go语言关键字" class="headerlink" title="go语言关键字"></a>go语言关键字</h3><hr><p>go语言提供了25个关键字，如下所示</p><table><thead><tr><th>braek</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符，其中包含了基本类型的名称和一些基本的内置函数，见下表：</p><table><thead><tr><th align="left">append</th><th align="left">bool</th><th align="left">byte</th><th align="left">cap</th><th align="left">close</th><th align="left">complex</th><th align="left">complex64</th><th align="left">complex128</th><th align="left">uint16</th></tr></thead><tbody><tr><td align="left">copy</td><td align="left">false</td><td align="left">float32</td><td align="left">float64</td><td align="left">imag</td><td align="left">int</td><td align="left">int8</td><td align="left">int16</td><td align="left">uint32</td></tr><tr><td align="left">int32</td><td align="left">int64</td><td align="left">iota</td><td align="left">len</td><td align="left">make</td><td align="left">new</td><td align="left">nil</td><td align="left">panic</td><td align="left">uint64</td></tr><tr><td align="left">print</td><td align="left">println</td><td align="left">real</td><td align="left">recover</td><td align="left">string</td><td align="left">true</td><td align="left">uint</td><td align="left">uint8</td><td align="left">uintptr</td></tr></tbody></table><h2 id="go语言命名规范"><a href="#go语言命名规范" class="headerlink" title="go语言命名规范"></a>go语言命名规范</h2><h5 id="Go是一门区分大小写的语言"><a href="#Go是一门区分大小写的语言" class="headerlink" title="Go是一门区分大小写的语言"></a>Go是一门区分大小写的语言</h5><p>命名规则涉及变量、常量、全局函数、结构、接口、方法等的命名。 Go语言从语法层面进行了以下限定：任何需要对外暴露的名字必须以大写字母开头，不需要对外暴露的则应该以小写字母开头。</p><p>当命名（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：<code>GetUserName</code>，那么使用这种形式的标识符的对象就<strong>可以被外部包的代码所使用</strong>（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 <code>public</code>）； <strong>命名如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的</strong>（像面向对象语言中的 <code>private</code> ）</p><h3 id="包名称"><a href="#包名称" class="headerlink" title="包名称"></a>包名称</h3><p>保持<code>package</code>的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，尽量和标准库不要冲突。包名应该为<strong>小写</strong>单词，不要使用下划线或者混合大小写。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"><span class="keyword">package</span> service</span><br></pre></td></tr></table></figure><h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>尽量采取有意义的文件名，简短，有意义，应该为<strong>小写</strong>单词，使用<strong>下划线</strong>分隔各个单词。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customer_dao.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><h3 id="结构体命名"><a href="#结构体命名" class="headerlink" title="结构体命名"></a>结构体命名</h3><p>采用<strong>驼峰命名法</strong>，首字母根据访问控制大写或者小写</p><p><code>struct</code> 申明和初始化格式采用多行，例如下面：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CustomerOrder <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> </span><br><span class="line">    Address <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">order := CustomerOrder&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;北京海淀&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="接口命名"><a href="#接口命名" class="headerlink" title="接口命名"></a>接口命名</h3><p>命名规则基本和上面的结构体类型</p><p>单个函数的结构名以 <strong>“er”</strong> 作为后缀，例如 <code>Reader</code> , <code>Writer</code> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">     Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>和结构体类似，变量名称一般遵循<strong>驼峰法</strong>，首字母根据访问控制原则大写或者小写，但遇到特有名词时，需要遵循以下规则：</p><p>如果变量为私有，且特有名词为首个单词，则使用小写，如 appService 若变量类型为 bool 类型，则名称应以 Has, Is, Can 或 Allow 开头</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isExist <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> hasConflict <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> canManage <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> allowGitHook <span class="type">bool</span></span><br></pre></td></tr></table></figure><h3 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h3><p>常量均需使用全部<strong>大写</strong>字母组成，并使用<strong>下划线分词</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> APP_URL = <span class="string">&quot;https://www.duoke360.com&quot;</span></span><br></pre></td></tr></table></figure><p>如果是枚举类型的常量，需要先创建相应类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scheme <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    HTTP  Scheme = <span class="string">&quot;http&quot;</span></span><br><span class="line">    HTTPS Scheme = <span class="string">&quot;https&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>错误处理的原则就是不能丢弃任何有返回err的调用，不要使用 _ 丢弃，必须全部处理。接收到错误，要么返回err，或者使用log记录下来尽早return：一旦有错误发生，马上返回，尽量不要使用panic，除非你知道你在做什么，错误描述如果是英文必须为小写，不需要标点结尾，采用独立的错误流进行处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 正常代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// 或者继续</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正常代码</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元测试文件名命名规范为 <code>example_test.go</code> 测试用例的函数名称必须以 <code>Test</code> 开头，例如：<code>TestExample</code> 每个重要的函数都要首先编写测试用例，测试用例和正规代码一起提交方便进行回归测试 。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量是计算机语言中能<strong>储存</strong>计算结果或能表示值的抽象概念。不同的变量保存的<strong>数据类型</strong>可能会不一样。</p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。<br>并且Go语言的变量声明后<strong>必须使用</strong>。</p><p><strong>声明变量的语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier <span class="keyword">type</span></span><br></pre></td></tr></table></figure><p><code>var</code>：声明变量关键字</p><p><code>identifier</code>：变量名称</p><p><code>type</code>：变量类型</p><p><strong>例如</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">    <span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> ok <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量声明"><a href="#批量声明" class="headerlink" title="批量声明"></a>批量声明</h3><p>使用一个<code>var</code>关键字，把一些变量写在一个括号<code>()</code>里</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">        age  <span class="type">int</span></span><br><span class="line">        ok   <span class="type">bool</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h2><p>Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如：<br>整型和浮点型变量的默认值为<code>0</code>。 字符串变量的默认值为空字符串<code>“”</code>。<br>布尔型变量默认为<code>false</code>。 切片、函数、指针变量的默认为<code>nil</code>。</p><p><strong>变量初始化语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure><p><strong>例如</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    <span class="keyword">var</span> site <span class="type">string</span> = <span class="string">&quot;ryanchou612.github.io&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age <span class="type">int</span> = <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类型推导</strong></p><p>我们在声明变量时，可以根据初始化值进行类型推导，从而省略类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    <span class="keyword">var</span> site = <span class="string">&quot;ryanchou612.github.io&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化多个变量</strong></p><p>可以一次初始化多个变量，中间用逗号分隔。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name, site, age = <span class="string">&quot;RyanChou&quot;</span>, <span class="string">&quot;ryanchou612.github.io&quot;</span>, <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h2><p>在<strong>函数内部</strong>，可以使用 <code>:=</code>运算符对变量进行声明和初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    site := <span class="string">&quot;ryanchou612.github.io&quot;</span></span><br><span class="line">    age := <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这种方法只适合在函数内部，函数外面不能使用。</p></blockquote><h2 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h2><p>如果我们接收到多个变量，有一些变量使用不到，可以使用下划线<code>_</code>表示变量名称，这种变量叫做匿名变量。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNameAndAge</span><span class="params">()</span></span> (<span class="type">string</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;RyanChou&quot;</span>, <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name, _ := getNameAndAge()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量，就是在程序<strong>编译阶段</strong>就确定下来的值，而程序在<strong>运行时</strong>则无法改变该值。在Go程序中，常量可以是数值类型（包括整型、浮点型和复数类型）、布尔类型、字符串类型等。</p><h2 id="定义常量的语法"><a href="#定义常量的语法" class="headerlink" title="定义常量的语法"></a>定义常量的语法</h2><p>定义一个常量使用<code>const</code>关键字，语法格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> constantName [<span class="keyword">type</span>]= value</span><br></pre></td></tr></table></figure><p><code>const</code>：定义常量关键字</p><p><code>constantName</code>：常量名称</p><p><code>type</code>：常量类型</p><p><code>value</code>：常量的值</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> PI <span class="type">float64</span> = <span class="number">3.14</span></span><br><span class="line">    <span class="keyword">const</span> PI2 = <span class="number">3.1415</span> <span class="comment">// 可以省略类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        width  = <span class="number">100</span></span><br><span class="line">        height = <span class="number">200</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> i, j = <span class="number">1</span>, <span class="number">2</span> <span class="comment">// 多重赋值</span></span><br><span class="line">    <span class="keyword">const</span> a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;foo&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>const</code>同时声明多个常量时，如果省略了值则表示和上面一行的值相同</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a1 = <span class="number">100</span></span><br><span class="line">        a2</span><br><span class="line">        a3</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a2: %v\n&quot;</span>, a2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a3: %v\n&quot;</span>, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 100a2: 100a3: 100</code></pre><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a><code>iota</code></h2><p>iota<br>比较特殊，可以被认为是一个可被编译器修改的常量，它默认开始值是<code>0</code>，每调用一次加<code>1</code>。遇到<br><code>const</code> 关键字时被重置为 <code>0</code>。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a1 = <span class="literal">iota</span></span><br><span class="line">        a2 = <span class="literal">iota</span></span><br><span class="line">        a3 = <span class="literal">iota</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a2: %v\n&quot;</span>, a2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a3: %v\n&quot;</span>, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 0a2: 1a3: 2</code></pre><p><strong>使用<code>_</code>跳过某些值</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a1 = <span class="literal">iota</span></span><br><span class="line">        _</span><br><span class="line">        a2 = <span class="literal">iota</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a2: %v\n&quot;</span>, a2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 0a2: 2</code></pre><p><strong><code>iota</code>声明中间插队</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a1 = <span class="literal">iota</span></span><br><span class="line">        a2 = <span class="number">100</span></span><br><span class="line">        a3 = <span class="literal">iota</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a2: %v\n&quot;</span>, a2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a3: %v\n&quot;</span>, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 0a2: 100a3: 2</code></pre><h1 id="go语言数据类型"><a href="#go语言数据类型" class="headerlink" title="go语言数据类型"></a>go语言数据类型</h1><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p><p>数据类型的出现是为了把数据分成所需<strong>内存大小</strong>不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p><p>Go 语言按类别有以下几种数据类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool &#x3D; true。</td></tr><tr><td align="left">2</td><td align="left"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td align="left">3</td><td align="left"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td align="left">4</td><td align="left"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型(c) 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td></tr></tbody></table><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>uint8</strong> 无符号 8 位整型 (0 到 255)</td></tr><tr><td align="left">2</td><td align="left"><strong>uint16</strong> 无符号 16 位整型 (0 到 65535)</td></tr><tr><td align="left">3</td><td align="left"><strong>uint32</strong> 无符号 32 位整型 (0 到 4294967295)</td></tr><tr><td align="left">4</td><td align="left"><strong>uint64</strong> 无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td align="left">5</td><td align="left"><strong>int8</strong> 有符号 8 位整型 (-128 到 127)</td></tr><tr><td align="left">6</td><td align="left"><strong>int16</strong> 有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td align="left">7</td><td align="left"><strong>int32</strong> 有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td align="left">8</td><td align="left"><strong>int64</strong> 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>float32</strong> IEEE-754 32位浮点型数</td></tr><tr><td align="left">2</td><td align="left"><strong>float64</strong> IEEE-754 64位浮点型数</td></tr><tr><td align="left">3</td><td align="left"><strong>complex64</strong> 32 位实数和虚数</td></tr><tr><td align="left">4</td><td align="left"><strong>complex128</strong> 64 位实数和虚数</td></tr></tbody></table><h2 id="其他数字类型"><a href="#其他数字类型" class="headerlink" title="其他数字类型"></a>其他数字类型</h2><p>以下列出了其他更多的数字类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>byte</strong> 类似 uint8</td></tr><tr><td align="left">2</td><td align="left"><strong>rune</strong> 类似 int32</td></tr><tr><td align="left">3</td><td align="left"><strong>uint</strong> 32 或 64 位</td></tr><tr><td align="left">4</td><td align="left"><strong>int</strong> 与 uint 一样大小</td></tr><tr><td align="left">5</td><td align="left"><strong>uintptr</strong> 无符号整型，用于存放一个指针</td></tr></tbody></table><h1 id="go语言布尔类型"><a href="#go语言布尔类型" class="headerlink" title="go语言布尔类型"></a>go语言布尔类型</h1><p>go语言中的布尔类型有两个常量值：<code>true</code>和<code>false</code>。布尔类型经常用在<strong>条件判断</strong>语句，或者<strong>循环语句</strong>。也可以用在<strong>逻辑表达式</strong>中。</p><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b1 <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> b2 <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> b3 = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> b4 = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    b5 := <span class="literal">true</span></span><br><span class="line">    b6 := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;b1: %v\n&quot;</span>, b1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b2: %v\n&quot;</span>, b2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b3: %v\n&quot;</span>, b3)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b4: %v\n&quot;</span>, b4)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b5: %v\n&quot;</span>, b5)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b6: %v\n&quot;</span>, b6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>b1: trueb2: falseb3: trueb4: falseb5: trueb6: false</code></pre><h2 id="用在条件判断中"><a href="#用在条件判断中" class="headerlink" title="用在条件判断中"></a>用在条件判断中</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    age := <span class="number">18</span></span><br><span class="line">    ok := age &gt;= <span class="number">18</span></span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你已经成年&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你还未成年&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>你已经成年</code></pre><h2 id="用在循环语句中"><a href="#用在循环语句中" class="headerlink" title="用在循环语句中"></a>用在循环语句中</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    count := <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; count; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用在逻辑表达式中"><a href="#用在逻辑表达式中" class="headerlink" title="用在逻辑表达式中"></a>用在逻辑表达式中</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    age := <span class="number">18</span></span><br><span class="line">    gender := <span class="string">&quot;男&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> age &gt;= <span class="number">18</span> &amp;&amp; gender == <span class="string">&quot;男&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年男子&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：不能使用<code>0</code>和非<code>0</code>表示真假</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &#123;</span><br><span class="line">        <span class="comment">// 编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="go语言数字类型"><a href="#go语言数字类型" class="headerlink" title="go语言数字类型"></a>go语言数字类型</h1><p>Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码。</p><p>Go 也有基于架构的类型，例如：<code>int</code>、<code>uint</code> 和 <code>uintptr</code>。</p><p>这些类型的长度都是根据运行程序所在的操作系统类型所决定的：</p><ul><li><code>int</code> 和 <code>uint</code> 在 32 位操作系统上，它们均使用 32 位（4 个字节），在<br>64 位操作系统上，它们均使用 64 位（8 个字节）。</li><li><code>uintptr</code> 的长度被设定为足够存放一个指针即可。</li></ul><p>Go 语言中没有 <code>float</code> 类型。（Go语言中只有 <code>float32</code> 和<br><code>float64</code>）没有double类型。</p><p>与操作系统架构无关的类型都有固定的大小，并在类型的名称中就可以看出来：</p><p>整数：</p><ul><li>int8（-128 -&gt; 127）</li><li>int16（-32768 -&gt; 32767）</li><li>int32（-2,147,483,648 -&gt; 2,147,483,647）</li><li>int64（-9,223,372,036,854,775,808 -&gt; 9,223,372,036,854,775,807）</li></ul><p>无符号整数：</p><ul><li>uint8（0 -&gt; 255）</li><li>uint16（0 -&gt; 65,535）</li><li>uint32（0 -&gt; 4,294,967,295）</li><li>uint64（0 -&gt; 18,446,744,073,709,551,615）</li></ul><p>浮点型（IEEE-754 标准）：</p><ul><li>float32（+- 1e-45 -&gt; +- 3.4 * 1e38）</li><li>float64（+- 5 * 1e-324 -&gt; 107 * 1e308）</li></ul><p>int 型是计算最快的一种类型。</p><p>整型的零值为 0，浮点型的零值为 0.0。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面实例演示了，各个数字类型的长度和取值范围</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i8 <span class="type">int8</span></span><br><span class="line">    <span class="keyword">var</span> i16 <span class="type">int16</span></span><br><span class="line">    <span class="keyword">var</span> i32 <span class="type">int32</span></span><br><span class="line">    <span class="keyword">var</span> i64 <span class="type">int64</span></span><br><span class="line">    <span class="keyword">var</span> ui8 <span class="type">uint8</span></span><br><span class="line">    <span class="keyword">var</span> ui16 <span class="type">uint16</span></span><br><span class="line">    <span class="keyword">var</span> ui32 <span class="type">uint32</span></span><br><span class="line">    <span class="keyword">var</span> ui64 <span class="type">uint64</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, i8, unsafe.Sizeof(i8), math.MinInt8, math.MaxInt8)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, i16, unsafe.Sizeof(i16), math.MinInt16, math.MaxInt16)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, i32, unsafe.Sizeof(i32), math.MinInt32, math.MaxInt32)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, i64, unsafe.Sizeof(i64), math.MinInt64, math.MaxInt64)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui8, unsafe.Sizeof(ui8), <span class="number">0</span>, math.MaxUint8)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui16, unsafe.Sizeof(ui16), <span class="number">0</span>, math.MaxUint16)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui32, unsafe.Sizeof(ui32), <span class="number">0</span>, math.MaxUint32)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui64, unsafe.Sizeof(ui64), <span class="number">0</span>, <span class="type">uint64</span>(math.MaxUint64))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> f32 <span class="type">float32</span></span><br><span class="line">    <span class="keyword">var</span> f64 <span class="type">float64</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, f32, unsafe.Sizeof(f32), -math.MaxFloat32, math.MaxFloat32)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, f64, unsafe.Sizeof(f64), -math.MaxFloat64, math.MaxFloat64)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ui <span class="type">uint</span></span><br><span class="line">    ui = <span class="type">uint</span>(math.MaxUint64) <span class="comment">//再+1会导致overflows错误</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, ui, unsafe.Sizeof(ui), <span class="number">0</span>, ui)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> imax, imin <span class="type">int</span></span><br><span class="line">    imax = <span class="type">int</span>(math.MaxInt64) <span class="comment">//再+1会导致overflows错误</span></span><br><span class="line">    imin = <span class="type">int</span>(math.MinInt64) <span class="comment">//再-1会导致overflows错误</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %dB %v~%v\n&quot;</span>, imax, unsafe.Sizeof(imax), imin, imax)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>int8 1B -128~127int16 2B -32768~32767int32 4B -2147483648~2147483647int64 8B -9223372036854775808~9223372036854775807uint8 1B 0~255uint16 2B 0~65535uint32 4B 0~4294967295uint64 8B 0~18446744073709551615float32 4B -3.4028234663852886e+38~3.4028234663852886e+38float64 8B -1.7976931348623157e+308~1.7976931348623157e+308uint 8B 0~18446744073709551615int 8B -9223372036854775808~9223372036854775807</code></pre><h2 id="以二进制、八进制或十六进制浮点数的格式定义数字"><a href="#以二进制、八进制或十六进制浮点数的格式定义数字" class="headerlink" title="以二进制、八进制或十六进制浮点数的格式定义数字"></a>以二进制、八进制或十六进制浮点数的格式定义数字</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 十进制</span></span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d \n&quot;</span>, a) <span class="comment">// 10</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b \n&quot;</span>, a) <span class="comment">// 1010  占位符%b表示二进制</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 八进制  以0开头</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">077</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%o \n&quot;</span>, b) <span class="comment">// 77</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 十六进制  以0x开头</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">int</span> = <span class="number">0xff</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%x \n&quot;</span>, c) <span class="comment">// ff</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%X \n&quot;</span>, c) <span class="comment">// FF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>10 1010 77 ff FF </code></pre><h2 id="浮点型-1"><a href="#浮点型-1" class="headerlink" title="浮点型"></a>浮点型</h2><p>Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。这两种浮点型数据格式遵循<code>IEEE 754</code>标准：<br><code>float32</code> 的浮点数的最大范围约为<br><code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code>。 <code>float64</code><br>的浮点数的最大范围约为<br><code>1.8e308</code>，可以使用一个常量定义：<code>math.MaxFloat64</code>。</p><p>打印浮点数时，可以使用<code>fmt</code>包配合动词<code>%f</code>，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%f\n&quot;</span>, math.Pi)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%.2f\n&quot;</span>, math.Pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>complex64和complex128</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c1 <span class="type">complex64</span></span><br><span class="line">c1 = <span class="number">1</span> + <span class="number">2i</span></span><br><span class="line"><span class="keyword">var</span> c2 <span class="type">complex128</span></span><br><span class="line">c2 = <span class="number">2</span> + <span class="number">3i</span></span><br><span class="line">fmt.Println(c1)</span><br><span class="line">fmt.Println(c2)</span><br></pre></td></tr></table></figure><p>复数有实部和虚部，complex64的实部和虚部为32位，complex128的实部和虚部为64位。</p><h1 id="golang字符串"><a href="#golang字符串" class="headerlink" title="golang字符串"></a>golang字符串</h1><p>一个Go语言字符串是一个任意<strong>字节的常量序列</strong>。[] byte</p><h2 id="go语言字符串字面量"><a href="#go语言字符串字面量" class="headerlink" title="go语言字符串字面量"></a>go语言字符串字面量</h2><p>在Go语言中，字符串字面量使用双引号 <code>&quot;&quot;</code> 或者反引号 <code>&#39;</code><br>来创建。双引号用来创建可解析的字符串，支持转义，但不能用来引用多行；反引号用来创建原生的字符串字面量，可能由多行组成，但不支持转义，并且可以包含除了反引号外其他所有字符。双引号创建可解析的字符串应用最广泛，反引号用来创建原生的字符串则多用于书写多行消息，HTML以及正则表达式。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str1 <span class="type">string</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    <span class="keyword">var</span> html <span class="type">string</span> = </span><br><span class="line">        &lt;html&gt;</span><br><span class="line">            &lt;head&gt;&lt;title&gt;hello golang&lt;/title&gt;</span><br><span class="line">        &lt;/html&gt;</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    fmt.Printf(&quot;str1: %v\n&quot;, str1)</span></span><br><span class="line"><span class="string">    fmt.Printf(&quot;html: %v\n&quot;, html)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1: hello world</span><br><span class="line">html: </span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;hello golang&lt;/title&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="go语言字符串连接"><a href="#go语言字符串连接" class="headerlink" title="go语言字符串连接"></a>go语言字符串连接</h2><p><strong>使用加号</strong></p><p>虽然Go语言中的字符串是不可变的，但是字符串支持 <code>+</code><br>级联操作和<code>+=</code>追加操作，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">    age := <span class="string">&quot;20&quot;</span></span><br><span class="line">    msg := name + <span class="string">&quot; &quot;</span> + age</span><br><span class="line">    fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">    fmt.Println(<span class="string">&quot;-------------&quot;</span>)</span><br><span class="line">    msg = <span class="string">&quot;&quot;</span></span><br><span class="line">    msg += name</span><br><span class="line">    msg += <span class="string">&quot; &quot;</span></span><br><span class="line">    msg += age</span><br><span class="line">    fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>golang<br>里面的字符串都是不可变的，每次运算都会产生一个新的字符串，所以会产生很多临时的无用的字符串，不仅没有用，还会给<br>gc 带来额外的负担，所以性能比较差</p></blockquote><p><strong>使用<code>fmt.Sprintf()</code>函数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">    age := <span class="string">&quot;20&quot;</span></span><br><span class="line">    msg := fmt.Sprintf(<span class="string">&quot;%s,%s&quot;</span>, name, age)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msg: tom,<span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>内部使用 <code>[]byte</code><br>实现，不像直接运算符这种会产生很多临时的字符串，但是内部的逻辑比较复杂，有很多额外的判断，还用到了<br><code>interface</code>，所以性能也不是很好</p></blockquote><p><strong><code>strings.Join()</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;tom&quot;</span></span><br><span class="line">    age := <span class="string">&quot;20&quot;</span></span><br><span class="line">    msg := strings.Join([]<span class="type">string</span>&#123;name, age&#125;, <span class="string">&quot;,&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>msg: tom,20</code></pre><blockquote><p>join会先根据字符串数组的内容，计算出一个拼接之后的长度，然后申请对应大小的内存，一个一个字符串填入，在已有一个数组的情况下，这种效率会很高，但是本来没有，去构造这个数据的代价也不小</p></blockquote><p><strong><code>buffer.WriteString()</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">    buffer.WriteString(<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">    buffer.WriteString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    buffer.WriteString(<span class="string">&quot;20&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;buffer.String(): %v\n&quot;</span>, buffer.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个比较理想，可以当成可变字符使用，对内存的增长也有优化，如果能预估字符串的长度，还可以用<br><code>buffer.Grow()</code> 接口来设置 capacity</p></blockquote><h2 id="go语言字符串转义字符"><a href="#go语言字符串转义字符" class="headerlink" title="go语言字符串转义字符"></a>go语言字符串转义字符</h2><p>Go<br>语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p><p>  转义符   含义</p><hr><p>  <code>\r</code>     回车符（返回行首）<br>  <code>\n</code>     换行符（直接跳到下一行的同列位置）<br>  <code>\t</code>     制表符<br>  <code>\&#39;</code>     单引号<br>  <code>\&quot;</code>     双引号<br>  <code>\\</code>     反斜杠</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Print(<span class="string">&quot;hello\tworld\n&quot;</span>)</span><br><span class="line">    fmt.Print(<span class="string">&quot;\&quot;c:\\test\\\&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>hello   world&quot;c:\test\&quot;</code></pre><h2 id="go语言字符串切片操作"><a href="#go语言字符串切片操作" class="headerlink" title="go语言字符串切片操作"></a>go语言字符串切片操作</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    n := <span class="number">3</span></span><br><span class="line">    m := <span class="number">5</span></span><br><span class="line">    fmt.Println(str[n])   <span class="comment">//获取字符串索引位置为n的原始字节</span></span><br><span class="line">    fmt.Println(str[n:m]) <span class="comment">//截取得字符串索引位置为 n 到 m-1 的字符串</span></span><br><span class="line">    fmt.Println(str[n:])  <span class="comment">//截取得字符串索引位置为 n 到 len(s)-1 的字符串</span></span><br><span class="line">    fmt.Println(str[:m])  <span class="comment">//截取得字符串索引位置为 0 到 m-1 的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>108lolo worldhello</code></pre><h2 id="go语言字符串常用方法"><a href="#go语言字符串常用方法" class="headerlink" title="go语言字符串常用方法"></a>go语言字符串常用方法</h2><p>  方法                                    介绍</p><hr><p>  len(str)                                求长度<br>  +或fmt.Sprintf                          拼接字符串<br>  strings.Split                           分割<br>  strings.contains                        判断是否包含<br>  strings.HasPrefix,strings.HasSuffix     前缀&#x2F;后缀判断<br>  strings.Index(),strings.LastIndex()     子串出现的位置<br>  strings.Join(a[]string, sep string)   join操作</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := <span class="string">&quot;hello world！&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;len(s): %v\n&quot;</span>, <span class="built_in">len</span>(s))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.Split(s, \&quot;\&quot;): %v\n&quot;</span>, strings.Split(s, <span class="string">&quot; &quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.Contains(s, \&quot;hello\&quot;): %v\n&quot;</span>, strings.Contains(s, <span class="string">&quot;hello&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.HasPrefix(s, \&quot;hello\&quot;): %v\n&quot;</span>, strings.HasPrefix(s, <span class="string">&quot;hello&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.HasSuffix(s, \&quot;world！\&quot;): %v\n&quot;</span>, strings.HasSuffix(s, <span class="string">&quot;world！&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.Index(s, \&quot;l\&quot;): %v\n&quot;</span>, strings.Index(s, <span class="string">&quot;l&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;strings.LastIndex(s, \&quot;l\&quot;): %v\n&quot;</span>, strings.LastIndex(s, <span class="string">&quot;l&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>len(s): 14strings.Split(s, &quot;&quot;): [hello world！]strings.Contains(s, &quot;hello&quot;): truestrings.HasPrefix(s, &quot;hello&quot;): truestrings.HasSuffix(s, &quot;world！&quot;): truestrings.Index(s, &quot;l&quot;): 2strings.LastIndex(s, &quot;l&quot;): 9</code></pre><h2 id="byte和rune类型"><a href="#byte和rune类型" class="headerlink" title="byte和rune类型"></a>byte和rune类型</h2><p>组成每个字符串的元素叫做”字符”，可以通过遍历或者单个获取字符串元素获得字符。<br>字符用单引号（’）包裹起来，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;华&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v,%c\n&quot;</span>, a, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v,%c\n&quot;</span>, b, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: 21326,华b: 97,a</code></pre><p>Go 语言的字符有以下两种：</p><ol><li><code>uint8</code>类型，或者叫 byte 型，代表了<code>ASCII码</code>的一个字符。</li><li><code>rune</code>类型，代表一个 <code>UTF-8字符</code>。</li></ol><p>当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。</p><p>Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode<br>的文本处理更为方便，也可以使用 byte<br>型进行默认字符串处理，性能和扩展性都有照顾。</p><h1 id="golang格式化输出"><a href="#golang格式化输出" class="headerlink" title="golang格式化输出"></a>golang格式化输出</h1><p>下面实例使用到的结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Website <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义结构体变量</span></span><br><span class="line"><span class="keyword">var</span> site = Website&#123;Name:<span class="string">&quot;duoke360&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><p><strong>普通占位符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                      举例                                      输出</span><br><span class="line">%v      相应值的默认格式。                               Printf(<span class="string">&quot;%v&quot;</span>, site)，Printf(<span class="string">&quot;%+v&quot;</span>, site)  &#123;duoke360&#125;，&#123;Name:duoke360&#125;</span><br><span class="line">        在打印结构体时，“加号”标记（%+v）会添加字段名</span><br><span class="line">%#v     相应值的Go语法表示                          Printf(<span class="string">&quot;#v&quot;</span>, site)                      main.Website&#123;Name:<span class="string">&quot;duoke360&quot;</span>&#125;</span><br><span class="line">%T      相应值的类型的Go语法表示                       Printf(<span class="string">&quot;%T&quot;</span>, site)                      main.Website</span><br><span class="line">%%      字面上的百分号，并非值的占位符                 Printf(<span class="string">&quot;%%&quot;</span>)                            %</span><br></pre></td></tr></table></figure><p><strong>布尔占位符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                      举例                                      输出</span><br><span class="line">%t      单词 <span class="literal">true</span> 或 <span class="literal">false</span>。                            Printf(<span class="string">&quot;%t&quot;</span>, <span class="literal">true</span>)                      <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>整数占位符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                      举例                                  输出</span><br><span class="line">%b      二进制表示                                   Printf(<span class="string">&quot;%b&quot;</span>, <span class="number">5</span>)                     <span class="number">101</span></span><br><span class="line">%c      相应Unicode码点所表示的字符                   Printf(<span class="string">&quot;%c&quot;</span>, <span class="number">0x4E2D</span>)                中</span><br><span class="line">%d      十进制表示                                   Printf(<span class="string">&quot;%d&quot;</span>, <span class="number">0x12</span>)                  <span class="number">18</span></span><br><span class="line">%o      八进制表示                                   Printf(<span class="string">&quot;%o&quot;</span>, <span class="number">10</span>)                    <span class="number">12</span></span><br><span class="line">%q      单引号围绕的字符字面值，由Go语法安全地转义      Printf(<span class="string">&quot;%q&quot;</span>, <span class="number">0x4E2D</span>)                <span class="string">&#x27;中&#x27;</span></span><br><span class="line">%x      十六进制表示，字母形式为小写 a-f              Printf(<span class="string">&quot;%x&quot;</span>, <span class="number">13</span>)                    d</span><br><span class="line">%X      十六进制表示，字母形式为大写 A-F              Printf(<span class="string">&quot;%x&quot;</span>, <span class="number">13</span>)                    D</span><br><span class="line">%U      Unicode格式：U+<span class="number">1234</span>，等同于 <span class="string">&quot;U+%04X&quot;</span>           Printf(<span class="string">&quot;%U&quot;</span>, <span class="number">0x4E2D</span>)                U+<span class="number">4E2</span>D</span><br></pre></td></tr></table></figure><p><strong>浮点数和复数的组成部分（实部和虚部）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                                              举例                                  输出</span><br><span class="line">%b      无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat   </span><br><span class="line">        的 <span class="string">&#x27;b&#x27;</span> 转换格式一致。例如 <span class="number">-123456</span>p<span class="number">-78</span></span><br><span class="line">%e      科学计数法，例如 <span class="number">-1234.456e+78</span>                                  Printf(<span class="string">&quot;%e&quot;</span>, <span class="number">10.2</span>)                          <span class="number">1.020000e+01</span></span><br><span class="line">%E      科学计数法，例如 <span class="number">-1234.456E+78</span>                                  Printf(<span class="string">&quot;%e&quot;</span>, <span class="number">10.2</span>)                          <span class="number">1.020000E+01</span></span><br><span class="line">%f      有小数点而无指数，例如 <span class="number">123.456</span>                                 Printf(<span class="string">&quot;%f&quot;</span>, <span class="number">10.2</span>)                          <span class="number">10.200000</span></span><br><span class="line">%g      根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的<span class="number">0</span>）输出             Printf(<span class="string">&quot;%g&quot;</span>, <span class="number">10.20</span>)                         <span class="number">10.2</span></span><br><span class="line">%G      根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的<span class="number">0</span>）输出             Printf(<span class="string">&quot;%G&quot;</span>, <span class="number">10.20</span>+<span class="number">2i</span>)                      (<span class="number">10.2</span>+<span class="number">2i</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串与字节切片</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                                              举例                                  输出</span><br><span class="line">%s      输出字符串表示（<span class="type">string</span>类型或[]<span class="type">byte</span>)                            Printf(<span class="string">&quot;%s&quot;</span>, []<span class="type">byte</span>(<span class="string">&quot;多课网&quot;</span>))     多课网</span><br><span class="line">%q      双引号围绕的字符串，由Go语法安全地转义                            Printf(<span class="string">&quot;%q&quot;</span>, <span class="string">&quot;多课网&quot;</span>)             <span class="string">&quot;多课网&quot;</span></span><br><span class="line">%x      十六进制，小写字母，每字节两个字符                               Printf(<span class="string">&quot;%x&quot;</span>, <span class="string">&quot;golang&quot;</span>)                      <span class="number">676</span>f6c616e67</span><br><span class="line">%X      十六进制，大写字母，每字节两个字符                               Printf(<span class="string">&quot;%X&quot;</span>, <span class="string">&quot;golang&quot;</span>)                      <span class="number">676</span>F6C616E67</span><br></pre></td></tr></table></figure><p><strong>指针</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">占位符                     说明                                              举例                                  输出</span><br><span class="line">%p      十六进制表示，前缀 <span class="number">0</span>x                                            Printf(<span class="string">&quot;%p&quot;</span>, &amp;site)                         <span class="number">0x4f57f0</span></span><br></pre></td></tr></table></figure><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    u := user&#123;<span class="string">&quot;guo&quot;</span>&#125;</span><br><span class="line">    <span class="comment">//Printf 格式化输出</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;% + v\n&quot;</span>, u)     <span class="comment">//格式化输出结构</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)       <span class="comment">//输出值的 Go 语言表示方法</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, u)        <span class="comment">//输出值的类型的 Go 语言表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%t\n&quot;</span>, <span class="literal">true</span>)     <span class="comment">//输出值的 true 或 false</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b\n&quot;</span>, <span class="number">1024</span>)     <span class="comment">//二进制表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, <span class="number">11111111</span>) <span class="comment">//数值对应的 Unicode 编码字符</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">10</span>)       <span class="comment">//十进制表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%o\n&quot;</span>, <span class="number">8</span>)        <span class="comment">//八进制表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, <span class="number">22</span>)       <span class="comment">//转化为十六进制并附上单引号</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, <span class="number">1223</span>)     <span class="comment">//十六进制表示，用a-f表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%X\n&quot;</span>, <span class="number">1223</span>)     <span class="comment">//十六进制表示，用A-F表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%U\n&quot;</span>, <span class="number">1233</span>)     <span class="comment">//Unicode表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b\n&quot;</span>, <span class="number">12.34</span>)    <span class="comment">//无小数部分，两位指数的科学计数法6946802425218990p-49</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%e\n&quot;</span>, <span class="number">12.345</span>)   <span class="comment">//科学计数法，e表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%E\n&quot;</span>, <span class="number">12.34455</span>) <span class="comment">//科学计数法，E表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%f\n&quot;</span>, <span class="number">12.3456</span>)  <span class="comment">//有小数部分，无指数部分</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%g\n&quot;</span>, <span class="number">12.3456</span>)  <span class="comment">//根据实际情况采用%e或%f输出</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%G\n&quot;</span>, <span class="number">12.3456</span>)  <span class="comment">//根据实际情况采用%E或%f输出</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;wqdew&quot;</span>)  <span class="comment">//直接输出字符串或者[]byte</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, <span class="string">&quot;dedede&quot;</span>) <span class="comment">//双引号括起来的字符串</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, <span class="string">&quot;abczxc&quot;</span>) <span class="comment">//每个字节用两字节十六进制表示，a-f表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%X\n&quot;</span>, <span class="string">&quot;asdzxc&quot;</span>) <span class="comment">//每个字节用两字节十六进制表示，A-F表示</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, <span class="number">0x123</span>)    <span class="comment">//0x开头的十六进制数表示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang运算符"><a href="#golang运算符" class="headerlink" title="golang运算符"></a>golang运算符</h1><p>Go 语言内置的运算符有：</p><ol><li>算术运算符：arithmetic operators</li><li>关系运算符：relational operators</li><li>逻辑运算符：logical operators</li><li>位运算符：bitwise operators</li><li>赋值运算符：assignment operators</li></ol><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">相加</td></tr><tr><td align="left">-</td><td align="left">相减</td></tr><tr><td align="left">*</td><td align="left">相乘</td></tr><tr><td align="left">&#x2F;</td><td align="left">相除</td></tr><tr><td align="left">%</td><td align="left">求余</td></tr></tbody></table><p><strong>注意：</strong> <code>++</code>（自增）和<code>--</code>（自减）在Go语言中是单独的语句，并不是运算符。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">100</span></span><br><span class="line">b := <span class="number">10</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;(a + b): %v\n&quot;</span>, (a + b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a - b): %v\n&quot;</span>, (a - b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a * b): %v\n&quot;</span>, (a * b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a / b): %v\n&quot;</span>, (a / b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a %% b): %v\n&quot;</span>, (a % b))</span><br><span class="line"></span><br><span class="line">a++</span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">b--</span><br><span class="line">fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">检查两个值是否相等，如果相等返回 True 否则返回 False。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">b := <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &gt; b): %v\n&quot;</span>, (a &gt; b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &lt; b): %v\n&quot;</span>, (a &lt; b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &gt;= b): %v\n&quot;</span>, (a &gt;= b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &lt;= b): %v\n&quot;</span>, (a &lt;= b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a == b): %v\n&quot;</span>, (a == b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a != b): %v\n&quot;</span>, (a != b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False。</td></tr><tr><td align="left">||</td><td align="left">逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False。</td></tr><tr><td align="left">!</td><td align="left">逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True。</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="literal">true</span></span><br><span class="line">b := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &amp;&amp; b): %v\n&quot;</span>, (a &amp;&amp; b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a || b): %v\n&quot;</span>, (a || b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(!a): %v\n&quot;</span>, (!a))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(!b): %v\n&quot;</span>, (!b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符对整数在内存中的二进制位进行操作。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">参与运算的两数各对应的二进位相与。 （两位均为1才为1）</td></tr><tr><td align="left">|</td><td align="left">参与运算的两数各对应的二进位相或。 （两位有一个为1就为1）</td></tr><tr><td align="left">^</td><td align="left">参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 （两位不一样则为1）</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移n位就是乘以2的n次方。 “a&lt;&lt;b”是把a的各二进位全部左移b位，高位丢弃，低位补0。</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移n位就是除以2的n次方。 “a&gt;&gt;b”是把a的各二进位全部右移b位。</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">4</span> <span class="comment">// 二进制 100</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %b\n&quot;</span>, a)</span><br><span class="line">b := <span class="number">8</span> <span class="comment">// 二进制 1000</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;b: %b\n&quot;</span>, b)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &amp; b): %v, %b \n&quot;</span>, (a &amp; b), (a &amp; b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a | b): %v, %b\n&quot;</span>, (a | b), (a | b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a ^ b): %v, %b\n&quot;</span>, (a ^ b), (a ^ b))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(a &lt;&lt; 2): %v, %b\n&quot;</span>, (a &lt;&lt; <span class="number">2</span>), (a &lt;&lt; <span class="number">2</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;(b &gt;&gt; 2): %v, %b\n&quot;</span>, (b &gt;&gt; <span class="number">2</span>), (b &gt;&gt; <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符，将一个表达式的值赋给一个左值</td></tr><tr><td align="left">+&#x3D;</td><td align="left">相加后再赋值</td></tr><tr><td align="left">-&#x3D;</td><td align="left">相减后再赋值</td></tr><tr><td align="left">*&#x3D;</td><td align="left">相乘后再赋值</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">相除后再赋值</td></tr><tr><td align="left">%&#x3D;</td><td align="left">求余后再赋值</td></tr><tr><td align="left">&lt;&lt;&#x3D;</td><td align="left">左移后赋值</td></tr><tr><td align="left">&gt;&gt;&#x3D;</td><td align="left">右移后赋值</td></tr><tr><td align="left">&amp;&#x3D;</td><td align="left">按位与后赋值</td></tr><tr><td align="left">|&#x3D;</td><td align="left">按位或后赋值</td></tr><tr><td align="left">^&#x3D;</td><td align="left">按位异或后赋值</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">a += <span class="number">1</span> <span class="comment">// a = a + 1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">a -= <span class="number">1</span> <span class="comment">// a = a -1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">a *= <span class="number">2</span> <span class="comment">// a = a * 2</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">a /= <span class="number">2</span> <span class="comment">// a = a / 2</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="go语言中的流程控制"><a href="#go语言中的流程控制" class="headerlink" title="go语言中的流程控制"></a>go语言中的流程控制</h1><h2 id="go语言中的条件"><a href="#go语言中的条件" class="headerlink" title="go语言中的条件"></a>go语言中的条件</h2><p><strong>条件语句</strong>是用来判断给定的条件是否满足(表达式值是否为<code>true</code>或者<code>false</code>)，并根据判断的结果(真或假)决定执行的语句，go语言中的条件语句也是这样的。</p><h2 id="go语言中的条件语句包含如下几种情况"><a href="#go语言中的条件语句包含如下几种情况" class="headerlink" title="go语言中的条件语句包含如下几种情况"></a>go语言中的条件语句包含如下几种情况</h2><ol><li><strong>if 语句</strong>：<code>if</code> 语句 由一个布尔表达式后紧跟一个或多个语句组成。</li><li><strong>if…else 语句</strong>: <code>if</code> 语句 后可以使用可选的 <code>else</code> 语句, <code>else</code><br>语句中的表达式在布尔表达式为 <code>false</code> 时执行。</li><li><strong>if 嵌套语句</strong>: 你可以在 <code>if</code> 或 <code>else if</code> 语句中嵌入一个或多个<br><code>if</code> 或 <code>else if</code> 语句。</li><li><strong>switch 语句</strong>: <code>switch</code> 语句用于基于不同条件执行不同动作。</li><li><strong>select 语句</strong>: <code>select</code> 语句类似于 <code>switch</code><br>语句，但是<code>select</code>会随机执行一个可运行的<code>case</code>。如果没有<code>case</code>可运行，它将阻塞，直到有<code>case</code>可运行。</li></ol><h2 id="go语言中的循环语句"><a href="#go语言中的循环语句" class="headerlink" title="go语言中的循环语句"></a>go语言中的循环语句</h2><p>go语言中的循环只有for循环，去除了<code>while</code>、<code>do while</code>循环，使用起来更加简洁。</p><ol><li>for循环。</li><li>for range循环。</li></ol><h2 id="go语言中的流程控制关键字"><a href="#go语言中的流程控制关键字" class="headerlink" title="go语言中的流程控制关键字"></a>go语言中的流程控制关键字</h2><ol><li>break</li><li>continue</li><li>goto</li></ol><h1 id="golang中的if语句"><a href="#golang中的if语句" class="headerlink" title="golang中的if语句"></a>golang中的if语句</h1><p><strong>go语言</strong>中的<strong>if语句</strong>和其他语言中的类似，都是根据给定的条件表达式运算结果来，判断执行流程。</p><h2 id="go语言if语句语法"><a href="#go语言if语句语法" class="headerlink" title="go语言if语句语法"></a>go语言if语句语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在go语言中 布尔表达式不用使用括号。</p></blockquote><h2 id="go语言if语句实例演示"><a href="#go语言if语句实例演示" class="headerlink" title="go语言if语句实例演示"></a>go语言if语句实例演示</h2><p><strong>根据布尔值flag判断</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> flag &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;flag is true&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag is <span class="literal">true</span></span><br><span class="line">程序运行结束</span><br></pre></td></tr></table></figure><p><strong>根据年龄判断是否成年</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">20</span></span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你是成年人</span><br><span class="line">程序运行结束</span><br></pre></td></tr></table></figure><blockquote><p><strong>初始变量可以声明在布尔表达式里面，注意它的作用域</strong></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> age := <span class="number">20</span>; age &gt; <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// test1()</span></span><br><span class="line">    <span class="comment">// test2()</span></span><br><span class="line">    test3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果</p><pre><code>你是成年人程序运行结束</code></pre><blockquote><p><strong>注意：不能使用0或非0表示真假</strong></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test4</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &#123; <span class="comment">// 编译失败</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;here&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;程序运行结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>go语言if语句使用提示：</strong></p><ol><li>不需使用括号将<strong>条件包含起来</strong></li><li>大括号<code>&#123;&#125;</code>必须存在，即使只有一行语句</li><li>左括号必须在<code>if</code>或<code>else</code>的同一行</li><li>在<code>if</code>之后，条件语句之前，可以添加变量初始化语句，使用<code>；</code>进行分隔</li></ol><h1 id="golang中的if-else语句"><a href="#golang中的if-else语句" class="headerlink" title="golang中的if else语句"></a>golang中的if else语句</h1><p>go语言中的if else语句可以根据给定条件<strong>二选一</strong>。</p><h2 id="go语言的if-else语句语法"><a href="#go语言的if-else语句语法" class="headerlink" title="go语言的if else语句语法"></a>go语言的if else语句语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 在布尔表达式为 false 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言if-else语句实例"><a href="#go语言if-else语句实例" class="headerlink" title="go语言if else语句实例"></a>go语言if else语句实例</h2><p><strong>比较两个数的大小</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    b := <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;\&quot;a&gt;b\&quot;: %v\n&quot;</span>, <span class="string">&quot;a&gt;b&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;\&quot;a&lt;=b\&quot;: %v\n&quot;</span>, <span class="string">&quot;a&lt;b&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断一个数是奇数还是偶数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s <span class="type">int</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;输入一个数字：&quot;</span>)</span><br><span class="line">    fmt.Scan(&amp;s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Print(<span class="string">&quot;s 是偶数\n&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Print(<span class="string">&quot;s 不是偶数\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Print(<span class="string">&quot;s 的值是：&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断一个人是否成年</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    age := <span class="number">20</span></span><br><span class="line">    <span class="keyword">if</span> age &gt;= <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你还未成年&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特殊写法，在if前面添加执行语句</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> age := <span class="number">20</span>; age &gt;= <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你是成年人&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你还未成年&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>go语言if语句使用提示：</strong></p><ol><li>不需使用括号将条件包含起来</li><li>大括号<code>&#123;&#125;</code>必须存在，即使只有<strong>一行语句</strong></li><li><strong>左括号</strong>必须在<code>if</code>或<code>else</code>的同一行</li><li>在<code>if</code>之后，条件语句之前，可以添加变量<strong>初始化语句</strong>，使用<code>；</code>进行分隔</li></ol><h1 id="golang中的if-else-if语句"><a href="#golang中的if-else-if语句" class="headerlink" title="golang中的if else if语句"></a>golang中的if else if语句</h1><p>go语言if语句可以进行多重嵌套使用，进行多重判断。</p><h2 id="go语言中的if-else-if语法"><a href="#go语言中的if-else-if语法" class="headerlink" title="go语言中的if else if语法"></a>go语言中的if else if语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式<span class="number">1</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 布尔表达式<span class="number">2</span> &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// catch-all or default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言中的if-else-if语法实例"><a href="#go语言中的if-else-if语法实例" class="headerlink" title="go语言中的if else if语法实例"></a>go语言中的if else if语法实例</h2><p><strong>根据分数判断等级</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    score := <span class="number">80</span></span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">90</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">90</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B</span><br></pre></td></tr></table></figure><p><strong>同样也可以写成这样</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> score := <span class="number">80</span>; score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">90</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">90</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f6</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//  Monday Tuesday Wednesday Thursday Friday Saturday Sunday</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">string</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;输入一个字符：&quot;</span>)</span><br><span class="line">    fmt.Scan(&amp;c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&quot;S&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;输入第二个字符：&quot;</span>)</span><br><span class="line">        fmt.Scan(&amp;c)</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&quot;a&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Saturday&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;u&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Sunday&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;F&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Friday&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;M&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Monday&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;T&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;输入第二个字符：&quot;</span>)</span><br><span class="line">        fmt.Scan(&amp;c)</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&quot;u&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Tuesday&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;h&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Thursday&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">&quot;W&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Wednesday&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang中嵌套if语句"><a href="#golang中嵌套if语句" class="headerlink" title="golang中嵌套if语句"></a>golang中嵌套if语句</h1><p>go语言if语句可以嵌套多级进行判断。</p><h2 id="go语言if嵌套语法"><a href="#go语言if嵌套语法" class="headerlink" title="go语言if嵌套语法"></a>go语言if嵌套语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 <span class="number">1</span> &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式 1 为 true 时执行 */</span></span><br><span class="line">   <span class="keyword">if</span> 布尔表达式 <span class="number">2</span> &#123;</span><br><span class="line">      <span class="comment">/* 在布尔表达式 2 为 true 时执行 */</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言if嵌套实例"><a href="#go语言if嵌套实例" class="headerlink" title="go语言if嵌套实例"></a>go语言if嵌套实例</h2><p><strong>判断三个数的大小</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a&gt;b a&gt;c a</span></span><br><span class="line"><span class="comment">// b&gt;a b&gt;c b else c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">100</span></span><br><span class="line">    b := <span class="number">200</span></span><br><span class="line">    c := <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">if</span> a &gt; c &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;a最大&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>  </span><br><span class="line">        <span class="keyword">if</span> b &gt; c &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;b最大&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;c最大&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断男生还是女生，还有是否成年</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 判断男女生及年龄</span></span><br><span class="line">    gender := <span class="string">&quot;女生&quot;</span></span><br><span class="line">    age := <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> gender == <span class="string">&quot;男生&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;男生&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;成年&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;未成年&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;女生&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;成年&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;未成年&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang-switch语句"><a href="#golang-switch语句" class="headerlink" title="golang switch语句"></a>golang switch语句</h1><p>go语言中的<code>switch</code>语句，可以非常容易的判断多个值的情况。</p><h2 id="go语言中switch语句的语法"><a href="#go语言中switch语句的语法" class="headerlink" title="go语言中switch语句的语法"></a>go语言中switch语句的语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言中switch语句实例"><a href="#go语言中switch语句实例" class="headerlink" title="go语言中switch语句实例"></a>go语言中<code>switch</code>语句实例</h2><p><strong>判断成绩</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    grade := <span class="string">&quot;A&quot;</span></span><br><span class="line">    <span class="keyword">switch</span> grade &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;一般&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>优秀</code></pre><p><strong>多条件匹配</strong></p><p>go语言<code>switch</code>语句，可以同时匹配多个条件，中间用逗号分隔，有其中一个匹配成功即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    day := <span class="number">3</span></span><br><span class="line">    <span class="keyword">switch</span> day &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;工作日&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;休息日&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>工作日</code></pre><p><strong>case可以是条件表达式</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    score := <span class="number">90</span></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;享受假期&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> score &lt; <span class="number">90</span> &amp;&amp; score &gt;= <span class="number">80</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;好好学习吧！&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;玩命学习！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>享受假期</code></pre><p><strong><code>fallthrough</code>可以继续执行满足条件的下一个<code>case</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">100</span></span><br><span class="line">    <span class="keyword">switch</span> a &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;100&quot;</span>)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;200&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">300</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;300&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><h2 id="go语言中switch语句的注意事项"><a href="#go语言中switch语句的注意事项" class="headerlink" title="go语言中switch语句的注意事项"></a>go语言中<code>switch</code>语句的注意事项</h2><ol><li>支持多条件匹配</li><li>不同的 <code>case</code> 之间不使用 <code>break</code> 分隔，默认只会执行一个 <code>case</code>。</li><li>如果想要执行多个 <code>case</code>，需要使用 <code>fallthrough</code> 关键字，也可用<br><code>break</code> 终止。</li><li>分支还可以使用<strong>表达式</strong>，例如：<code>a&gt;10</code>.</li></ol><h1 id="golang-for循环语句"><a href="#golang-for循环语句" class="headerlink" title="golang for循环语句"></a>golang for循环语句</h1><p>go语言中的<code>for</code>循环，只有<code>for</code>关键字，去除了像其他语言中的<code>while</code>和<code>do while</code>.</p><h2 id="go语言for循环语法"><a href="#go语言for循环语法" class="headerlink" title="go语言for循环语法"></a>go语言for循环语法</h2><pre><code>for 初始语句;条件表达式;结束语句&#123;    循环体语句&#125;</code></pre><blockquote><p>注意：for表达式不用加括号</p></blockquote><h2 id="go语言for循环实例"><a href="#go语言for循环实例" class="headerlink" title="go语言for循环实例"></a>go语言for循环实例</h2><p><strong>循环输出1到10</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="number">1</span></span><br><span class="line">i: <span class="number">2</span></span><br><span class="line">i: <span class="number">3</span></span><br><span class="line">i: <span class="number">4</span></span><br><span class="line">i: <span class="number">5</span></span><br><span class="line">i: <span class="number">6</span></span><br><span class="line">i: <span class="number">7</span></span><br><span class="line">i: <span class="number">8</span></span><br><span class="line">i: <span class="number">9</span></span><br><span class="line">i: <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>初始条件，可以写到外面</strong></p><pre><code>func f() &#123;    i := 1    for ; i &lt;= 10; i++ &#123;        fmt.Printf(&quot;i: %v\n&quot;, i)    &#125;&#125;</code></pre><p>运行结果</p><pre><code>i: 1i: 2i: 3i: 4i: 5i: 6i: 7i: 8i: 9i: 10</code></pre><p><strong>初始条件和结束条件都可以省略</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">1</span> <span class="comment">// 初始条件</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">        i++ <span class="comment">// 结束条件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i: 1i: 2i: 3i: 4i: 5i: 6i: 7i: 8i: 9i: 10</code></pre><p>这种情况类似其他语言中的<code>while</code>循环</p><p><strong>永真循环</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;我一直在执行~&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~我一直在执行~......</code></pre><p>for循环可以通过<code>break</code>、<code>goto</code>、<code>return</code>、<code>panic</code>语句强制退出循环。</p><h1 id="golang-for-range循环"><a href="#golang-for-range循环" class="headerlink" title="golang for range循环"></a>golang for range循环</h1><p>Go语言中可以使用<code>for range</code>遍历数组、切片、字符串、map<br>及通道（channel）。 通过<code>for range</code>遍历的返回值有以下规律：</p><ol><li>数组、切片、字符串返回<strong>索引和值</strong>。</li><li>map返回键和值。</li><li>通道（channel）只返回通道内的值。</li></ol><h2 id="go语言for-range实例"><a href="#go语言for-range实例" class="headerlink" title="go语言for range实例"></a>go语言for range实例</h2><p><strong>循环数组</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %d, v: %v\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="number">0</span>, v: <span class="number">1</span></span><br><span class="line">i: <span class="number">1</span>, v: <span class="number">2</span></span><br><span class="line">i: <span class="number">2</span>, v: <span class="number">3</span></span><br><span class="line">i: <span class="number">3</span>, v: <span class="number">4</span></span><br><span class="line">i: <span class="number">4</span>, v: <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>循环字符串</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&quot;多课网，go教程&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %d, v: %c\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// %c 按照字符输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="number">0</span>, v: 多</span><br><span class="line">i: <span class="number">3</span>, v: 课</span><br><span class="line">i: <span class="number">6</span>, v: 网</span><br><span class="line">i: <span class="number">9</span>, v: ，</span><br><span class="line">i: <span class="number">12</span>, v: g</span><br><span class="line">i: <span class="number">13</span>, v: o</span><br><span class="line">i: <span class="number">14</span>, v: 教</span><br><span class="line">i: <span class="number">17</span>, v: 程</span><br></pre></td></tr></table></figure><p><strong>循环切片</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i, %d, v: %v\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环map</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    m[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">    m[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;k: %v, v: %v\n&quot;</span>, k, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k: name, v: tom</span><br><span class="line">k: age, v: <span class="number">20</span></span><br><span class="line">k: email, v: tom@gmail.com</span><br></pre></td></tr></table></figure><p>当在循环中使用 <code>range</code><br>关键字时，它用于迭代数组、切片、映射或通道等数据结构。</p><p><code>range</code><br>返回两个值：索引和对应索引的元素值。在每次迭代中，索引和元素值都会被赋值给相应的变量。</p><p>对于数组和切片，<code>range</code> 返回索引和元素值。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    fmt.Println(index, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>0 11 22 3</code></pre><p>对于映射，<code>range</code> 返回键和对应键的值。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>, <span class="string">&quot;c&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>a 1b 2c 3</code></pre><p>对于通道，<code>range</code><br>在通道关闭之前迭代通道中的值。当通道关闭时，迭代将停止。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line">    ch &lt;- <span class="number">2</span></span><br><span class="line">    ch &lt;- <span class="number">3</span></span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> value := <span class="keyword">range</span> ch &#123;</span><br><span class="line">    fmt.Println(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><pre><code>123</code></pre><p><code>range</code><br>的用法可以帮助我们遍历和处理数据结构中的元素，无论是数组、切片、映射还是通道。它提供了一种简洁和方便的方式来迭代和访问数据。</p><h1 id="golang流程控制关键字break"><a href="#golang流程控制关键字break" class="headerlink" title="golang流程控制关键字break"></a>golang流程控制关键字break</h1><p><code>break</code>语句可以结束<code>for</code>、<code>switch</code>和<code>select</code>的代码块。</p><h2 id="go语言使用break注意事项"><a href="#go语言使用break注意事项" class="headerlink" title="go语言使用break注意事项"></a>go语言使用break注意事项</h2><ol><li>单独在<code>select</code>中使用<code>break</code>和不使用<code>break</code>没有啥区别。</li><li>单独在表达式<code>switch</code>语句，并且没有<code>fallthough</code>，使用<code>break</code>和不使用<code>break</code>没有啥区别。</li><li>单独在表达式<code>switch</code>语句，并且有<code>fallthough</code>，使用<code>break</code>能够终止<code>fallthough</code>后面的<code>case</code>语句的执行。</li><li>带标签的<code>break</code>，可以跳出多层<code>select/ switch</code>作用域。让<code>break</code>更加灵活，写法更加简单灵活，不需要使用控制变量一层一层跳出循环，没有带<code>break</code>的只能跳出当前语句块。</li></ol><h2 id="go语言break关键字实例"><a href="#go语言break关键字实例" class="headerlink" title="go语言break关键字实例"></a>go语言break关键字实例</h2><p><strong>跳出for循环</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">// 退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="number">0</span></span><br><span class="line">i: <span class="number">1</span></span><br><span class="line">i: <span class="number">2</span></span><br><span class="line">i: <span class="number">3</span></span><br><span class="line">i: <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>跳出switch</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">2</span></span><br><span class="line">    <span class="keyword">switch</span> i &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;等于1&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;等于2&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;等于3&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;不关心&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>等于2</code></pre><p>注释掉<code>fallthrough</code>上面的<code>break</code>，运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">等于<span class="number">2</span></span><br><span class="line">等于<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>跳转到标签处</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">MY_LABEL:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> MY_LABEL</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>01234end...</code></pre><h1 id="golang关键字continue"><a href="#golang关键字continue" class="headerlink" title="golang关键字continue"></a>golang关键字continue</h1><p><code>continue</code>只能用在循环中，在go中只能用在<code>for</code>循环中，它可以终止本次循环，进行下一次循环。</p><p>在 <code>continue</code>语句后添加标签时，表示开始标签对应的循环。</p><h2 id="go语言continue实例"><a href="#go语言continue实例" class="headerlink" title="go语言continue实例"></a>go语言<code>continue</code>实例</h2><p><strong>输出1到10之间的偶数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i: 0i: 2i: 4i: 6i: 8</code></pre><p><strong>跳转到label</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// MY_LABEL:</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">    MY_LABEL:</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">2</span> &amp;&amp; j == <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span> MY_LABEL</span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i=%d,j=%d\n&quot;</span>, i, j)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">0</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">1</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">2</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">3</span>,j=<span class="number">4</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">0</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">1</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">2</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">3</span></span><br><span class="line">i=<span class="number">4</span>,j=<span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="golang流程控制关键字goto"><a href="#golang流程控制关键字goto" class="headerlink" title="golang流程控制关键字goto"></a>golang流程控制关键字goto</h1><p><code>goto</code>语句通过标签进行代码间的<strong>无条件跳转</strong>。<code>goto</code>语句可以在快速跳出循环、避免重复退出上有一定的帮助。Go语言中使用<code>goto</code>语句能简化一些代码的实现过程。<br>例如双层嵌套的for循环要退出时：</p><h2 id="go语言关键字goto实例"><a href="#go语言关键字goto实例" class="headerlink" title="go语言关键字goto实例"></a>go语言关键字goto实例</h2><p><strong>跳转到指定标签</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> LABEL1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">LABEL1:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;next...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>next...</code></pre><p><strong>跳出双重循环</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">2</span> &amp;&amp; j == <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">goto</span> LABEL1</span><br><span class="line">            &#125;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;i=%d,j=%d\n&quot;</span>, i, j)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL1:</span><br><span class="line">    fmt.Println(<span class="string">&quot;label1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i=0,j=0i=0,j=1i=0,j=2i=0,j=3i=0,j=4i=1,j=0i=1,j=1i=1,j=2i=1,j=3i=1,j=4i=2,j=0i=2,j=1label1</code></pre><h1 id="golang数组"><a href="#golang数组" class="headerlink" title="golang数组"></a>golang数组</h1><p>数组是<strong>相同数据类型</strong>的一组数据的集合，数组一旦定义<strong>长度不能修改</strong>，数组可以通过<strong>下标（或者叫索引）</strong>来访问元素。</p><h2 id="go语言数组的定义"><a href="#go语言数组的定义" class="headerlink" title="go语言数组的定义"></a>go语言数组的定义</h2><p>数组定义的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name [SIZE] variable_type</span><br></pre></td></tr></table></figure><p><code>variable_name</code>：数组名称</p><p><code>SIZE</code>：数组长度，必须是常量</p><p><code>variable_type</code>：数组保存元素的类型</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span>    <span class="comment">// 定义一个int类型的数组a，长度是3</span></span><br><span class="line">    <span class="keyword">var</span> s [<span class="number">2</span>]<span class="type">string</span> <span class="comment">// 定义一个字符串类型的数组s，长度是2</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %T\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %T\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [3]ints: [2]string</code></pre><p>从上面运行结果，我们可以看出，数组和长度和元素类型共同组成了数组的类型。</p><h2 id="go语言数组的初始化"><a href="#go语言数组的初始化" class="headerlink" title="go语言数组的初始化"></a>go语言数组的初始化</h2><p>初始化，就是给数组的元素赋值，没有初始化的数组，默认元素值都是<strong>零值</strong>，布尔类型是<code>false</code>，字符串是空字符串。</p><h3 id="没有初始化的数组"><a href="#没有初始化的数组" class="headerlink" title="没有初始化的数组"></a>没有初始化的数组</h3><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span>    <span class="comment">// 定义一个int类型的数组a，长度是3</span></span><br><span class="line">    <span class="keyword">var</span> s [<span class="number">2</span>]<span class="type">string</span> <span class="comment">// 定义一个字符串类型的数组s，长度是2</span></span><br><span class="line">    <span class="keyword">var</span> b [<span class="number">2</span>]<span class="type">bool</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [0 0 0]s: [&quot;&quot; &quot;&quot;]b: [false false]</code></pre><h3 id="使用初始化列表"><a href="#使用初始化列表" class="headerlink" title="使用初始化列表"></a>使用初始化列表</h3><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> s = [<span class="number">2</span>]<span class="type">string</span>&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b = [<span class="number">2</span>]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    a1 := [<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [1 2 3]s: [tom kite]b: [true false]a1: [1 2]</code></pre><p>使用初始化列表，就是将值写在<strong>大括号</strong>里面。</p><h3 id="省略数组长度"><a href="#省略数组长度" class="headerlink" title="省略数组长度"></a>省略数组长度</h3><p>数组长度可以省略，使用<code>...</code>代替，更加初始化值得数量<strong>自动推断</strong>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> s = [...]<span class="type">string</span>&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b = [...]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    a1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [1 2 3]s: [tom kite]b: [true false]a1: [1 2]</code></pre><h3 id="指定索引值的方式来初始化"><a href="#指定索引值的方式来初始化" class="headerlink" title="指定索引值的方式来初始化"></a>指定索引值的方式来初始化</h3><p>可以通过指定所有的方式来初始化，未指定所有的默认未零值。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = [...]<span class="type">int</span>&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> s = [...]<span class="type">string</span>&#123;<span class="number">1</span>: <span class="string">&quot;tom&quot;</span>, <span class="number">2</span>: <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b = [...]<span class="type">bool</span>&#123;<span class="number">2</span>: <span class="literal">true</span>, <span class="number">5</span>: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">    a1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 类型推断</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [1 0 2]s: [ tom kite]b: [false false true false false false]a1: [1 2]</code></pre><h1 id="go语言访问数组元素"><a href="#go语言访问数组元素" class="headerlink" title="go语言访问数组元素"></a>go语言访问数组元素</h1><p>可以通过下标的方式，来访问数组元素。数组的最大下标为数组长度-1，大于这个下标会发生数组越界。</p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">2</span>]<span class="type">int</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a[0]: %v\n&quot;</span>, a[<span class="number">0</span>])</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a[1]: %v\n&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 a[0]  a[1]</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a[0]: %v\n&quot;</span>, a[<span class="number">0</span>])</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a[1]: %v\n&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a[0]: 100a[1]: 200-----------a[0]: 1a[1]: 2</code></pre><h2 id="根据数组长度遍历数组"><a href="#根据数组长度遍历数组" class="headerlink" title="根据数组长度遍历数组"></a>根据数组长度遍历数组</h2><p>可以根据数组长度，通过<code>for</code>循环的方式来遍历数组，数组的长度可以使用<code>len</code>函数获得。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a[%d]: %v\n&quot;</span>, i, a[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a[0]: 1a[1]: 2a[2]: 3a[3]: 4a[4]: 5a[5]: 6</code></pre><h2 id="使用for-range数组"><a href="#使用for-range数组" class="headerlink" title="使用for range数组"></a>使用<code>for range</code>数组</h2><p>还可以使用<code>for range</code>循环来遍历数组，range返回数组下标和对应的值</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a[%d]: %v\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>]: <span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>]: <span class="number">2</span></span><br><span class="line">a[<span class="number">2</span>]: <span class="number">3</span></span><br><span class="line">a[<span class="number">3</span>]: <span class="number">4</span></span><br><span class="line">a[<span class="number">4</span>]: <span class="number">5</span></span><br><span class="line">a[<span class="number">5</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><h1 id="golang切片"><a href="#golang切片" class="headerlink" title="golang切片"></a>golang切片</h1><p>前面我们学习了数组，数组是固定长度，可以容纳相同数据类型的元素的集合。当长度固定时，使用还是带来一些限制，比如：我们申请的长度太大浪费内存，太小又不够用。</p><p>鉴于上述原因，我们有了go语言的切片，可以把切片理解为，可变长度的数组，其实它底层就是使用数组实现的，增加了<strong>自动扩容</strong>功能。切片（Slice）是一个拥有相同类型元素的可变长度的序列。</p><h2 id="go语言切片的语法"><a href="#go语言切片的语法" class="headerlink" title="go语言切片的语法"></a>go语言切片的语法</h2><p>声明一个切片和声明一个数组类似，只要不添加长度就可以了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>切片是引用类型，可以使用<code>make</code>函数来创建切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">也可以简写为</span><br><span class="line"></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br></pre></td></tr></table></figure><p>也可以指定容量，其中capacity为可选参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]T, length, capacity)</span><br></pre></td></tr></table></figure><p>这里 len 是数组的长度并且也是切片的初始长度。</p><h2 id="go语言切片实例"><a href="#go语言切片实例" class="headerlink" title="go语言切片实例"></a>go语言切片实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> names []<span class="type">string</span></span><br><span class="line">    <span class="keyword">var</span> numbers []<span class="type">int</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;names: %v\n&quot;</span>, names)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;numbers: %v\n&quot;</span>, numbers)</span><br><span class="line">    fmt.Println(names == <span class="literal">nil</span>)</span><br><span class="line">    fmt.Println(numbers == <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>names: []numbers: []truetrue</code></pre><h2 id="go语言切片的长度和容量"><a href="#go语言切片的长度和容量" class="headerlink" title="go语言切片的长度和容量"></a>go语言切片的长度和容量</h2><p>切片拥有自己的长度和容量，我们可以通过使用内置的<code>len()</code>函数求长度，使用内置的<code>cap()</code>函数求切片的容量。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> names = []<span class="type">string</span>&#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;kite&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> numbers = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;len: %d cap: %d\n&quot;</span>, <span class="built_in">len</span>(names), <span class="built_in">cap</span>(names))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len: %d cap: %d\n&quot;</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s1 = <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len: %d cap: %d\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>len: 2 cap: 2len: 3 cap: 3len: 2 cap: 3</code></pre><h1 id="golang切片的初始化"><a href="#golang切片的初始化" class="headerlink" title="golang切片的初始化"></a>golang切片的初始化</h1><p>切片的初始化方法很多，可以直接初始化，也可以使用数组初始化等。</p><h2 id="切片如何切分"><a href="#切片如何切分" class="headerlink" title="切片如何切分"></a>切片如何切分</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s1 = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">    s2 := s1[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">// [)</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">    s3 := s1[<span class="number">3</span>:]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line">    s4 := s1[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s4: %v\n&quot;</span>, s4)</span><br><span class="line">    s5 := s1[:]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s5: %v\n&quot;</span>, s5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>s2: [1 2 3]s3: [4 5 6]s4: [3 4 5]s5: [1 2 3 4 5 6]</code></pre><h2 id="直接初始化"><a href="#直接初始化" class="headerlink" title="直接初始化"></a>直接初始化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s: [1 2 3]</code></pre><h2 id="使用数组初始化"><a href="#使用数组初始化" class="headerlink" title="使用数组初始化"></a>使用数组初始化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    s1 := arr[:]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [1 2 3]</code></pre><h2 id="使用数组的部分元素初始化（切片表达式）"><a href="#使用数组的部分元素初始化（切片表达式）" class="headerlink" title="使用数组的部分元素初始化（切片表达式）"></a>使用数组的部分元素初始化（切片表达式）</h2><p>切片的底层就是一个<strong>数组</strong>，所以我们可以<strong>基于数组通过切片表达式得到切片</strong>。<br>切片表达式中的low和high表示一个索引范围（<strong>左包含，右不包含</strong>），得到的切片<strong>长度</strong>&#x3D;high-low，容量等于得到的切片的底层数组的容量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">    s1 := arr[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">    s2 := arr[<span class="number">2</span>:]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">    s3 := arr[:<span class="number">3</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [3 4 5]s2: [3 4 5 6]s3: [1 2 3]</code></pre><h2 id="空-nil-切片"><a href="#空-nil-切片" class="headerlink" title="空(nil)切片"></a>空(nil)切片</h2><p>一个切片在未初始化之前默认为 nil，长度为 0，容量为0.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">    fmt.Println(s1 == <span class="literal">nil</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len: %d, cap: %d\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>truelen: 0, cap: 0</code></pre><h1 id="go语言切片的遍历"><a href="#go语言切片的遍历" class="headerlink" title="go语言切片的遍历"></a>go语言切片的遍历</h1><p>切片的遍历和数组的遍历非常类似，可以使用for循环索引遍历，或者for<br>range循环。</p><h2 id="for循环索引遍历"><a href="#for循环索引遍历" class="headerlink" title="for循环索引遍历"></a>for循环索引遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s1); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;s1[%d]: %v\n&quot;</span>, i, s1[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1[0]: 1s1[1]: 2s1[2]: 3s1[3]: 4s1[4]: 5</code></pre><h2 id="for-range循环"><a href="#for-range循环" class="headerlink" title="for range循环"></a>for range循环</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;s1[%d]: %v\n&quot;</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1[0]: 1s1[1]: 2s1[2]: 3s1[3]: 4s1[4]: 5</code></pre><h1 id="go语言切片元素的添加和删除copy"><a href="#go语言切片元素的添加和删除copy" class="headerlink" title="go语言切片元素的添加和删除copy"></a>go语言切片元素的添加和删除copy</h1><p>切片是一个动态数组，可以使用<code>append()</code>函数添加元素，go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。由于，切片是引用类型，通过赋值的方式，会修改原有内容，go提供了<code>copy()</code>函数来拷贝切片</p><p>db CRUD</p><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    s1 = <span class="built_in">append</span>(s1, <span class="number">1</span>)</span><br><span class="line">    s1 = <span class="built_in">append</span>(s1, <span class="number">2</span>)</span><br><span class="line">    s1 = <span class="built_in">append</span>(s1, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 添加多个元素</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line"></span><br><span class="line">    s3 := []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    s4 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    s4 = <span class="built_in">append</span>(s4, s3...) <span class="comment">// 添加另外一个切片</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s4: %v\n&quot;</span>, s4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [1 2 3 4 5]s4: [1 2 3 4 5]</code></pre><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="comment">// 删除索引为2的元素</span></span><br><span class="line">    s1 = <span class="built_in">append</span>(s1[:<span class="number">2</span>], s1[<span class="number">3</span>:]...)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [1 2 4 5]</code></pre><p>公式：要从切片a中删除索引为<code>index</code>的元素，操作方法是<code>a = append(a[:index], a[index+1:]...)</code></p><h2 id="拷贝切片"><a href="#拷贝切片" class="headerlink" title="拷贝切片"></a>拷贝切片</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    s2 := s1</span><br><span class="line">    s1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s2: %v\n&quot;</span>, s2)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    s3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(s3, s1)</span><br><span class="line"></span><br><span class="line">    s1[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;s1: %v\n&quot;</span>, s1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s3: %v\n&quot;</span>, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>s1: [100 2 3]s2: [100 2 3]-------------s1: [1 2 3]s3: [100 2 3]</code></pre><p>从运行结果，我们看到赋值的情况下，原来的变量被修改了，使用copy函数，原来的变量没有被修改。</p><h1 id="golang-map"><a href="#golang-map" class="headerlink" title="golang map"></a>golang map</h1><p>map是一种<code>key:value</code>键值对的数据结构容器。map内部实现是哈希表(<code>hash</code>)。</p><p>map 最重要的一点是通过 key 来快速检索数据，key<br>类似于索引，指向数据的值。</p><p>map是引用类型的。</p><h2 id="map的语法格式"><a href="#map的语法格式" class="headerlink" title="map的语法格式"></a>map的语法格式</h2><p>可以使用内建函数 make 也可以使用 map 关键字来定义 map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 声明变量，默认 map 是 nil */</span></span><br><span class="line"><span class="keyword">var</span> map_variable <span class="keyword">map</span>[key_data_type]value_data_type</span><br><span class="line"><span class="comment">/* 使用 make 函数 */</span></span><br><span class="line">map_variable = <span class="built_in">make</span>(<span class="keyword">map</span>[key_data_type]value_data_type)</span><br></pre></td></tr></table></figure><p><code>map_variable</code>：map变量名称</p><p><code>key_data_type</code>：key的数据类型</p><p><code>value_data_type</code>：值得数据类型</p><p><strong>实例</strong></p><p>下面声明一个保存个人信息的map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;m1: %v\n&quot;</span>, m1)</span><br><span class="line"></span><br><span class="line">    m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:  <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>:   <span class="string">&quot;20&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: <span class="string">&quot;kite@gmail.com&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;m2: %v\n&quot;</span>, m2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>m1: map[age:20 email:tom@gmail.com name:tom]m2: map[age:20 email:kite@gmail.com name:kite]</code></pre><h2 id="访问map"><a href="#访问map" class="headerlink" title="访问map"></a>访问map</h2><p>可以通过下标key获得其值，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">    name := m1[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    age := m1[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">    email := m1[<span class="string">&quot;email&quot;</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;email: %v\n&quot;</span>, email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断某个键是否存在"><a href="#判断某个键是否存在" class="headerlink" title="判断某个键是否存在"></a>判断某个键是否存在</h2><p>go语言中有个判断map中键是否存在的特殊写法，格式如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value, ok := <span class="keyword">map</span>[key]</span><br></pre></td></tr></table></figure><p>如果ok为<code>true</code>，存在；否则，不存在。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">    m1[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">    v, ok := m1[<span class="string">&quot;address&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;键存在&quot;</span>)</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;键不存在&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">键不存在</span><br></pre></td></tr></table></figure><h1 id="go语言遍历map"><a href="#go语言遍历map" class="headerlink" title="go语言遍历map"></a>go语言遍历map</h1><p>可以使用<code>for range</code>循环进行map遍历，得到key和value值。</p><h2 id="遍历key"><a href="#遍历key" class="headerlink" title="遍历key"></a>遍历key</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">     m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">     m[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">     m[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> key := <span class="keyword">range</span> m&#123;</span><br><span class="line">         fmt.Println(key)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>nameageemail</code></pre><h2 id="遍历key和value"><a href="#遍历key和value" class="headerlink" title="遍历key和value"></a>遍历key和value</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">     m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">     m[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;20&quot;</span></span><br><span class="line">     m[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> key, value := <span class="keyword">range</span> m&#123;</span><br><span class="line">         fmt.Println(key + <span class="string">&quot;:&quot;</span> +value)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name:tom</span><br><span class="line">age:<span class="number">20</span></span><br><span class="line">email:tom@gmail.com</span><br></pre></td></tr></table></figure><h1 id="golang-函数"><a href="#golang-函数" class="headerlink" title="golang 函数"></a>golang 函数</h1><h2 id="golang函数简介"><a href="#golang函数简介" class="headerlink" title="golang函数简介"></a>golang函数简介</h2><p>函数是go语言中的<strong>一级公民</strong>，我们把所有的功能单元都定义在函数中，可以重复使用。函数包含函数的名称、参数列表和返回值类型，这些构成了函数的签名（signature）。</p><h3 id="go语言中函数特性"><a href="#go语言中函数特性" class="headerlink" title="go语言中函数特性"></a>go语言中函数特性</h3><ol><li>go语言中有3种函数：普通函数、匿名函数(没有名称的函数)、方法(定义在struct上的函数)。receiver</li><li>go语言中不允许函数重载(overload)，也就是说不允许函数同名。</li><li>go语言中的函数不能嵌套函数，但可以嵌套匿名函数。</li><li>函数是一个值，可以将函数赋值给变量，使得这个变量也成为函数。</li><li>函数可以作为参数传递给另一个函数。</li><li>函数的返回值可以是一个函数。</li><li>函数调用的时候，如果有参数传递给函数，则先拷贝参数的副本，再将副本传递给函数。</li><li>函数参数可以没有名称。</li></ol><h2 id="go语言中函数的定义和调用"><a href="#go语言中函数的定义和调用" class="headerlink" title="go语言中函数的定义和调用"></a>go语言中函数的定义和调用</h2><p>函数在使用之前必须先定义，可以调用函数来完成某个任务。函数可以重复调用，从而达到代码重用。</p><h3 id="go语言函数定义语法"><a href="#go语言函数定义语法" class="headerlink" title="go语言函数定义语法"></a>go语言函数定义语法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( [parameter list] )</span></span> [return_types]</span><br><span class="line">&#123;</span><br><span class="line">   函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>语法解析：</strong></p><ul><li><code>func</code>：函数由 <code>func</code> 开始声明</li><li><code>function_name</code>：函数名称，函数名和参数列表一起构成了函数签名。</li><li><code>[parameter list]</code>：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。</li><li><code>return_types</code>：返回类型，函数返回一列值。<code>return_types</code><br>是该列值的数据类型。有些功能不需要返回值，这种情况下 <code>return_types</code><br>不是必须的。</li><li>函数体：函数定义的代码集合。</li></ul><h3 id="go语言函数定义实例"><a href="#go语言函数定义实例" class="headerlink" title="go语言函数定义实例"></a>go语言函数定义实例</h3><p><strong>定义一个求和函数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> (ret <span class="type">int</span>) &#123;</span><br><span class="line">    ret = a + b</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个比较两个数大小的函数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> (max <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        max = a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        max = b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go语言函数调用"><a href="#go语言函数调用" class="headerlink" title="go语言函数调用"></a>go语言函数调用</h3><p>当我们要完成某个任务时，可以调用函数来完成。调用函数要传递参数，如何有返回值可以获得返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line"></span><br><span class="line">    max := compare(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;max: %v\n&quot;</span>, max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s: <span class="number">3</span></span><br><span class="line">max: <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="golang函数的返回值"><a href="#golang函数的返回值" class="headerlink" title="golang函数的返回值"></a>golang函数的返回值</h1><p>函数可以有0或多个返回值，返回值需要指定数据类型，返回值通过<code>return</code>关键字来指定。</p><p><code>return</code>可以有参数，也可以没有参数，这些返回值可以有名称，也可以没有名称。go中的函数可以有多个返回值。</p><ol><li><code>return</code>关键字中指定了参数时，返回值可以不用名称。如果<code>return</code>省略参数，则返回值部分必须带名称</li><li>当返回值有名称时，必须使用括号包围，逗号分隔，即使只有一个返回值</li><li>但即使返回值命名了，<code>return</code>中也可以强制指定其它返回值的名称，也就是说<code>return</code>的优先级更高</li><li>命名的返回值是预先声明好的，在函数内部可以直接使用，无需再次声明。命名返回值的名称不能和函数参数名称相同，否则报错提示变量重复定义</li><li><code>return</code>中可以有表达式，但不能出现赋值表达式，这和其它语言可能有所不同。例如<code>return a+b</code>是正确的，但<code>return c=a+b</code>是错误的。</li></ol><h2 id="go语言函数返回值实例"><a href="#go语言函数返回值实例" class="headerlink" title="go语言函数返回值实例"></a>go语言函数返回值实例</h2><p><strong>没有返回值</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;我没有返回值，只是进行一些计算&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有一个返回值</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> (ret <span class="type">int</span>) &#123;</span><br><span class="line">    ret = a + b</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多个返回值，且在return中指定返回的内容</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> (name <span class="type">string</span>, age <span class="type">int</span>) &#123;</span><br><span class="line">    name = <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    age = <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> name, age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多个返回值，返回值名称没有被使用</strong></p><pre><code>func f3() (name string, age int) &#123;    name = &quot;RyanChou&quot;    age = 30    return // 等价于return name, age&#125;</code></pre><p><strong>return覆盖命名返回值，返回值名称没有被使用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">()</span></span> (name <span class="type">string</span>, age <span class="type">int</span>) &#123;</span><br><span class="line">    n := <span class="string">&quot;RyanChou&quot;</span></span><br><span class="line">    a := <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> n, a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Go中经常会使用其中一个返回值作为函数是否执行成功、是否有错误信息的判断条件。例如<code>return value,exists</code>、<code>return value,ok</code>、<code>return value,err</code>等。</p></blockquote><blockquote><p>当函数的<strong>返回值过多</strong>时，例如有4个以上的返回值，应该将这些返回值收集到容器中，然后以返回容器的方式去返回。例如，同类型的返回值可以放进slice中，不同类型的返回值可以放进map中。</p></blockquote><blockquote><p>但函数有多个返回值时，如果其中某个或某几个返回值不想使用，可以通过下划线<code>_</code>来丢弃这些返回值。例如下面的<code>f1</code>函数两个返回值，调用该函数时，丢弃了第二个返回值b，只保留了第一个返回值a赋值给了变量<code>a</code>。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    _, x := f1()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;x: %v\n&quot;</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>x: 2</code></pre><h1 id="golang函数的参数"><a href="#golang函数的参数" class="headerlink" title="golang函数的参数"></a>golang函数的参数</h1><p>go语言函数可以有0或多个参数，参数需要指定<strong>数据类型</strong>。</p><p>声明函数时的参数列表叫做形参，调用时传递的参数叫做实参。</p><p>go语言是通过<strong>传值的方式传参</strong>的，意味着传递给函数的是拷贝后的副本，所以函数内部访问、修改的也是这个副本。</p><p>go语言可以使用<strong>变长参数</strong>，有时候并不能确定参数的个数，可以使用变长参数，可以在函数定义语句的参数部分使用<code>ARGS...TYPE</code>的方式。这时会将<code>...</code>代表的参数全部保存到一个名为ARGS的slice中，注意这些参数的数据类型都是TYPE。</p><h2 id="go语言函数的参数实例"><a href="#go语言函数的参数实例" class="headerlink" title="go语言函数的参数实例"></a>go语言函数的参数实例</h2><p><strong>go语言传参</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形参列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 实参列表</span></span><br><span class="line">    r := f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>演示参数传递，按值传递</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a1: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">100</span></span><br><span class="line">    f1(a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a1: 200a: 100</code></pre><p>从运行结果可以看到，调用函数f1后，a的值并没有被改变，说明参数传递是拷贝了一个副本，也就是拷贝了一份新的内容进行运算。</p><blockquote><p><code>map</code>、<code>slice</code>、<code>interface</code>、<code>channel</code>这些数据类型本身就是<strong>指针</strong>类型的，所以就算是拷贝传值也是拷贝的指针，拷贝后的参数仍然指向底层数据结构，所以修改它们<strong>可能</strong>会影响外部数据结构的值。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    f1(a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a: [1 2]a: [100 2]</code></pre><blockquote><p>从运行结果发现，调用函数后，slice内容被改变了。</p></blockquote><p><strong>变长参数</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(args ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>, args ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;age: %v\n&quot;</span>, age)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line">    f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line">    f2(<span class="string">&quot;tom&quot;</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>v: 1v: 2v: 3------------v: 1v: 2v: 3v: 4v: 5v: 6------------name: tomage: 20v: 1v: 2v: 3</code></pre><h1 id="golang函数类型与函数变量"><a href="#golang函数类型与函数变量" class="headerlink" title="golang函数类型与函数变量"></a>golang函数类型与函数变量</h1><p>可以使用<code>type</code>关键字来定义一个函数类型，语法格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> fun <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span></span><br></pre></td></tr></table></figure><p>上面语句定义了一个<code>fun</code>函数类型，它是一种函数类型，这种函数接收两个<code>int</code>类型的参数，并且返回一个<code>int</code>类型的返回值。</p><p>下面我们定义两个这样结构的两个函数，一个求和，一个比较大小：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>下面定义一个</code>fun<code>函数类型，把</code>sum<code>和</code>max<code>赋值给它</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fun <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f fun</span><br><span class="line">    f = sum</span><br><span class="line">    s := f(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">    f = max</span><br><span class="line">    m := f(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;m: %v\n&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s: <span class="number">3</span></span><br><span class="line">m: <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="golang高阶函数"><a href="#golang高阶函数" class="headerlink" title="golang高阶函数"></a>golang高阶函数</h1><p>go语言的函数，可以作为函数的参数，传递给另外一个函数，可以可以作为，另外一个函数的返回值返回。</p><h2 id="go语言函数作为参数"><a href="#go语言函数作为参数" class="headerlink" title="go语言函数作为参数"></a>go语言函数作为参数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Hello,%s&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(name <span class="type">string</span>, f <span class="keyword">func</span>(<span class="type">string</span>)</span></span>) &#123;</span><br><span class="line">    f(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1(<span class="string">&quot;tom&quot;</span>, sayHello)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>Hello,tom</code></pre><h2 id="go语言函数作为返回值"><a href="#go语言函数作为返回值" class="headerlink" title="go语言函数作为返回值"></a>go语言函数作为返回值</h2><pre><code>package mainimport &quot;fmt&quot;func add(x, y int) int &#123;    return x + y&#125;func sub(x, y int) int &#123;    return x - y&#125;func cal(s string) func(int, int) int &#123;    switch s &#123;    case &quot;+&quot;:        return add    case &quot;-&quot;:        return sub    default:        return nil    &#125;&#125;func main() &#123;    add := cal(&quot;+&quot;)    r := add(1, 2)    fmt.Printf(&quot;r: %v\n&quot;, r)    fmt.Println(&quot;-----------&quot;)    sub := cal(&quot;-&quot;)    r = sub(100, 50)    fmt.Printf(&quot;r: %v\n&quot;, r)&#125;</code></pre><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r: <span class="number">3</span></span><br><span class="line">-----------</span><br><span class="line">r: <span class="number">50</span></span><br></pre></td></tr></table></figure><h1 id="golang匿名函数"><a href="#golang匿名函数" class="headerlink" title="golang匿名函数"></a>golang匿名函数</h1><p>go语言函数不能嵌套，但是在函数内部可以定义匿名函数，实现一下简单功能调用。</p><p>所谓匿名函数就是，没有名称的函数。</p><p>语法格式如下：</p><pre><code>func (参数列表)(返回值)</code></pre><blockquote><p>当然可以既没有参数，可以没有返回值</p></blockquote><h2 id="匿名函数实例"><a href="#匿名函数实例" class="headerlink" title="匿名函数实例"></a>匿名函数实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    max := <span class="function"><span class="keyword">func</span> <span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i := max(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i: 2</code></pre><p>自己执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 自己执行</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        max := <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">            max = a</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            max = b</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;max: %v\n&quot;</span>, max)</span><br><span class="line">    &#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max: <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="golang闭包"><a href="#golang闭包" class="headerlink" title="golang闭包"></a>golang闭包</h1><p>闭包可以理解成<strong>定义在一个函数内部的函数</strong>。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。或者说是函数和其引用环境的组合体。</p><p>闭包指的是一个函数和与其相关的引用环境组合而成的实体。简单来说，<code>闭包=函数+引用环境</code>。<br>首先我们来看一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        x += y</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f = add()</span><br><span class="line">    fmt.Println(f(<span class="number">10</span>))</span><br><span class="line">    fmt.Println(f(<span class="number">20</span>))</span><br><span class="line">    fmt.Println(f(<span class="number">30</span>))</span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line">    f1 := add()</span><br><span class="line">    fmt.Println(f1(<span class="number">40</span>))</span><br><span class="line">    fmt.Println(f1(<span class="number">50</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>103060-----------4090</code></pre><p>变量<code>f</code>是一个函数并且它引用了其外部作用域中的<code>x</code>变量，此时<code>f</code>就是一个闭包。<br>在<code>f</code>的生命周期内，<strong>变量<code>x</code>也一直有效。</strong> 闭包进阶示例1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        x += y</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f = add(<span class="number">10</span>)</span><br><span class="line">    fmt.Println(f(<span class="number">10</span>))</span><br><span class="line">    fmt.Println(f(<span class="number">20</span>))</span><br><span class="line">    fmt.Println(f(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    f1 := add(<span class="number">20</span>)</span><br><span class="line">    fmt.Println(f1(<span class="number">40</span>))</span><br><span class="line">    fmt.Println(f1(<span class="number">50</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>204070----------60110</code></pre><p>闭包进阶示例2：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffixFunc</span><span class="params">(suffix <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line">            <span class="keyword">return</span> name + suffix</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    jpgFunc := makeSuffixFunc(<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">    txtFunc := makeSuffixFunc(<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">    fmt.Println(jpgFunc(<span class="string">&quot;test&quot;</span>)) </span><br><span class="line">    fmt.Println(txtFunc(<span class="string">&quot;test&quot;</span>)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>test.jpgtest.txt</code></pre><p>闭包进阶示例3：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(base <span class="type">int</span>)</span></span> (<span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span>, <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span>) &#123;</span><br><span class="line">    add := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        base += i</span><br><span class="line">        <span class="keyword">return</span> base</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sub := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        base -= i</span><br><span class="line">        <span class="keyword">return</span> base</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> add, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1, f2 := calc(<span class="number">10</span>)</span><br><span class="line">    fmt.Println(f1(<span class="number">1</span>), f2(<span class="number">2</span>)) </span><br><span class="line">    fmt.Println(f1(<span class="number">3</span>), f2(<span class="number">4</span>)) </span><br><span class="line">    fmt.Println(f1(<span class="number">5</span>), f2(<span class="number">6</span>)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>11 912 813 7</code></pre><p>闭包其实并不复杂，只要牢记<code>闭包=函数+引用环境</code>。</p><h1 id="golang递归"><a href="#golang递归" class="headerlink" title="golang递归"></a>golang递归</h1><p>函数内部调用函数自身的函数称为递归函数。</p><p>使用递归函数最重要的三点：</p><ol><li>递归就是自己调用自己。</li><li>必须先定义函数的退出条件，没有退出条件，递归将成为死循环。</li><li>go语言递归函数很可能会产生一大堆的goroutine，也很可能会出现栈空间内存溢出问题。</li></ol><h2 id="go语言递归实例"><a href="#go语言递归实例" class="headerlink" title="go语言递归实例"></a>go语言递归实例</h2><p><strong>阶乘</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 返回条件</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 自己调用自己</span></span><br><span class="line">        <span class="keyword">return</span> n * a(n<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">5</span></span><br><span class="line">    r := a(n)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>r: 120</code></pre><p><strong>斐波那契数列</strong></p><p>它的计算公式为<code>f(n)=f(n-1)+f(n-2)</code>且<code>f(2)=f(1)=1</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 退出点判断</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> || n == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归表达式</span></span><br><span class="line">    <span class="keyword">return</span> f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := f(<span class="number">5</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r: <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="golang-defer语句"><a href="#golang-defer语句" class="headerlink" title="golang defer语句"></a>golang defer语句</h1><p>go语言中的<code>defer</code>语句会将其后面跟随的语句进行<strong>延迟</strong>处理。在<code>defer</code>归属的函数即将返回时，将延迟处理的语句按<code>defer</code>定义的<strong>逆序</strong>进行执行，也就是说，先被<code>defer</code>的语句最后被执行，最后被<code>defer</code>的语句，最先被执行。stack</p><h2 id="defer特性"><a href="#defer特性" class="headerlink" title="defer特性"></a>defer特性</h2><ol><li>关键字 <code>defer</code> 用于注册延迟调用。</li><li>这些调用直到 <code>return</code> 前才被执。因此，可以用来做资源清理。</li><li>多个<code>defer</code>语句，按先进后出的方式执行。</li><li><code>defer</code>语句中的变量，在<code>defer</code>声明时就决定了。</li></ol><h2 id="defer用途"><a href="#defer用途" class="headerlink" title="defer用途"></a>defer用途</h2><ol><li>关闭文件句柄</li><li>锁资源释放</li><li>数据库连接释放</li></ol><h2 id="go语言defer语句实例"><a href="#go语言defer语句实例" class="headerlink" title="go语言defer语句实例"></a>go语言defer语句实例</h2><p><strong>查看执行顺序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;step2&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;step3&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">end</span><br><span class="line">step3</span><br><span class="line">step2</span><br><span class="line">step1</span><br></pre></td></tr></table></figure><h1 id="golang-init函数"><a href="#golang-init函数" class="headerlink" title="golang init函数"></a>golang init函数</h1><p>golang有一个特殊的函数<code>init</code>函数，先于<code>main</code>函数执行，实现包级别的一些<strong>初始化</strong>操作。</p><h2 id="init函数的主要特点"><a href="#init函数的主要特点" class="headerlink" title="init函数的主要特点"></a>init函数的主要特点</h2><ul><li>init函数先于main函数<strong>自动执行</strong>，不能被其他函数调用；</li><li>init函数没有输入参数、返回值；</li><li>每个包可以有多个init函数；</li><li><strong>包的每个源文件也可以有多个init函数</strong>，这点比较特殊；</li><li>同一个包的init执行顺序，golang没有明确定义，编程时要注意程序不要依赖这个执行顺序。</li><li>不同包的init函数按照包导入的依赖关系决定执行顺序。</li></ul><h2 id="golang-初始化顺序"><a href="#golang-初始化顺序" class="headerlink" title="golang 初始化顺序"></a>golang 初始化顺序</h2><p>初始化顺序：<strong>变量初始化-&gt;init()-&gt;main()</strong></p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = initVar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initVar</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init var...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;main...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init <span class="keyword">var</span>...</span><br><span class="line">init2</span><br><span class="line">init</span><br><span class="line">main...</span><br></pre></td></tr></table></figure><p>程序在运行时，会首先调用 <code>initVar()</code> 函数来初始化全局变量 <code>a</code> 的值。在<br><code>initVar()</code> 函数中，会先打印出 “init var…”。</p><p>然后，程序会按照定义顺序调用两个 <code>init()</code> 函数。因为 <code>init()</code><br>函数是在包被导入时自动调用的，所以这两个函数会在 <code>main()</code><br>函数之前被执行。因此，打印出的内容是 “init” 和 “init2”。</p><p>最后，程序调用 <code>main()</code> 函数，并打印出 “main…”。</p><h1 id="golang指针"><a href="#golang指针" class="headerlink" title="golang指针"></a>golang指针</h1><p>Go语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量。传递数据使用指针，而无须拷贝数据。</p><p>类型指针不能进行偏移和运算。</p><p>Go语言中的指针操作非常简单，只需要记住两个符号：<code>&amp;</code>（取地址）和<code>*</code>（根据地址取值）。</p><h3 id="指针地址和指针类型"><a href="#指针地址和指针类型" class="headerlink" title="指针地址和指针类型"></a>指针地址和指针类型</h3><p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用<code>&amp;</code>字符放在变量前面对变量进行<strong>取地址</strong>操作。<br>Go语言中的值类型<code>（int、float、bool、string、array、struct）</code>都有对应的指针类型，如：<code>*int、*int64、*string</code>等。</p><h2 id="指针语法"><a href="#指针语法" class="headerlink" title="指针语法"></a>指针语法</h2><p>一个指针变量指向了一个值的内存地址。（也就是我们声明了一个指针之后，可以像变量赋值一样，把一个值的内存地址放入到指针当中。）</p><p>类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> var_name *<span class="keyword">var</span>-<span class="keyword">type</span></span><br></pre></td></tr></table></figure><p><code>var-type</code> ：为指针类型</p><p><code>var_name</code> ：为指针变量名</p><p><code>*</code> ：用于指定变量是作为一个指针。</p><h2 id="指针声明实例"><a href="#指针声明实例" class="headerlink" title="指针声明实例"></a>指针声明实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ip *<span class="type">int</span>        <span class="comment">/* 指向整型*/</span></span><br><span class="line"><span class="keyword">var</span> fp *<span class="type">float32</span>    <span class="comment">/* 指向浮点型 */</span></span><br></pre></td></tr></table></figure><h2 id="指针使用实例"><a href="#指针使用实例" class="headerlink" title="指针使用实例"></a>指针使用实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span>= <span class="number">20</span>   <span class="comment">/* 声明实际变量 */</span></span><br><span class="line">    <span class="keyword">var</span> ip *<span class="type">int</span>        <span class="comment">/* 声明指针变量 */</span></span><br><span class="line">    ip = &amp;a  <span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a 变量的地址是: %x\n&quot;</span>, &amp;a  )</span><br><span class="line">    <span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;ip 变量储存的指针地址: %x\n&quot;</span>, ip )</span><br><span class="line">    <span class="comment">/* 使用指针访问值 */</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;*ip 变量的值: %d\n&quot;</span>, *ip )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a 变量的地址是: c00000a0a8</span><br><span class="line">ip 变量储存的指针地址: c00000a0a8</span><br><span class="line">*ip 变量的值: <span class="number">20</span></span><br></pre></td></tr></table></figure><h1 id="golang指向数组的指针"><a href="#golang指向数组的指针" class="headerlink" title="golang指向数组的指针"></a>golang指向数组的指针</h1><h2 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr [MAX]*<span class="type">int</span>; 表示数组里面的元素的类型是指针类型</span><br></pre></td></tr></table></figure><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MAX <span class="type">int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> ptr [MAX]*<span class="type">int</span>;</span><br><span class="line">    fmt.Println(ptr)   <span class="comment">//这个打印出来是[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]</span></span><br><span class="line">    <span class="keyword">for</span>  i = <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">        ptr[i] = &amp;a[i] <span class="comment">/* 整数地址赋值给指针数组 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>  i = <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;a[%d] = %d\n&quot;</span>, i,*ptr[i] )   <span class="comment">//*ptr[i]就是打印出相关指针的值了。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt;]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="golang类型定义和类型别名"><a href="#golang类型定义和类型别名" class="headerlink" title="golang类型定义和类型别名"></a>golang类型定义和类型别名</h1><p>在介绍<strong>结构体</strong>之前，我们先来看看什么是类型定义和类型别名。</p><h1 id="go语言类型定义"><a href="#go语言类型定义" class="headerlink" title="go语言类型定义"></a>go语言类型定义</h1><p><strong>类型定义的语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewType Type</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 类型定义</span></span><br><span class="line">    <span class="keyword">type</span> MyInt <span class="type">int</span></span><br><span class="line">    <span class="comment">// i 为MyInt类型</span></span><br><span class="line">    <span class="keyword">var</span> i MyInt</span><br><span class="line">    i = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v i: %T\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>i: 100 i: main.MyInt</code></pre><h2 id="go语言类型别名"><a href="#go语言类型别名" class="headerlink" title="go语言类型别名"></a>go语言类型别名</h2><p><strong>类型别名的语法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewType = Type</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 类型别名定义</span></span><br><span class="line">    <span class="keyword">type</span> MyInt2 = <span class="type">int</span></span><br><span class="line">    <span class="comment">// i 其实还是int类型</span></span><br><span class="line">    <span class="keyword">var</span> i MyInt2</span><br><span class="line">    i = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;i: %v i: %T\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go语言类型定义和类型别名的区别"><a href="#go语言类型定义和类型别名的区别" class="headerlink" title="go语言类型定义和类型别名的区别"></a>go语言类型定义和类型别名的区别</h2><ol><li>类型定义相当于定义了一个<strong>全新的类型</strong>，与之前的类型不同；但是类型别名并没有定义一个新的类型，而是使用一个别名来替换之前的类型</li><li>类型别名只会在<strong>代码</strong>中存在，在<strong>编译完成</strong>之后并不会存在该别名</li><li>因为类型别名和原来的类型是一致的，所以原来类型所拥有的<strong>方法</strong>，类型别名中也<strong>可以</strong>调用，但是如果是重新定义的一个类型，那么<strong>不可以</strong>调用之前的任何方法</li></ol><h1 id="golang-结构体"><a href="#golang-结构体" class="headerlink" title="golang 结构体"></a>golang 结构体</h1><p>go语言没有面向对象的概念了，但是可以使用结构体来实现，面向对象编程的一些特性，例如：继承、组合等特性。</p><h2 id="go语言结构体的定义"><a href="#go语言结构体的定义" class="headerlink" title="go语言结构体的定义"></a>go语言结构体的定义</h2><p>上一节我们介绍了类型定义，结构体的定义和类型定义类似，只不过多了一个<code>struct</code>关键字，语法结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> struct_variable_type <span class="keyword">struct</span> &#123;</span><br><span class="line">   member definition;</span><br><span class="line">   member definition;</span><br><span class="line">   ...</span><br><span class="line">   member definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>type</code>：结构体定义关键字</p><p><code>struct_variable_type</code>：结构体类型名称</p><p><code>struct</code>：结构体定义关键字</p><p><code>member definition;</code>：成员定义</p><p><strong>实例</strong></p><p>下面我们定义一个人的结构体Person</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id    <span class="type">int</span></span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    age   <span class="type">int</span></span><br><span class="line">    email <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上我们定义一个Person结构体，有四个成员，来描述一个Person的信息。</p><p>形同类型的可以<strong>合并到一行</strong>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id, age     <span class="type">int</span></span><br><span class="line">    name, email <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明一个结构体变量"><a href="#声明一个结构体变量" class="headerlink" title="声明一个结构体变量"></a>声明一个结构体变量</h2><p>声明一个结构体变量和声明一个普通变量相同，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tom Person</span><br><span class="line">fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">kite := Person&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br></pre></td></tr></table></figure><p>也行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tom: &#123;<span class="number">0</span> <span class="number">0</span>  &#125;</span><br><span class="line">kite: &#123;<span class="number">0</span> <span class="number">0</span>  &#125;</span><br></pre></td></tr></table></figure><p>结构体成员，在没有赋值之前都是零值。</p><h2 id="访问结构体成员"><a href="#访问结构体成员" class="headerlink" title="访问结构体成员"></a>访问结构体成员</h2><p>可以使用点运算符(<code>.</code>)，来访问结构体成员，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tom Person</span><br><span class="line">    tom.id = <span class="number">1</span></span><br><span class="line">    tom.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    tom.age = <span class="number">20</span></span><br><span class="line">    tom.email = <span class="string">&quot;tom@gmail.com&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tom: &#123;<span class="number">1</span> <span class="number">20</span> tom tom@gmail.com&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h2><p>如果结构体是临时使用，可以不用起名字，直接使用，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dog <span class="keyword">struct</span> &#123;</span><br><span class="line">        id   <span class="type">int</span></span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line">    dog.id = <span class="number">1</span></span><br><span class="line">    dog.name = <span class="string">&quot;花花&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %v\n&quot;</span>, dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang结构体的初始化"><a href="#golang结构体的初始化" class="headerlink" title="golang结构体的初始化"></a>golang结构体的初始化</h1><p>未初始化的结构体，成员都是零值 int 0 float 0.0 bool false string nil nil</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tom Person</span><br><span class="line">    fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>tom: &#123;0 0 &quot;&quot; &quot;&quot;&#125;</code></pre><h2 id="使用键值对对结构体进行初始化"><a href="#使用键值对对结构体进行初始化" class="headerlink" title="使用键值对对结构体进行初始化"></a>使用键值对对结构体进行初始化</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kite := Person&#123;</span><br><span class="line">        id:    <span class="number">1</span>,</span><br><span class="line">        name:  <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">        age:   <span class="number">20</span>,</span><br><span class="line">        email: <span class="string">&quot;kite@gmail.com&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>kite: &#123;1 20 kite kite@gmail.com&#125;</code></pre><h3 id="使用值的列表初始化"><a href="#使用值的列表初始化" class="headerlink" title="使用值的列表初始化"></a>使用值的列表初始化</h3><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kite := Person&#123;</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">20</span>,</span><br><span class="line">        <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">        <span class="string">&quot;kite@gmail.com&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>kite: &#123;1 20 kite kite@gmail.com&#125;</code></pre><blockquote><p>注意：</p><ol><li>必须初始化结构体的所有字段。</li><li>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li><li>该方式不能和键值初始化方式混用。</li></ol></blockquote><h2 id="部分成员初始化"><a href="#部分成员初始化" class="headerlink" title="部分成员初始化"></a>部分成员初始化</h2><p>用不到的成员，可以不进行初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id, age     <span class="type">int</span></span><br><span class="line">        name, email <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kite := Person&#123;</span><br><span class="line">        id:   <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">&quot;kite&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;kite: %v\n&quot;</span>, kite)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kite: &#123;<span class="number">1</span> <span class="number">0</span> kite <span class="string">&quot;&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h1 id="golang结构体指针"><a href="#golang结构体指针" class="headerlink" title="golang结构体指针"></a>golang结构体指针</h1><p>结构体指针和普通的变量指针相同，我先来回顾一下普通变量的指针，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">    name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    <span class="comment">// p_name 指针类型</span></span><br><span class="line">    <span class="keyword">var</span> p_name *<span class="type">string</span></span><br><span class="line">    <span class="comment">// &amp;name 取name地址</span></span><br><span class="line">    p_name = &amp;name</span><br><span class="line">    fmt.Printf(<span class="string">&quot;name: %v\n&quot;</span>, name)</span><br><span class="line">    <span class="comment">// 输出指针地址</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;p_name: %v\n&quot;</span>, p_name)</span><br><span class="line">    <span class="comment">// 输出指针指向的内容值</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;*p_name: %v\n&quot;</span>, *p_name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>name: tomp_name: 0xc00010e120*p_name: tom</code></pre><h2 id="go结构体指针"><a href="#go结构体指针" class="headerlink" title="go结构体指针"></a>go结构体指针</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id   <span class="type">int</span></span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tom = Person&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p_person *Person</span><br><span class="line">    p_person = &amp;tom</span><br><span class="line">    fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p_person: %p\n&quot;</span>, p_person)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;*p_person: %v\n&quot;</span>, *p_person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>tom: &#123;1 tom&#125;p_person: 0xc000004078*p_person: &#123;1 tom&#125;</code></pre><h2 id="使用new关键字创建结构体指针"><a href="#使用new关键字创建结构体指针" class="headerlink" title="使用new关键字创建结构体指针"></a>使用<code>new</code>关键字创建结构体指针</h2><p>我们还可以通过使用<code>new</code>关键字对结构体进行实例化，得到的是结构体的地址，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id   <span class="type">int</span></span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p_person = <span class="built_in">new</span>(Person)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p_person: %T\n&quot;</span>, p_person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>p_person: *main.Person</code></pre><p>从运行结果，我们发现p_person为指针类型</p><h2 id="访问结构体指针成员"><a href="#访问结构体指针成员" class="headerlink" title="访问结构体指针成员"></a>访问结构体指针成员</h2><p>访问结构体指针成员，也使用点运算符(<code>.</code>)，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        id   <span class="type">int</span></span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p_person = <span class="built_in">new</span>(Person)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p_person: %T\n&quot;</span>, p_person)</span><br><span class="line"></span><br><span class="line">    p_person.id = <span class="number">1</span></span><br><span class="line">    p_person.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;*p_person: %v\n&quot;</span>, *p_person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p_person: *main.Person</span><br><span class="line">*p_person: &#123;<span class="number">1</span> tom&#125;</span><br></pre></td></tr></table></figure><h1 id="golang结构体作为函数参数"><a href="#golang结构体作为函数参数" class="headerlink" title="golang结构体作为函数参数"></a>golang结构体作为函数参数</h1><p>go结构体可以像普通变量一样，作为函数的参数，传递给函数，这里分为两种情况：</p><ol><li>直接传递结构体，这是是一个副本（拷贝），在函数内部不会改变外面结构体内容。</li><li>传递结构体指针，这时在函数内部，能够改变外部结构体内容。</li></ol><h2 id="直接传递结构体"><a href="#直接传递结构体" class="headerlink" title="直接传递结构体"></a>直接传递结构体</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id   <span class="type">int</span></span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson</span><span class="params">(person Person)</span></span> &#123;</span><br><span class="line">    person.id = <span class="number">1</span></span><br><span class="line">    person.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person := Person&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">    showPerson(person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>person: &#123;1 tom&#125;----------------person: &#123;1 kite&#125;----------------person: &#123;1 tom&#125;</code></pre><p>从运行结果可以看出，函数内部改变了结构体内容，函数外面并没有被改变。</p><blockquote><p>从输出结果可以看出，showPerson 函数将传入的 “person” 变量的 “id” 和<br>“name” 成员变量分别修改为 1 和 “kite”，然后将修改后的 “person”<br>变量打印到控制台上。但是，在 main 函数中打印 “person”<br>变量时，其值没有发生变化，因为在 Go<br>语言中，结构体类型的参数是按值传递的，即传递的是该参数的副本，而不是其指针。因此，showPerson<br>函数修改的是其副本，而不是原始的 “person”<br>变量。如果要修改原始变量，可以将参数定义为指针类型，并使用 *<br>操作符来获取其指针。</p><p>在 Go 语言中，函数参数是按值传递的。也就是说，当 showPerson<br>函数被调用时，它会接收到一个 person 变量的副本，而不是原始的 person<br>变量。因此，当 showPerson 函数修改 person<br>副本的属性时，它实际上修改的是副本的值，而不是原始 person<br>变量的值。原始 person 变量的值仍然是创建时的值，即 id 为 1，name 为<br>“tom”。因此，在 main 函数中打印 person<br>变量的值时，输出的仍然是原始的值 “1,tom”，而不是 showPerson<br>函数修改后的值<br>“2,kite”。如果要修改原始变量，可以将参数定义为指针类型，并使用 *<br>操作符来获取其指针。</p></blockquote><h2 id="传递结构体指针"><a href="#传递结构体指针" class="headerlink" title="传递结构体指针"></a>传递结构体指针</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    id   <span class="type">int</span></span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson</span><span class="params">(person *Person)</span></span> &#123;</span><br><span class="line">    person.id = <span class="number">1</span></span><br><span class="line">    person.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person := Person&#123;<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">    showPerson(&amp;person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>person: &#123;1 tom&#125;----------------person: &amp;&#123;1 kite&#125;----------------person: &#123;1 kite&#125;</code></pre><p>从运行结果，我们可以看到，调用函数后，参数被改变了。</p><h1 id="golang嵌套结构体"><a href="#golang嵌套结构体" class="headerlink" title="golang嵌套结构体"></a>golang嵌套结构体</h1><p>go语言没有面向对象编程思想，也没有继承关系，但是可以通过结构体嵌套来实现这种效果。</p><p>下面通过实例演示如何实现结构体嵌套，加入有一个人<code>Person</code>结构体，这个人还养了一个宠物<code>Dog</code>结构体。</p><p>下面我们来看一下：</p><p><strong>Dog结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    color <span class="type">string</span></span><br><span class="line">    age   <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Person结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">    dog  Dog</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问它们</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    color <span class="type">string</span></span><br><span class="line">    age   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">    dog  Dog</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> tom person</span><br><span class="line">    tom.dog.name = <span class="string">&quot;花花&quot;</span></span><br><span class="line">    tom.dog.color = <span class="string">&quot;黑白花&quot;</span></span><br><span class="line">    tom.dog.age = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    tom.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    tom.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;tom: %v\n&quot;</span>, tom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tom: &#123;&#123;花花 黑白花 <span class="number">2</span>&#125; tom <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="golang方法"><a href="#golang方法" class="headerlink" title="golang方法"></a>golang方法</h1><p>go语言没有面向对象的特性，也没有类对象的概念。但是，可以使用结构体来模拟这些特性，我们都知道面向对象里面有类方法等概念。我们也可以声明一些方法，属于某个结构体。</p><h2 id="go语言方法的语法"><a href="#go语言方法的语法" class="headerlink" title="go语言方法的语法"></a>go语言方法的语法</h2><p>Go中的方法，是一种<strong>特殊的函数</strong>，定义于struct之上(与struct关联、绑定)，被称为struct的接受者(receiver)。</p><p>通俗的讲，方法就是有接收者的函数。</p><p>语法格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mytype <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recv mytype)</span></span> my_method(para) return_type &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recv *mytype)</span></span> my_method(para) return_type &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>mytype</code>：定义一个结构体</p><p><code>recv</code>：接受该方法的结构体(receiver)</p><p><code>my_method</code>：方法名称</p><p><code>para</code>：参数列表</p><p><code>return_type</code>：返回值类型</p><p>从语法格式可以看出，一个方法和一个函数非常相似，多了一个接受类型。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(per.name + <span class="string">&quot; eating....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(per.name + <span class="string">&quot; sleep....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> per Person</span><br><span class="line">    per.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    per.eat()</span><br><span class="line">    per.sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>tom eating....tom sleep....</code></pre><h2 id="go语言方法的注意事项"><a href="#go语言方法的注意事项" class="headerlink" title="go语言方法的注意事项"></a>go语言方法的注意事项</h2><ol><li>方法的receiver<br>type并非一定要是struct类型，type定义的类型别名、slice、map、channel、func类型等都可以。</li><li>struct结合它的方法就等价于面向对象中的类。只不过struct可以和它的方法分开，并非一定要属于同一个文件，但必须属于同一个包。</li><li>方法有两种接收类型：<code>(T Type)</code>和<code>(T *Type)</code>，它们之间有区别。</li><li>方法就是函数，所以Go中没有方法重载(overload)的说法，也就是说同一个类型中的所有方法名必须都唯一。</li><li>如果receiver是一个指针类型，则会自动解除引用。</li><li>方法和type是分开的，意味着实例的行为(behavior)和数据存储(field)是分开的，但是它们通过receiver建立起关联关系。</li></ol><h1 id="golang方法接收者类型"><a href="#golang方法接收者类型" class="headerlink" title="golang方法接收者类型"></a>golang方法接收者类型</h1><p>结构体实例，有值类型和指针类型，那么方法的接收者是结构体，那么也有值类型和指针类型。区别就是接收者是否复制结构体副本。值类型复制，指针类型不复制。</p><h2 id="值类型结构体和指针类型结构体"><a href="#值类型结构体和指针类型结构体" class="headerlink" title="值类型结构体和指针类型结构体"></a>值类型结构体和指针类型结构体</h2><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %T\n&quot;</span>, p1)</span><br><span class="line">    p2 := &amp;Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %T\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>p1: main.Personp2: *main.Person</code></pre><p>从运行结果，我们可以看出p1是值类型，p2是指针类型。</p><p>下面看一个传参结构体的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson</span><span class="params">(per Person)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, &amp;per)</span><br><span class="line">    per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showPerson2</span><span class="params">(per *Person)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, per)</span><br><span class="line">    per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %p\n&quot;</span>, &amp;p1)</span><br><span class="line">    showPerson(p1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %v\n&quot;</span>, p1)</span><br><span class="line">    fmt.Println(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">    p2 := &amp;Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %p\n&quot;</span>, p2)</span><br><span class="line">    showPerson2(p2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %v\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>p1: 0xc000046240per: 0xc000046250per: &#123;kite&#125;p1: &#123;tom&#125;---------------p2: 0xc000046280per: 0xc000046280per: &amp;&#123;kite&#125;p2: &amp;&#123;kite&#125;</code></pre><p>从运行结果，我们看到p1是值传递，拷贝了副本，地址发生了改变，而p2是指针类型，地址没有改变。</p><h2 id="方法的值类型和指针类型接收者"><a href="#方法的值类型和指针类型接收者" class="headerlink" title="方法的值类型和指针类型接收者"></a>方法的值类型和指针类型接收者</h2><p>值类型和指针类型接收者，本质上和函数传参道理相同。</p><p><strong>实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> showPerson() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, &amp;per)</span><br><span class="line">    per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per *Person)</span></span> showPerson2() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %p\n&quot;</span>, per)</span><br><span class="line">    per.name = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %p\n&quot;</span>, &amp;p1)</span><br><span class="line">    p1.showPerson()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p1: %v\n&quot;</span>, p1)</span><br><span class="line">    fmt.Println(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">    p2 := &amp;Person&#123;name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %p\n&quot;</span>, p2)</span><br><span class="line">    p2.showPerson2()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;p2: %v\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>p1: 0xc000046240per: 0xc000046250per: &#123;kite&#125;p1: &#123;tom&#125;---------------p2: 0xc000046280per: 0xc000046280per: &amp;&#123;kite&#125;p2: &amp;&#123;kite&#125;</code></pre><p>从运行结果，我们看到p1是值传递，拷贝了副本，地址发生了改变，而p2是指针类型，地址没有改变。</p><h1 id="golang接口"><a href="#golang接口" class="headerlink" title="golang接口"></a>golang接口</h1><p>接口像是一个公司里面的领导，他会定义一些通用规范，只设计规范，而不实现规范。</p><p>go语言的接口，是一种新的<strong>类型定义</strong>，它把所有的<strong>具有共性的方法</strong>定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。</p><p>语法格式和方法非常类似。</p><h2 id="接口的语法格式"><a href="#接口的语法格式" class="headerlink" title="接口的语法格式"></a>接口的语法格式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义接口 */</span></span><br><span class="line"><span class="keyword">type</span> interface_name <span class="keyword">interface</span> &#123;</span><br><span class="line">   method_name1 [return_type]</span><br><span class="line">   method_name2 [return_type]</span><br><span class="line">   method_name3 [return_type]</span><br><span class="line">   ...</span><br><span class="line">   method_namen [return_type]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义结构体 */</span></span><br><span class="line"><span class="keyword">type</span> struct_name <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">/* variables */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实现接口方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span></span> method_name1() [return_type] &#123;</span><br><span class="line">   <span class="comment">/* 方法实现 */</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span></span> method_namen() [return_type] &#123;</span><br><span class="line">   <span class="comment">/* 方法实现*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接口定义中定义，若干个空方法。这些方法都具有通用性。</p><h2 id="接口实例"><a href="#接口实例" class="headerlink" title="接口实例"></a>接口实例</h2><p>下面我定义一个USB接口，有读read和写write两个方法，再定义一个电脑Computer和一个手机Mobile来实现这个接口。</p><p><strong>USB接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> USB <span class="keyword">interface</span> &#123;</span><br><span class="line">    read()</span><br><span class="line">    write()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Computer结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Mobile结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Mobile <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Computer实现USB接口方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span></span> read() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;computer read...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span></span> write() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;computer write...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Mobile实现USB接口方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Mobile)</span></span> read() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;mobile read...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Mobile)</span></span> write() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;mobile write...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := Computer&#123;&#125;</span><br><span class="line">    m := Mobile&#123;&#125;</span><br><span class="line"></span><br><span class="line">    c.read()</span><br><span class="line">    c.write()</span><br><span class="line">    m.read()</span><br><span class="line">    m.write()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computer read...</span><br><span class="line">computer write...</span><br><span class="line">moblice read...</span><br><span class="line">moblice write...</span><br></pre></td></tr></table></figure><h2 id="实现接口必须实现接口中的所有方法"><a href="#实现接口必须实现接口中的所有方法" class="headerlink" title="实现接口必须实现接口中的所有方法"></a>实现接口必须实现接口中的所有方法</h2><p>下面我们定义一个OpenClose接口，里面有两个方法open和close，定义个Door结构体，实现其中一个方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OpenClose <span class="keyword">interface</span> &#123;</span><br><span class="line">    open()</span><br><span class="line">    <span class="built_in">close</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Door <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Door)</span></span> open() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;open door...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> oc OpenClose</span><br><span class="line">    oc = Door&#123;&#125; <span class="comment">// 这里编译错误，提示只实现了一个接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang接口值类型接收者和指针类型接收者"><a href="#golang接口值类型接收者和指针类型接收者" class="headerlink" title="golang接口值类型接收者和指针类型接收者"></a>golang接口值类型接收者和指针类型接收者</h1><p>这个话题，本质上和方法的值类型接收者和指针类型接收者，的思考方法是一样的，值接收者是一个拷贝，是一个副本，而指针接收者，传递的是指针。</p><h2 id="实例演示-1"><a href="#实例演示-1" class="headerlink" title="实例演示"></a>实例演示</h2><p><strong>定义一个Pet接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span><br><span class="line">    eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个Dog结构体</strong></p><pre><code>type Dog struct &#123;    name string&#125;</code></pre><p><strong>实现Pet接口（接收者是值类型）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> eat() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, &amp;dog)</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog eat..&quot;</span>)</span><br><span class="line">    dog.name = <span class="string">&quot;黑黑&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dog := Dog&#123;name: <span class="string">&quot;花花&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, &amp;dog)</span><br><span class="line">    dog.eat()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %v\n&quot;</span>, dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>dog: 0xc000046240dog: 0xc000046250dog eat..dog: &#123;花花&#125;</code></pre><p>从运行结果，我们看出dog的地址变了，说明是复制了一份，dog的name没有变说明，外面的dog变量没有被改变。</p><p><strong>将Pet接口改为指针接收者</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog *Dog)</span></span> eat() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, dog)</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog eat..&quot;</span>)</span><br><span class="line">    dog.name = <span class="string">&quot;黑黑&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>再测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dog := &amp;Dog&#123;name: <span class="string">&quot;花花&quot;</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %p\n&quot;</span>, dog)</span><br><span class="line">    dog.eat()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;dog: %v\n&quot;</span>, dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog: <span class="number">0xc00008c230</span></span><br><span class="line">dog: <span class="number">0xc00008c230</span></span><br><span class="line">dog eat..</span><br><span class="line">dog: &amp;&#123;黑黑&#125;</span><br></pre></td></tr></table></figure><h1 id="golang接口和类型的关系"><a href="#golang接口和类型的关系" class="headerlink" title="golang接口和类型的关系"></a>golang接口和类型的关系</h1><ol><li>一个类型可以实现多个接口</li><li>多个类型可以实现同一个接口（多态）</li></ol><h2 id="一个类型实现多个接口"><a href="#一个类型实现多个接口" class="headerlink" title="一个类型实现多个接口"></a>一个类型实现多个接口</h2><p>一个类型实现多个接口，例如：有一个Player接口可以播放音乐，有一个Video接口可以播放视频，一个手机Mobile实现这两个接口，既可以播放音乐，又可以播放视频。</p><p><strong>定义一个Player接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Player <span class="keyword">interface</span> &#123;</span><br><span class="line">    playMusic()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个Video接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Video <span class="keyword">interface</span> &#123;</span><br><span class="line">    playVideo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义Mobile结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Mobile <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现两个接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mobile)</span></span> playMusic() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;播放音乐&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mobile)</span></span> playVideo() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;播放视频&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := Mobile&#123;&#125;</span><br><span class="line">    m.playMusic()</span><br><span class="line">    m.playVideo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>播放音乐播放视频</code></pre><h2 id="多个类型实现同一个接口"><a href="#多个类型实现同一个接口" class="headerlink" title="多个类型实现同一个接口"></a>多个类型实现同一个接口</h2><p>比如，一个宠物接口Pet，猫类型Cat和狗类型Dog都可以实现该接口，都可以把猫和狗当宠物类型对待，这在其他语言中叫做<strong>多态</strong>。</p><p><strong>定义一个Pet接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span><br><span class="line">    eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个Dog结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个Cat结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;cat eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog eat...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Pet</span><br><span class="line">    p = Cat&#123;&#125;</span><br><span class="line">    p.eat()</span><br><span class="line">    p = Dog&#123;&#125;</span><br><span class="line">    p.eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat eat...</span><br><span class="line">dog eat...</span><br></pre></td></tr></table></figure><h1 id="golang接口嵌套"><a href="#golang接口嵌套" class="headerlink" title="golang接口嵌套"></a>golang接口嵌套</h1><p>接口可以通过嵌套，创建新的接口。例如：飞鱼，既可以飞，又可以游泳。我们创建一个飞Fly接口，创建一个游泳接口Swim，飞鱼接口有这两个接口组成。</p><p><strong>飞Flyer接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Flyer <span class="keyword">interface</span> &#123;</span><br><span class="line">    fly()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建Swimmer接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Swimmer <span class="keyword">interface</span> &#123;</span><br><span class="line">    swim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组合一个接口FlyFish</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FlyFish <span class="keyword">interface</span> &#123;</span><br><span class="line">    Flyer</span><br><span class="line">    Swimmer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建一个结构体Fish</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Fish <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现这个组合接口</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fish Fish)</span></span> fly() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;fly...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fish Fish)</span></span> swim() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;swim...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ff FlyFish</span><br><span class="line">    ff = Fish&#123;&#125;</span><br><span class="line">    ff.fly()</span><br><span class="line">    ff.swim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>fly...swim...</code></pre><h1 id="golang-通过接口实现OCP设计原则"><a href="#golang-通过接口实现OCP设计原则" class="headerlink" title="golang 通过接口实现OCP设计原则"></a>golang 通过接口实现OCP设计原则</h1><p>而面向<strong>对象的可复用设计</strong>的第一块基石，便是所谓的”开-闭”原则（Open-Closed<br>Principle,常缩写为OCP）。虽然，go不是面向对象语言，但是也可以模拟实现这个原则。对<strong>扩展</strong>是开放的，对<strong>修改</strong>是关闭的。</p><h2 id="OCP设计原则实例"><a href="#OCP设计原则实例" class="headerlink" title="OCP设计原则实例"></a>OCP设计原则实例</h2><p>下面通过一个人养宠物的例子，来解释OCP设计原则。</p><p><strong>定义一个宠物接口Pet</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span><br><span class="line">    eat()</span><br><span class="line">    sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口有吃和睡两个方法。</p><p><strong>定义个Dog结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dog实现接口方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;dog sleep...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个Cat结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Cat实现接口方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;cat eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;cat sleep...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义个Person结构体</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为Person添加一个养宠物方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> care(pet Pet) &#123;</span><br><span class="line">    pet.eat()</span><br><span class="line">    pet.sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后测试一下</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    dog := Dog&#123;&#125;</span><br><span class="line">    cat := Cat&#123;&#125;</span><br><span class="line">    per := Person&#123;&#125;</span><br><span class="line"></span><br><span class="line">    per.care(dog)</span><br><span class="line">    per.care(cat)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog eat...</span><br><span class="line">dog sleep...</span><br><span class="line">cat eat...</span><br><span class="line">cat sleep...</span><br></pre></td></tr></table></figure><p>使用接口的这种设计方法，可以很好的解耦合代码，实现软件设计的OCP原则（即开闭原则）</p><p>这样设计，如果再添加一个宠物，例如：一个鸟<code>Bird</code>，原有的代码不用修改，直接添加就可以。</p><h1 id="golang继承"><a href="#golang继承" class="headerlink" title="golang继承"></a>golang继承</h1><p>golang本质上没有oop的概念，也没有继承的概念，但是可以通过<strong>结构体嵌套</strong>实现这个特性。</p><p><strong>例如</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sleep&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">    Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dog := Dog&#123;</span><br><span class="line">        Animal&#123;</span><br><span class="line">            name: <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">            age:  <span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cat := Cat&#123;</span><br><span class="line">        Animal&#123;name: <span class="string">&quot;cat&quot;</span>,</span><br><span class="line">            age: <span class="number">3</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dog.eat()</span><br><span class="line">    dog.sleep()</span><br><span class="line"></span><br><span class="line">    cat.eat()</span><br><span class="line">    cat.sleep()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang模拟OOP的属性和方法"><a href="#golang模拟OOP的属性和方法" class="headerlink" title="golang模拟OOP的属性和方法"></a>golang模拟OOP的属性和方法</h1><p>golang没有面向对象的概念，也没有封装的概念，但是可以通过结构体<code>struct</code>和函数<strong>绑定</strong>来实现OOP的属性和方法等特性。接收者<br>receiver <strong>方法</strong>。</p><p><strong>例如</strong>，想要定义一个Person类，有name和age属性，有eat&#x2F;sleep&#x2F;work方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> eat() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;eat...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> sleep() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sleep...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(per Person)</span></span> work() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;work...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    per := Person&#123;</span><br><span class="line">        name: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">        age:  <span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;per: %v\n&quot;</span>, per)</span><br><span class="line"></span><br><span class="line">    per.eat()</span><br><span class="line">    per.sleep()</span><br><span class="line">    per.work()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang构造函数"><a href="#golang构造函数" class="headerlink" title="golang构造函数"></a>golang构造函数</h1><p>golang没有构造函数的概念，可以使用函数来模拟构造函数的的功能。</p><p><strong>例如</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span> <span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> (*Person, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;name 不能为空&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;age 不能小于0&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;Person&#123;name: name, age: age&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person, err := NewPerson(<span class="string">&quot;tom&quot;</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;person: %v\n&quot;</span>, *person)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="golang包"><a href="#golang包" class="headerlink" title="golang包"></a>golang包</h1><p>包可以区分命令空间（一个文件夹中不能有两个同名文件），也可以更好的管理项目。go中创建一个包，一般是创建一个文件夹，在该文件夹里面的go文件中，使用package关键字声明包名称，通常，文件夹名称和包名称相同。并且，同一个文件下面只有一个包</p><h2 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h2><ol><li><p>创建一个名为dao的文件夹。</p></li><li><p>创建一个dao.go文件。</p></li><li><p>在该文件中声明包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test1</span><span class="params">()</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;test package&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><p>要使用某个包下面的变量或者方法，需要导入该包，导入包时，要导入从<code>GOPATH</code>开始的包路径，例如，在<code>service.go</code>中导入<code>dao</code>包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;dao&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dao.Test1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包注意事项"><a href="#包注意事项" class="headerlink" title="包注意事项"></a>包注意事项</h2><ul><li>一个文件夹下只能有一个package<ul><li><code>import</code>后面的其实是<code>GOPATH</code>开始的相对目录路径，包括最后一段。但由于一个目录下只能有一个package，所以<code>import</code>一个路径就等于是<code>import</code>了这个路径下的包。</li><li>注意，这里指的是”直接包含”的go文件。如果有子目录，那么子目录的父目录是完全两个包。</li></ul></li><li>比如你实现了一个计算器package，名叫<code>calc</code>，位于<code>calc</code>目录下；但又想给别人一个使用范例，于是在calc下可以建个example子目录（calc&#x2F;example&#x2F;），这个子目录里有个example.go（calc&#x2F;example&#x2F;example.go）。此时，example.go可以是main包，里面还可以有个main函数。</li><li>一个package的文件不能在多个文件夹下<ul><li>如果多个文件夹下有重名的package，它们其实是彼此无关的package。</li><li>如果一个go文件需要同时使用不同目录下的同名package，需要在<code>import</code>这些目录时为每个目录指定一个package的别名。</li></ul></li></ul><h1 id="golang-包管理工具go-module"><a href="#golang-包管理工具go-module" class="headerlink" title="golang 包管理工具go module"></a>golang 包管理工具go module</h1><h2 id="go-module简介"><a href="#go-module简介" class="headerlink" title="go module简介"></a>go module简介</h2><p>go modules 是 golang 1.11 新加的特性，用来管理模块中<strong>包的依赖关系</strong>。</p><h2 id="go-mod-使用方法"><a href="#go-mod-使用方法" class="headerlink" title="go mod 使用方法"></a>go mod 使用方法</h2><ul><li>初始化模块 <code>go mod init &lt;项目模块名称&gt;</code></li><li>依赖关系处理 ,根据go.mod文件 <code>go mod tidy</code></li><li>将依赖包复制到项目下的 vendor目录。 <code>go mod vendor</code><br><strong>如果包被屏蔽(墙),可以使用这个命令，随后使用go build<br>-mod&#x3D;vendor编译</strong></li><li>显示依赖关系 <code>go list -m all</code></li><li>显示详细依赖关系 <code>go list -m -json all</code></li><li>下载依赖 <code>go mod download [path@version]</code><br><strong>[path@version]是非必写的</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;golang标识符、关键字、命名规则&quot;&gt;&lt;a href=&quot;#golang标识符、关键字、命名规则&quot; class=&quot;headerlink&quot; title=&quot;golang标识符、关键字、命名规则&quot;&gt;&lt;/a&gt;golang标识符、关键字、命名规则&lt;/h1&gt;&lt;h2 id=&quot;标</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="https://ryanchou612.github.io/posts/b24dd347.html"/>
    <id>https://ryanchou612.github.io/posts/b24dd347.html</id>
    <published>2023-07-09T09:56:51.000Z</published>
    <updated>2023-07-14T14:34:59.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;内容&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ryanchou612.github.io/posts/4a17b156.html"/>
    <id>https://ryanchou612.github.io/posts/4a17b156.html</id>
    <published>2023-07-09T09:53:44.060Z</published>
    <updated>2023-07-14T13:27:29.471Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
